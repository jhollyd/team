{"ast":null,"code":"/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n/**\n * Represents the BINARY value type, which contains extra methods for encoding and decoding.\n *\n * @memberof ICAL\n */\nclass Binary {\n  /**\n   * Creates a binary value from the given string.\n   *\n   * @param {String} aString        The binary value string\n   * @return {Binary}               The binary value instance\n   */\n  static fromString(aString) {\n    return new Binary(aString);\n  }\n\n  /**\n   * Creates a new ICAL.Binary instance\n   *\n   * @param {String} aValue     The binary data for this value\n   */\n  constructor(aValue) {\n    this.value = aValue;\n  }\n\n  /**\n   * The type name, to be used in the jCal object.\n   * @default \"binary\"\n   * @constant\n   */\n  icaltype = \"binary\";\n\n  /**\n   * Base64 decode the current value\n   *\n   * @return {String}         The base64-decoded value\n   */\n  decodeValue() {\n    return this._b64_decode(this.value);\n  }\n\n  /**\n   * Encodes the passed parameter with base64 and sets the internal\n   * value to the result.\n   *\n   * @param {String} aValue      The raw binary value to encode\n   */\n  setEncodedValue(aValue) {\n    this.value = this._b64_encode(aValue);\n  }\n  _b64_encode(data) {\n    // http://kevin.vanzonneveld.net\n    // +   original by: Tyler Akins (http://rumkin.com)\n    // +   improved by: Bayron Guevara\n    // +   improved by: Thunder.m\n    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   bugfixed by: Pellentesque Malesuada\n    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   improved by: Rafa≈Ç Kukawski (http://kukawski.pl)\n    // *     example 1: base64_encode('Kevin van Zonneveld');\n    // *     returns 1: 'S2V2aW4gdmFuIFpvbm5ldmVsZA=='\n    // mozilla has this native\n    // - but breaks in 2.0.0.12!\n    //if (typeof this.window['atob'] == 'function') {\n    //    return atob(data);\n    //}\n    let b64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" + \"abcdefghijklmnopqrstuvwxyz0123456789+/=\";\n    let o1,\n      o2,\n      o3,\n      h1,\n      h2,\n      h3,\n      h4,\n      bits,\n      i = 0,\n      ac = 0,\n      enc = \"\",\n      tmp_arr = [];\n    if (!data) {\n      return data;\n    }\n    do {\n      // pack three octets into four hexets\n      o1 = data.charCodeAt(i++);\n      o2 = data.charCodeAt(i++);\n      o3 = data.charCodeAt(i++);\n      bits = o1 << 16 | o2 << 8 | o3;\n      h1 = bits >> 18 & 0x3f;\n      h2 = bits >> 12 & 0x3f;\n      h3 = bits >> 6 & 0x3f;\n      h4 = bits & 0x3f;\n\n      // use hexets to index into b64, and append result to encoded string\n      tmp_arr[ac++] = b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) + b64.charAt(h4);\n    } while (i < data.length);\n    enc = tmp_arr.join('');\n    let r = data.length % 3;\n    return (r ? enc.slice(0, r - 3) : enc) + '==='.slice(r || 3);\n  }\n  _b64_decode(data) {\n    // http://kevin.vanzonneveld.net\n    // +   original by: Tyler Akins (http://rumkin.com)\n    // +   improved by: Thunder.m\n    // +      input by: Aman Gupta\n    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   bugfixed by: Onno Marsman\n    // +   bugfixed by: Pellentesque Malesuada\n    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +      input by: Brett Zamir (http://brett-zamir.me)\n    // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // *     example 1: base64_decode('S2V2aW4gdmFuIFpvbm5ldmVsZA==');\n    // *     returns 1: 'Kevin van Zonneveld'\n    // mozilla has this native\n    // - but breaks in 2.0.0.12!\n    //if (typeof this.window['btoa'] == 'function') {\n    //    return btoa(data);\n    //}\n    let b64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" + \"abcdefghijklmnopqrstuvwxyz0123456789+/=\";\n    let o1,\n      o2,\n      o3,\n      h1,\n      h2,\n      h3,\n      h4,\n      bits,\n      i = 0,\n      ac = 0,\n      dec = \"\",\n      tmp_arr = [];\n    if (!data) {\n      return data;\n    }\n    data += '';\n    do {\n      // unpack four hexets into three octets using index points in b64\n      h1 = b64.indexOf(data.charAt(i++));\n      h2 = b64.indexOf(data.charAt(i++));\n      h3 = b64.indexOf(data.charAt(i++));\n      h4 = b64.indexOf(data.charAt(i++));\n      bits = h1 << 18 | h2 << 12 | h3 << 6 | h4;\n      o1 = bits >> 16 & 0xff;\n      o2 = bits >> 8 & 0xff;\n      o3 = bits & 0xff;\n      if (h3 == 64) {\n        tmp_arr[ac++] = String.fromCharCode(o1);\n      } else if (h4 == 64) {\n        tmp_arr[ac++] = String.fromCharCode(o1, o2);\n      } else {\n        tmp_arr[ac++] = String.fromCharCode(o1, o2, o3);\n      }\n    } while (i < data.length);\n    dec = tmp_arr.join('');\n    return dec;\n  }\n\n  /**\n   * The string representation of this value\n   * @return {String}\n   */\n  toString() {\n    return this.value;\n  }\n}\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\nconst DURATION_LETTERS = /([PDWHMTS]{1,1})/;\nconst DATA_PROPS_TO_COPY = [\"weeks\", \"days\", \"hours\", \"minutes\", \"seconds\", \"isNegative\"];\n\n/**\n * This class represents the \"duration\" value type, with various calculation\n * and manipulation methods.\n *\n * @memberof ICAL\n */\nclass Duration {\n  /**\n   * Returns a new ICAL.Duration instance from the passed seconds value.\n   *\n   * @param {Number} aSeconds       The seconds to create the instance from\n   * @return {Duration}             The newly created duration instance\n   */\n  static fromSeconds(aSeconds) {\n    return new Duration().fromSeconds(aSeconds);\n  }\n\n  /**\n   * Checks if the given string is an iCalendar duration value.\n   *\n   * @param {String} value      The raw ical value\n   * @return {Boolean}          True, if the given value is of the\n   *                              duration ical type\n   */\n  static isValueString(string) {\n    return string[0] === 'P' || string[1] === 'P';\n  }\n\n  /**\n   * Creates a new {@link ICAL.Duration} instance from the passed string.\n   *\n   * @param {String} aStr       The string to parse\n   * @return {Duration}         The created duration instance\n   */\n  static fromString(aStr) {\n    let pos = 0;\n    let dict = Object.create(null);\n    let chunks = 0;\n    while ((pos = aStr.search(DURATION_LETTERS)) !== -1) {\n      let type = aStr[pos];\n      let numeric = aStr.slice(0, Math.max(0, pos));\n      aStr = aStr.slice(pos + 1);\n      chunks += parseDurationChunk(type, numeric, dict);\n    }\n    if (chunks < 2) {\n      // There must be at least a chunk with \"P\" and some unit chunk\n      throw new Error('invalid duration value: Not enough duration components in \"' + aStr + '\"');\n    }\n    return new Duration(dict);\n  }\n\n  /**\n   * Creates a new ICAL.Duration instance from the given data object.\n   *\n   * @param {Object} aData                An object with members of the duration\n   * @param {Number=} aData.weeks         Duration in weeks\n   * @param {Number=} aData.days          Duration in days\n   * @param {Number=} aData.hours         Duration in hours\n   * @param {Number=} aData.minutes       Duration in minutes\n   * @param {Number=} aData.seconds       Duration in seconds\n   * @param {Boolean=} aData.isNegative   If true, the duration is negative\n   * @return {Duration}                   The createad duration instance\n   */\n  static fromData(aData) {\n    return new Duration(aData);\n  }\n\n  /**\n   * Creates a new ICAL.Duration instance.\n   *\n   * @param {Object} data                 An object with members of the duration\n   * @param {Number=} data.weeks          Duration in weeks\n   * @param {Number=} data.days           Duration in days\n   * @param {Number=} data.hours          Duration in hours\n   * @param {Number=} data.minutes        Duration in minutes\n   * @param {Number=} data.seconds        Duration in seconds\n   * @param {Boolean=} data.isNegative    If true, the duration is negative\n   */\n  constructor(data) {\n    this.wrappedJSObject = this;\n    this.fromData(data);\n  }\n\n  /**\n   * The weeks in this duration\n   * @type {Number}\n   * @default 0\n   */\n  weeks = 0;\n\n  /**\n   * The days in this duration\n   * @type {Number}\n   * @default 0\n   */\n  days = 0;\n\n  /**\n   * The days in this duration\n   * @type {Number}\n   * @default 0\n   */\n  hours = 0;\n\n  /**\n   * The minutes in this duration\n   * @type {Number}\n   * @default 0\n   */\n  minutes = 0;\n\n  /**\n   * The seconds in this duration\n   * @type {Number}\n   * @default 0\n   */\n  seconds = 0;\n\n  /**\n   * The seconds in this duration\n   * @type {Boolean}\n   * @default false\n   */\n  isNegative = false;\n\n  /**\n   * The class identifier.\n   * @constant\n   * @type {String}\n   * @default \"icalduration\"\n   */\n  icalclass = \"icalduration\";\n\n  /**\n   * The type name, to be used in the jCal object.\n   * @constant\n   * @type {String}\n   * @default \"duration\"\n   */\n  icaltype = \"duration\";\n\n  /**\n   * Returns a clone of the duration object.\n   *\n   * @return {Duration}      The cloned object\n   */\n  clone() {\n    return Duration.fromData(this);\n  }\n\n  /**\n   * The duration value expressed as a number of seconds.\n   *\n   * @return {Number}             The duration value in seconds\n   */\n  toSeconds() {\n    let seconds = this.seconds + 60 * this.minutes + 3600 * this.hours + 86400 * this.days + 7 * 86400 * this.weeks;\n    return this.isNegative ? -seconds : seconds;\n  }\n\n  /**\n   * Reads the passed seconds value into this duration object. Afterwards,\n   * members like {@link ICAL.Duration#days days} and {@link ICAL.Duration#weeks weeks} will be set up\n   * accordingly.\n   *\n   * @param {Number} aSeconds     The duration value in seconds\n   * @return {Duration}           Returns this instance\n   */\n  fromSeconds(aSeconds) {\n    let secs = Math.abs(aSeconds);\n    this.isNegative = aSeconds < 0;\n    this.days = trunc(secs / 86400);\n\n    // If we have a flat number of weeks, use them.\n    if (this.days % 7 == 0) {\n      this.weeks = this.days / 7;\n      this.days = 0;\n    } else {\n      this.weeks = 0;\n    }\n    secs -= (this.days + 7 * this.weeks) * 86400;\n    this.hours = trunc(secs / 3600);\n    secs -= this.hours * 3600;\n    this.minutes = trunc(secs / 60);\n    secs -= this.minutes * 60;\n    this.seconds = secs;\n    return this;\n  }\n\n  /**\n   * Sets up the current instance using members from the passed data object.\n   *\n   * @param {Object} aData                An object with members of the duration\n   * @param {Number=} aData.weeks         Duration in weeks\n   * @param {Number=} aData.days          Duration in days\n   * @param {Number=} aData.hours         Duration in hours\n   * @param {Number=} aData.minutes       Duration in minutes\n   * @param {Number=} aData.seconds       Duration in seconds\n   * @param {Boolean=} aData.isNegative   If true, the duration is negative\n   */\n  fromData(aData) {\n    for (let prop of DATA_PROPS_TO_COPY) {\n      if (aData && prop in aData) {\n        this[prop] = aData[prop];\n      } else {\n        this[prop] = 0;\n      }\n    }\n  }\n\n  /**\n   * Resets the duration instance to the default values, i.e. PT0S\n   */\n  reset() {\n    this.isNegative = false;\n    this.weeks = 0;\n    this.days = 0;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n  }\n\n  /**\n   * Compares the duration instance with another one.\n   *\n   * @param {Duration} aOther             The instance to compare with\n   * @return {Number}                     -1, 0 or 1 for less/equal/greater\n   */\n  compare(aOther) {\n    let thisSeconds = this.toSeconds();\n    let otherSeconds = aOther.toSeconds();\n    return (thisSeconds > otherSeconds) - (thisSeconds < otherSeconds);\n  }\n\n  /**\n   * Normalizes the duration instance. For example, a duration with a value\n   * of 61 seconds will be normalized to 1 minute and 1 second.\n   */\n  normalize() {\n    this.fromSeconds(this.toSeconds());\n  }\n\n  /**\n   * The string representation of this duration.\n   * @return {String}\n   */\n  toString() {\n    if (this.toSeconds() == 0) {\n      return \"PT0S\";\n    } else {\n      let str = \"\";\n      if (this.isNegative) str += \"-\";\n      str += \"P\";\n      if (this.weeks) str += this.weeks + \"W\";\n      if (this.days) str += this.days + \"D\";\n      if (this.hours || this.minutes || this.seconds) {\n        str += \"T\";\n        if (this.hours) str += this.hours + \"H\";\n        if (this.minutes) str += this.minutes + \"M\";\n        if (this.seconds) str += this.seconds + \"S\";\n      }\n      return str;\n    }\n  }\n\n  /**\n   * The iCalendar string representation of this duration.\n   * @return {String}\n   */\n  toICALString() {\n    return this.toString();\n  }\n}\n\n/**\n * Internal helper function to handle a chunk of a duration.\n *\n * @private\n * @param {String} letter type of duration chunk\n * @param {String} number numeric value or -/+\n * @param {Object} dict target to assign values to\n */\nfunction parseDurationChunk(letter, number, object) {\n  let type;\n  switch (letter) {\n    case 'P':\n      if (number && number === '-') {\n        object.isNegative = true;\n      } else {\n        object.isNegative = false;\n      }\n      // period\n      break;\n    case 'D':\n      type = 'days';\n      break;\n    case 'W':\n      type = 'weeks';\n      break;\n    case 'H':\n      type = 'hours';\n      break;\n    case 'M':\n      type = 'minutes';\n      break;\n    case 'S':\n      type = 'seconds';\n      break;\n    default:\n      // Not a valid chunk\n      return 0;\n  }\n  if (type) {\n    if (!number && number !== 0) {\n      throw new Error('invalid duration value: Missing number before \"' + letter + '\"');\n    }\n    let num = parseInt(number, 10);\n    if (isStrictlyNaN(num)) {\n      throw new Error('invalid duration value: Invalid number \"' + number + '\" before \"' + letter + '\"');\n    }\n    object[type] = num;\n  }\n  return 1;\n}\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n/**\n * This lets typescript resolve our custom types in the\n * generated d.ts files (jsdoc typedefs are converted to typescript types).\n * Ignore prevents the typedefs from being documented more than once.\n *\n * @ignore\n * @typedef {import(\"./types.js\").weekDay} weekDay\n * Imports the 'weekDay' type from the \"types.js\" module\n */\n\n/**\n * @classdesc\n * iCalendar Time representation (similar to JS Date object).  Fully\n * independent of system (OS) timezone / time.  Unlike JS Date, the month\n * January is 1, not zero.\n *\n * @example\n * var time = new ICAL.Time({\n *   year: 2012,\n *   month: 10,\n *   day: 11\n *   minute: 0,\n *   second: 0,\n *   isDate: false\n * });\n *\n *\n * @memberof ICAL\n*/\nclass Time {\n  static _dowCache = {};\n  static _wnCache = {};\n\n  /**\n   * Returns the days in the given month\n   *\n   * @param {Number} month      The month to check\n   * @param {Number} year       The year to check\n   * @return {Number}           The number of days in the month\n   */\n  static daysInMonth(month, year) {\n    let _daysInMonth = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    let days = 30;\n    if (month < 1 || month > 12) return days;\n    days = _daysInMonth[month];\n    if (month == 2) {\n      days += Time.isLeapYear(year);\n    }\n    return days;\n  }\n\n  /**\n   * Checks if the year is a leap year\n   *\n   * @param {Number} year       The year to check\n   * @return {Boolean}          True, if the year is a leap year\n   */\n  static isLeapYear(year) {\n    if (year <= 1752) {\n      return year % 4 == 0;\n    } else {\n      return year % 4 == 0 && year % 100 != 0 || year % 400 == 0;\n    }\n  }\n\n  /**\n   * Create a new ICAL.Time from the day of year and year. The date is returned\n   * in floating timezone.\n   *\n   * @param {Number} aDayOfYear     The day of year\n   * @param {Number} aYear          The year to create the instance in\n   * @return {Time}                 The created instance with the calculated date\n   */\n  static fromDayOfYear(aDayOfYear, aYear) {\n    let year = aYear;\n    let doy = aDayOfYear;\n    let tt = new Time();\n    tt.auto_normalize = false;\n    let is_leap = Time.isLeapYear(year) ? 1 : 0;\n    if (doy < 1) {\n      year--;\n      is_leap = Time.isLeapYear(year) ? 1 : 0;\n      doy += Time.daysInYearPassedMonth[is_leap][12];\n      return Time.fromDayOfYear(doy, year);\n    } else if (doy > Time.daysInYearPassedMonth[is_leap][12]) {\n      is_leap = Time.isLeapYear(year) ? 1 : 0;\n      doy -= Time.daysInYearPassedMonth[is_leap][12];\n      year++;\n      return Time.fromDayOfYear(doy, year);\n    }\n    tt.year = year;\n    tt.isDate = true;\n    for (let month = 11; month >= 0; month--) {\n      if (doy > Time.daysInYearPassedMonth[is_leap][month]) {\n        tt.month = month + 1;\n        tt.day = doy - Time.daysInYearPassedMonth[is_leap][month];\n        break;\n      }\n    }\n    tt.auto_normalize = true;\n    return tt;\n  }\n\n  /**\n   * Returns a new ICAL.Time instance from a date string, e.g 2015-01-02.\n   *\n   * @deprecated                Use {@link ICAL.Time.fromDateString} instead\n   * @param {String} str        The string to create from\n   * @return {Time}             The date/time instance\n   */\n  static fromStringv2(str) {\n    return new Time({\n      year: parseInt(str.slice(0, 4), 10),\n      month: parseInt(str.slice(5, 7), 10),\n      day: parseInt(str.slice(8, 10), 10),\n      isDate: true\n    });\n  }\n\n  /**\n   * Returns a new ICAL.Time instance from a date string, e.g 2015-01-02.\n   *\n   * @param {String} aValue     The string to create from\n   * @return {Time}             The date/time instance\n   */\n  static fromDateString(aValue) {\n    // Dates should have no timezone.\n    // Google likes to sometimes specify Z on dates\n    // we specifically ignore that to avoid issues.\n\n    // YYYY-MM-DD\n    // 2012-10-10\n    return new Time({\n      year: strictParseInt(aValue.slice(0, 4)),\n      month: strictParseInt(aValue.slice(5, 7)),\n      day: strictParseInt(aValue.slice(8, 10)),\n      isDate: true\n    });\n  }\n\n  /**\n   * Returns a new ICAL.Time instance from a date-time string, e.g\n   * 2015-01-02T03:04:05. If a property is specified, the timezone is set up\n   * from the property's TZID parameter.\n   *\n   * @param {String} aValue         The string to create from\n   * @param {Property=} prop        The property the date belongs to\n   * @return {Time}                 The date/time instance\n   */\n  static fromDateTimeString(aValue, prop) {\n    if (aValue.length < 19) {\n      throw new Error('invalid date-time value: \"' + aValue + '\"');\n    }\n    let zone;\n    let zoneId;\n    if (aValue[19] && aValue[19] === 'Z') {\n      zone = Timezone.utcTimezone;\n    } else if (prop) {\n      zoneId = prop.getParameter('tzid');\n      if (prop.parent) {\n        if (prop.parent.name === 'standard' || prop.parent.name === 'daylight') {\n          // Per RFC 5545 3.8.2.4 and 3.8.2.2, start/end date-times within\n          // these components MUST be specified in local time.\n          zone = Timezone.localTimezone;\n        } else if (zoneId) {\n          // If the desired time zone is defined within the component tree,\n          // fetch its definition and prefer that.\n          zone = prop.parent.getTimeZoneByID(zoneId);\n        }\n      }\n    }\n    const timeData = {\n      year: strictParseInt(aValue.slice(0, 4)),\n      month: strictParseInt(aValue.slice(5, 7)),\n      day: strictParseInt(aValue.slice(8, 10)),\n      hour: strictParseInt(aValue.slice(11, 13)),\n      minute: strictParseInt(aValue.slice(14, 16)),\n      second: strictParseInt(aValue.slice(17, 19))\n    };\n\n    // Although RFC 5545 requires that all TZIDs used within a file have a\n    // corresponding time zone definition, we may not be parsing the full file\n    // or we may be dealing with a non-compliant file; in either case, we can\n    // check our own time zone service for the TZID in a last-ditch effort.\n    if (zoneId && !zone) {\n      timeData.timezone = zoneId;\n    }\n\n    // 2012-10-10T10:10:10(Z)?\n    return new Time(timeData, zone);\n  }\n\n  /**\n   * Returns a new ICAL.Time instance from a date or date-time string,\n   *\n   * @param {String} aValue         The string to create from\n   * @param {Property=} prop        The property the date belongs to\n   * @return {Time}                 The date/time instance\n   */\n  static fromString(aValue, aProperty) {\n    if (aValue.length > 10) {\n      return Time.fromDateTimeString(aValue, aProperty);\n    } else {\n      return Time.fromDateString(aValue);\n    }\n  }\n\n  /**\n   * Creates a new ICAL.Time instance from the given Javascript Date.\n   *\n   * @param {?Date} aDate             The Javascript Date to read, or null to reset\n   * @param {Boolean} [useUTC=false]  If true, the UTC values of the date will be used\n   */\n  static fromJSDate(aDate, useUTC) {\n    let tt = new Time();\n    return tt.fromJSDate(aDate, useUTC);\n  }\n\n  /**\n   * Creates a new ICAL.Time instance from the the passed data object.\n   *\n   * @param {Object} aData            Time initialization\n   * @param {Number=} aData.year      The year for this date\n   * @param {Number=} aData.month     The month for this date\n   * @param {Number=} aData.day       The day for this date\n   * @param {Number=} aData.hour      The hour for this date\n   * @param {Number=} aData.minute    The minute for this date\n   * @param {Number=} aData.second    The second for this date\n   * @param {Boolean=} aData.isDate   If true, the instance represents a date\n   *                                    (as opposed to a date-time)\n   * @param {Timezone=} aZone         Timezone this position occurs in\n   */\n  static fromData = function fromData(aData, aZone) {\n    let t = new Time();\n    return t.fromData(aData, aZone);\n  };\n\n  /**\n   * Creates a new ICAL.Time instance from the current moment.\n   * The instance is ‚Äúfloating‚Äù - has no timezone relation.\n   * To create an instance considering the time zone, call\n   * ICAL.Time.fromJSDate(new Date(), true)\n   * @return {Time}\n   */\n  static now() {\n    return Time.fromJSDate(new Date(), false);\n  }\n\n  /**\n   * Returns the date on which ISO week number 1 starts.\n   *\n   * @see Time#weekNumber\n   * @param {Number} aYear                  The year to search in\n   * @param {weekDay=} aWeekStart           The week start weekday, used for calculation.\n   * @return {Time}                         The date on which week number 1 starts\n   */\n  static weekOneStarts(aYear, aWeekStart) {\n    let t = Time.fromData({\n      year: aYear,\n      month: 1,\n      day: 1,\n      isDate: true\n    });\n    let dow = t.dayOfWeek();\n    let wkst = aWeekStart || Time.DEFAULT_WEEK_START;\n    if (dow > Time.THURSDAY) {\n      t.day += 7;\n    }\n    if (wkst > Time.THURSDAY) {\n      t.day -= 7;\n    }\n    t.day -= dow - wkst;\n    return t;\n  }\n\n  /**\n   * Get the dominical letter for the given year. Letters range from A - G for\n   * common years, and AG to GF for leap years.\n   *\n   * @param {Number} yr           The year to retrieve the letter for\n   * @return {String}             The dominical letter.\n   */\n  static getDominicalLetter(yr) {\n    let LTRS = \"GFEDCBA\";\n    let dom = (yr + (yr / 4 | 0) + (yr / 400 | 0) - (yr / 100 | 0) - 1) % 7;\n    let isLeap = Time.isLeapYear(yr);\n    if (isLeap) {\n      return LTRS[(dom + 6) % 7] + LTRS[dom];\n    } else {\n      return LTRS[dom];\n    }\n  }\n  static #epochTime = null;\n  /**\n   * January 1st, 1970 as an ICAL.Time.\n   * @type {Time}\n   * @constant\n   * @instance\n   */\n  static get epochTime() {\n    if (!this.#epochTime) {\n      this.#epochTime = Time.fromData({\n        year: 1970,\n        month: 1,\n        day: 1,\n        hour: 0,\n        minute: 0,\n        second: 0,\n        isDate: false,\n        timezone: \"Z\"\n      });\n    }\n    return this.#epochTime;\n  }\n  static _cmp_attr(a, b, attr) {\n    if (a[attr] > b[attr]) return 1;\n    if (a[attr] < b[attr]) return -1;\n    return 0;\n  }\n\n  /**\n   * The days that have passed in the year after a given month. The array has\n   * two members, one being an array of passed days for non-leap years, the\n   * other analog for leap years.\n   * @example\n   * var isLeapYear = ICAL.Time.isLeapYear(year);\n   * var passedDays = ICAL.Time.daysInYearPassedMonth[isLeapYear][month];\n   * @type {Array.<Array.<Number>>}\n   */\n  static daysInYearPassedMonth = [[0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365], [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366]];\n  static SUNDAY = 1;\n  static MONDAY = 2;\n  static TUESDAY = 3;\n  static WEDNESDAY = 4;\n  static THURSDAY = 5;\n  static FRIDAY = 6;\n  static SATURDAY = 7;\n\n  /**\n   * The default weekday for the WKST part.\n   * @constant\n   * @default ICAL.Time.MONDAY\n   */\n  static DEFAULT_WEEK_START = 2; // MONDAY\n\n  /**\n   * Creates a new ICAL.Time instance.\n   *\n   * @param {Object} data           Time initialization\n   * @param {Number=} data.year     The year for this date\n   * @param {Number=} data.month    The month for this date\n   * @param {Number=} data.day      The day for this date\n   * @param {Number=} data.hour     The hour for this date\n   * @param {Number=} data.minute   The minute for this date\n   * @param {Number=} data.second   The second for this date\n   * @param {Boolean=} data.isDate  If true, the instance represents a date (as\n   *                                  opposed to a date-time)\n   * @param {Timezone} zone         timezone this position occurs in\n   */\n  constructor(data, zone) {\n    this.wrappedJSObject = this;\n    let time = this._time = Object.create(null);\n\n    /* time defaults */\n    time.year = 0;\n    time.month = 1;\n    time.day = 1;\n    time.hour = 0;\n    time.minute = 0;\n    time.second = 0;\n    time.isDate = false;\n    this.fromData(data, zone);\n  }\n\n  /**\n   * The class identifier.\n   * @constant\n   * @type {String}\n   * @default \"icaltime\"\n   */\n  icalclass = \"icaltime\";\n  _cachedUnixTime = null;\n\n  /**\n   * The type name, to be used in the jCal object. This value may change and\n   * is strictly defined by the {@link ICAL.Time#isDate isDate} member.\n   * @type {String}\n   * @default \"date-time\"\n   */\n  get icaltype() {\n    return this.isDate ? 'date' : 'date-time';\n  }\n\n  /**\n   * The timezone for this time.\n   * @type {Timezone}\n   */\n  zone = null;\n\n  /**\n   * Internal uses to indicate that a change has been made and the next read\n   * operation must attempt to normalize the value (for example changing the\n   * day to 33).\n   *\n   * @type {Boolean}\n   * @private\n   */\n  _pendingNormalization = false;\n\n  /**\n   * Returns a clone of the time object.\n   *\n   * @return {Time}              The cloned object\n   */\n  clone() {\n    return new Time(this._time, this.zone);\n  }\n\n  /**\n   * Reset the time instance to epoch time\n   */\n  reset() {\n    this.fromData(Time.epochTime);\n    this.zone = Timezone.utcTimezone;\n  }\n\n  /**\n   * Reset the time instance to the given date/time values.\n   *\n   * @param {Number} year             The year to set\n   * @param {Number} month            The month to set\n   * @param {Number} day              The day to set\n   * @param {Number} hour             The hour to set\n   * @param {Number} minute           The minute to set\n   * @param {Number} second           The second to set\n   * @param {Timezone} timezone       The timezone to set\n   */\n  resetTo(year, month, day, hour, minute, second, timezone) {\n    this.fromData({\n      year: year,\n      month: month,\n      day: day,\n      hour: hour,\n      minute: minute,\n      second: second,\n      zone: timezone\n    });\n  }\n\n  /**\n   * Set up the current instance from the Javascript date value.\n   *\n   * @param {?Date} aDate             The Javascript Date to read, or null to reset\n   * @param {Boolean} [useUTC=false]  If true, the UTC values of the date will be used\n   */\n  fromJSDate(aDate, useUTC) {\n    if (!aDate) {\n      this.reset();\n    } else {\n      if (useUTC) {\n        this.zone = Timezone.utcTimezone;\n        this.year = aDate.getUTCFullYear();\n        this.month = aDate.getUTCMonth() + 1;\n        this.day = aDate.getUTCDate();\n        this.hour = aDate.getUTCHours();\n        this.minute = aDate.getUTCMinutes();\n        this.second = aDate.getUTCSeconds();\n      } else {\n        this.zone = Timezone.localTimezone;\n        this.year = aDate.getFullYear();\n        this.month = aDate.getMonth() + 1;\n        this.day = aDate.getDate();\n        this.hour = aDate.getHours();\n        this.minute = aDate.getMinutes();\n        this.second = aDate.getSeconds();\n      }\n    }\n    this._cachedUnixTime = null;\n    return this;\n  }\n\n  /**\n   * Sets up the current instance using members from the passed data object.\n   *\n   * @param {Object} aData            Time initialization\n   * @param {Number=} aData.year      The year for this date\n   * @param {Number=} aData.month     The month for this date\n   * @param {Number=} aData.day       The day for this date\n   * @param {Number=} aData.hour      The hour for this date\n   * @param {Number=} aData.minute    The minute for this date\n   * @param {Number=} aData.second    The second for this date\n   * @param {Boolean=} aData.isDate   If true, the instance represents a date\n   *                                    (as opposed to a date-time)\n   * @param {Timezone=} aZone         Timezone this position occurs in\n   */\n  fromData(aData, aZone) {\n    if (aData) {\n      for (let [key, value] of Object.entries(aData)) {\n        // ical type cannot be set\n        if (key === 'icaltype') continue;\n        this[key] = value;\n      }\n    }\n    if (aZone) {\n      this.zone = aZone;\n    }\n    if (aData && !(\"isDate\" in aData)) {\n      this.isDate = !(\"hour\" in aData);\n    } else if (aData && \"isDate\" in aData) {\n      this.isDate = aData.isDate;\n    }\n    if (aData && \"timezone\" in aData) {\n      let zone = TimezoneService.get(aData.timezone);\n      this.zone = zone || Timezone.localTimezone;\n    }\n    if (aData && \"zone\" in aData) {\n      this.zone = aData.zone;\n    }\n    if (!this.zone) {\n      this.zone = Timezone.localTimezone;\n    }\n    this._cachedUnixTime = null;\n    return this;\n  }\n\n  /**\n   * Calculate the day of week.\n   * @param {weekDay=} aWeekStart\n   *        The week start weekday, defaults to SUNDAY\n   * @return {weekDay}\n   */\n  dayOfWeek(aWeekStart) {\n    let firstDow = aWeekStart || Time.SUNDAY;\n    let dowCacheKey = (this.year << 12) + (this.month << 8) + (this.day << 3) + firstDow;\n    if (dowCacheKey in Time._dowCache) {\n      return Time._dowCache[dowCacheKey];\n    }\n\n    // Using Zeller's algorithm\n    let q = this.day;\n    let m = this.month + (this.month < 3 ? 12 : 0);\n    let Y = this.year - (this.month < 3 ? 1 : 0);\n    let h = q + Y + trunc((m + 1) * 26 / 10) + trunc(Y / 4);\n    {\n      // eslint-disable-line no-constant-condition\n      h += trunc(Y / 100) * 6 + trunc(Y / 400);\n    }\n\n    // Normalize to 1 = wkst\n    h = (h + 7 - firstDow) % 7 + 1;\n    Time._dowCache[dowCacheKey] = h;\n    return h;\n  }\n\n  /**\n   * Calculate the day of year.\n   * @return {Number}\n   */\n  dayOfYear() {\n    let is_leap = Time.isLeapYear(this.year) ? 1 : 0;\n    let diypm = Time.daysInYearPassedMonth;\n    return diypm[is_leap][this.month - 1] + this.day;\n  }\n\n  /**\n   * Returns a copy of the current date/time, rewound to the start of the\n   * week. The resulting ICAL.Time instance is of icaltype date, even if this\n   * is a date-time.\n   *\n   * @param {weekDay=} aWeekStart\n   *        The week start weekday, defaults to SUNDAY\n   * @return {Time}      The start of the week (cloned)\n   */\n  startOfWeek(aWeekStart) {\n    let firstDow = aWeekStart || Time.SUNDAY;\n    let result = this.clone();\n    result.day -= (this.dayOfWeek() + 7 - firstDow) % 7;\n    result.isDate = true;\n    result.hour = 0;\n    result.minute = 0;\n    result.second = 0;\n    return result;\n  }\n\n  /**\n   * Returns a copy of the current date/time, shifted to the end of the week.\n   * The resulting ICAL.Time instance is of icaltype date, even if this is a\n   * date-time.\n   *\n   * @param {weekDay=} aWeekStart\n   *        The week start weekday, defaults to SUNDAY\n   * @return {Time}      The end of the week (cloned)\n   */\n  endOfWeek(aWeekStart) {\n    let firstDow = aWeekStart || Time.SUNDAY;\n    let result = this.clone();\n    result.day += (7 - this.dayOfWeek() + firstDow - Time.SUNDAY) % 7;\n    result.isDate = true;\n    result.hour = 0;\n    result.minute = 0;\n    result.second = 0;\n    return result;\n  }\n\n  /**\n   * Returns a copy of the current date/time, rewound to the start of the\n   * month. The resulting ICAL.Time instance is of icaltype date, even if\n   * this is a date-time.\n   *\n   * @return {Time}      The start of the month (cloned)\n   */\n  startOfMonth() {\n    let result = this.clone();\n    result.day = 1;\n    result.isDate = true;\n    result.hour = 0;\n    result.minute = 0;\n    result.second = 0;\n    return result;\n  }\n\n  /**\n   * Returns a copy of the current date/time, shifted to the end of the\n   * month.  The resulting ICAL.Time instance is of icaltype date, even if\n   * this is a date-time.\n   *\n   * @return {Time}      The end of the month (cloned)\n   */\n  endOfMonth() {\n    let result = this.clone();\n    result.day = Time.daysInMonth(result.month, result.year);\n    result.isDate = true;\n    result.hour = 0;\n    result.minute = 0;\n    result.second = 0;\n    return result;\n  }\n\n  /**\n   * Returns a copy of the current date/time, rewound to the start of the\n   * year. The resulting ICAL.Time instance is of icaltype date, even if\n   * this is a date-time.\n   *\n   * @return {Time}      The start of the year (cloned)\n   */\n  startOfYear() {\n    let result = this.clone();\n    result.day = 1;\n    result.month = 1;\n    result.isDate = true;\n    result.hour = 0;\n    result.minute = 0;\n    result.second = 0;\n    return result;\n  }\n\n  /**\n   * Returns a copy of the current date/time, shifted to the end of the\n   * year.  The resulting ICAL.Time instance is of icaltype date, even if\n   * this is a date-time.\n   *\n   * @return {Time}      The end of the year (cloned)\n   */\n  endOfYear() {\n    let result = this.clone();\n    result.day = 31;\n    result.month = 12;\n    result.isDate = true;\n    result.hour = 0;\n    result.minute = 0;\n    result.second = 0;\n    return result;\n  }\n\n  /**\n   * First calculates the start of the week, then returns the day of year for\n   * this date. If the day falls into the previous year, the day is zero or negative.\n   *\n   * @param {weekDay=} aFirstDayOfWeek\n   *        The week start weekday, defaults to SUNDAY\n   * @return {Number}     The calculated day of year\n   */\n  startDoyWeek(aFirstDayOfWeek) {\n    let firstDow = aFirstDayOfWeek || Time.SUNDAY;\n    let delta = this.dayOfWeek() - firstDow;\n    if (delta < 0) delta += 7;\n    return this.dayOfYear() - delta;\n  }\n\n  /**\n   * Get the dominical letter for the current year. Letters range from A - G\n   * for common years, and AG to GF for leap years.\n   *\n   * @param {Number} yr           The year to retrieve the letter for\n   * @return {String}             The dominical letter.\n   */\n  getDominicalLetter() {\n    return Time.getDominicalLetter(this.year);\n  }\n\n  /**\n   * Finds the nthWeekDay relative to the current month (not day).  The\n   * returned value is a day relative the month that this month belongs to so\n   * 1 would indicate the first of the month and 40 would indicate a day in\n   * the following month.\n   *\n   * @param {Number} aDayOfWeek   Day of the week see the day name constants\n   * @param {Number} aPos         Nth occurrence of a given week day values\n   *        of 1 and 0 both indicate the first weekday of that type. aPos may\n   *        be either positive or negative\n   *\n   * @return {Number} numeric value indicating a day relative\n   *                   to the current month of this time object\n   */\n  nthWeekDay(aDayOfWeek, aPos) {\n    let daysInMonth = Time.daysInMonth(this.month, this.year);\n    let weekday;\n    let pos = aPos;\n    let start = 0;\n    let otherDay = this.clone();\n    if (pos >= 0) {\n      otherDay.day = 1;\n\n      // because 0 means no position has been given\n      // 1 and 0 indicate the same day.\n      if (pos != 0) {\n        // remove the extra numeric value\n        pos--;\n      }\n\n      // set current start offset to current day.\n      start = otherDay.day;\n\n      // find the current day of week\n      let startDow = otherDay.dayOfWeek();\n\n      // calculate the difference between current\n      // day of the week and desired day of the week\n      let offset = aDayOfWeek - startDow;\n\n      // if the offset goes into the past\n      // week we add 7 so it goes into the next\n      // week. We only want to go forward in time here.\n      if (offset < 0)\n        // this is really important otherwise we would\n        // end up with dates from in the past.\n        offset += 7;\n\n      // add offset to start so start is the same\n      // day of the week as the desired day of week.\n      start += offset;\n\n      // because we are going to add (and multiply)\n      // the numeric value of the day we subtract it\n      // from the start position so not to add it twice.\n      start -= aDayOfWeek;\n\n      // set week day\n      weekday = aDayOfWeek;\n    } else {\n      // then we set it to the last day in the current month\n      otherDay.day = daysInMonth;\n\n      // find the ends weekday\n      let endDow = otherDay.dayOfWeek();\n      pos++;\n      weekday = endDow - aDayOfWeek;\n      if (weekday < 0) {\n        weekday += 7;\n      }\n      weekday = daysInMonth - weekday;\n    }\n    weekday += pos * 7;\n    return start + weekday;\n  }\n\n  /**\n   * Checks if current time is the nth weekday, relative to the current\n   * month.  Will always return false when rule resolves outside of current\n   * month.\n   *\n   * @param {weekDay} aDayOfWeek                 Day of week to check\n   * @param {Number} aPos                        Relative position\n   * @return {Boolean}                           True, if it is the nth weekday\n   */\n  isNthWeekDay(aDayOfWeek, aPos) {\n    let dow = this.dayOfWeek();\n    if (aPos === 0 && dow === aDayOfWeek) {\n      return true;\n    }\n\n    // get pos\n    let day = this.nthWeekDay(aDayOfWeek, aPos);\n    if (day === this.day) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Calculates the ISO 8601 week number. The first week of a year is the\n   * week that contains the first Thursday. The year can have 53 weeks, if\n   * January 1st is a Friday.\n   *\n   * Note there are regions where the first week of the year is the one that\n   * starts on January 1st, which may offset the week number. Also, if a\n   * different week start is specified, this will also affect the week\n   * number.\n   *\n   * @see Time.weekOneStarts\n   * @param {weekDay} aWeekStart                  The weekday the week starts with\n   * @return {Number}                             The ISO week number\n   */\n  weekNumber(aWeekStart) {\n    let wnCacheKey = (this.year << 12) + (this.month << 8) + (this.day << 3) + aWeekStart;\n    if (wnCacheKey in Time._wnCache) {\n      return Time._wnCache[wnCacheKey];\n    }\n    // This function courtesty of Julian Bucknall, published under the MIT license\n    // http://www.boyet.com/articles/publishedarticles/calculatingtheisoweeknumb.html\n    // plus some fixes to be able to use different week starts.\n    let week1;\n    let dt = this.clone();\n    dt.isDate = true;\n    let isoyear = this.year;\n    if (dt.month == 12 && dt.day > 25) {\n      week1 = Time.weekOneStarts(isoyear + 1, aWeekStart);\n      if (dt.compare(week1) < 0) {\n        week1 = Time.weekOneStarts(isoyear, aWeekStart);\n      } else {\n        isoyear++;\n      }\n    } else {\n      week1 = Time.weekOneStarts(isoyear, aWeekStart);\n      if (dt.compare(week1) < 0) {\n        week1 = Time.weekOneStarts(--isoyear, aWeekStart);\n      }\n    }\n    let daysBetween = dt.subtractDate(week1).toSeconds() / 86400;\n    let answer = trunc(daysBetween / 7) + 1;\n    Time._wnCache[wnCacheKey] = answer;\n    return answer;\n  }\n\n  /**\n   * Adds the duration to the current time. The instance is modified in\n   * place.\n   *\n   * @param {Duration} aDuration         The duration to add\n   */\n  addDuration(aDuration) {\n    let mult = aDuration.isNegative ? -1 : 1;\n\n    // because of the duration optimizations it is much\n    // more efficient to grab all the values up front\n    // then set them directly (which will avoid a normalization call).\n    // So we don't actually normalize until we need it.\n    let second = this.second;\n    let minute = this.minute;\n    let hour = this.hour;\n    let day = this.day;\n    second += mult * aDuration.seconds;\n    minute += mult * aDuration.minutes;\n    hour += mult * aDuration.hours;\n    day += mult * aDuration.days;\n    day += mult * 7 * aDuration.weeks;\n    this.second = second;\n    this.minute = minute;\n    this.hour = hour;\n    this.day = day;\n    this._cachedUnixTime = null;\n  }\n\n  /**\n   * Subtract the date details (_excluding_ timezone).  Useful for finding\n   * the relative difference between two time objects excluding their\n   * timezone differences.\n   *\n   * @param {Time} aDate     The date to subtract\n   * @return {Duration}      The difference as a duration\n   */\n  subtractDate(aDate) {\n    let unixTime = this.toUnixTime() + this.utcOffset();\n    let other = aDate.toUnixTime() + aDate.utcOffset();\n    return Duration.fromSeconds(unixTime - other);\n  }\n\n  /**\n   * Subtract the date details, taking timezones into account.\n   *\n   * @param {Time} aDate  The date to subtract\n   * @return {Duration}   The difference in duration\n   */\n  subtractDateTz(aDate) {\n    let unixTime = this.toUnixTime();\n    let other = aDate.toUnixTime();\n    return Duration.fromSeconds(unixTime - other);\n  }\n\n  /**\n   * Compares the ICAL.Time instance with another one.\n   *\n   * @param {Duration} aOther        The instance to compare with\n   * @return {Number}                     -1, 0 or 1 for less/equal/greater\n   */\n  compare(other) {\n    let a = this.toUnixTime();\n    let b = other.toUnixTime();\n    if (a > b) return 1;\n    if (b > a) return -1;\n    return 0;\n  }\n\n  /**\n   * Compares only the date part of this instance with another one.\n   *\n   * @param {Duration} other              The instance to compare with\n   * @param {Timezone} tz                 The timezone to compare in\n   * @return {Number}                     -1, 0 or 1 for less/equal/greater\n   */\n  compareDateOnlyTz(other, tz) {\n    let a = this.convertToZone(tz);\n    let b = other.convertToZone(tz);\n    let rc = 0;\n    if ((rc = Time._cmp_attr(a, b, \"year\")) != 0) return rc;\n    if ((rc = Time._cmp_attr(a, b, \"month\")) != 0) return rc;\n    if ((rc = Time._cmp_attr(a, b, \"day\")) != 0) return rc;\n    return rc;\n  }\n\n  /**\n   * Convert the instance into another timezone. The returned ICAL.Time\n   * instance is always a copy.\n   *\n   * @param {Timezone} zone      The zone to convert to\n   * @return {Time}              The copy, converted to the zone\n   */\n  convertToZone(zone) {\n    let copy = this.clone();\n    let zone_equals = this.zone.tzid == zone.tzid;\n    if (!this.isDate && !zone_equals) {\n      Timezone.convert_time(copy, this.zone, zone);\n    }\n    copy.zone = zone;\n    return copy;\n  }\n\n  /**\n   * Calculates the UTC offset of the current date/time in the timezone it is\n   * in.\n   *\n   * @return {Number}     UTC offset in seconds\n   */\n  utcOffset() {\n    if (this.zone == Timezone.localTimezone || this.zone == Timezone.utcTimezone) {\n      return 0;\n    } else {\n      return this.zone.utcOffset(this);\n    }\n  }\n\n  /**\n   * Returns an RFC 5545 compliant ical representation of this object.\n   *\n   * @return {String} ical date/date-time\n   */\n  toICALString() {\n    let string = this.toString();\n    if (string.length > 10) {\n      return design$1.icalendar.value['date-time'].toICAL(string);\n    } else {\n      return design$1.icalendar.value.date.toICAL(string);\n    }\n  }\n\n  /**\n   * The string representation of this date/time, in jCal form\n   * (including : and - separators).\n   * @return {String}\n   */\n  toString() {\n    let result = this.year + '-' + pad2(this.month) + '-' + pad2(this.day);\n    if (!this.isDate) {\n      result += 'T' + pad2(this.hour) + ':' + pad2(this.minute) + ':' + pad2(this.second);\n      if (this.zone === Timezone.utcTimezone) {\n        result += 'Z';\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Converts the current instance to a Javascript date\n   * @return {Date}\n   */\n  toJSDate() {\n    if (this.zone == Timezone.localTimezone) {\n      if (this.isDate) {\n        return new Date(this.year, this.month - 1, this.day);\n      } else {\n        return new Date(this.year, this.month - 1, this.day, this.hour, this.minute, this.second, 0);\n      }\n    } else {\n      return new Date(this.toUnixTime() * 1000);\n    }\n  }\n  _normalize() {\n    if (this._time.isDate) {\n      this._time.hour = 0;\n      this._time.minute = 0;\n      this._time.second = 0;\n    }\n    this.adjust(0, 0, 0, 0);\n    return this;\n  }\n\n  /**\n   * Adjust the date/time by the given offset\n   *\n   * @param {Number} aExtraDays       The extra amount of days\n   * @param {Number} aExtraHours      The extra amount of hours\n   * @param {Number} aExtraMinutes    The extra amount of minutes\n   * @param {Number} aExtraSeconds    The extra amount of seconds\n   * @param {Number=} aTime           The time to adjust, defaults to the\n   *                                    current instance.\n   */\n  adjust(aExtraDays, aExtraHours, aExtraMinutes, aExtraSeconds, aTime) {\n    let minutesOverflow,\n      hoursOverflow,\n      daysOverflow = 0,\n      yearsOverflow = 0;\n    let second, minute, hour, day;\n    let daysInMonth;\n    let time = aTime || this._time;\n    if (!time.isDate) {\n      second = time.second + aExtraSeconds;\n      time.second = second % 60;\n      minutesOverflow = trunc(second / 60);\n      if (time.second < 0) {\n        time.second += 60;\n        minutesOverflow--;\n      }\n      minute = time.minute + aExtraMinutes + minutesOverflow;\n      time.minute = minute % 60;\n      hoursOverflow = trunc(minute / 60);\n      if (time.minute < 0) {\n        time.minute += 60;\n        hoursOverflow--;\n      }\n      hour = time.hour + aExtraHours + hoursOverflow;\n      time.hour = hour % 24;\n      daysOverflow = trunc(hour / 24);\n      if (time.hour < 0) {\n        time.hour += 24;\n        daysOverflow--;\n      }\n    }\n\n    // Adjust month and year first, because we need to know what month the day\n    // is in before adjusting it.\n    if (time.month > 12) {\n      yearsOverflow = trunc((time.month - 1) / 12);\n    } else if (time.month < 1) {\n      yearsOverflow = trunc(time.month / 12) - 1;\n    }\n    time.year += yearsOverflow;\n    time.month -= 12 * yearsOverflow;\n\n    // Now take care of the days (and adjust month if needed)\n    day = time.day + aExtraDays + daysOverflow;\n    if (day > 0) {\n      for (;;) {\n        daysInMonth = Time.daysInMonth(time.month, time.year);\n        if (day <= daysInMonth) {\n          break;\n        }\n        time.month++;\n        if (time.month > 12) {\n          time.year++;\n          time.month = 1;\n        }\n        day -= daysInMonth;\n      }\n    } else {\n      while (day <= 0) {\n        if (time.month == 1) {\n          time.year--;\n          time.month = 12;\n        } else {\n          time.month--;\n        }\n        day += Time.daysInMonth(time.month, time.year);\n      }\n    }\n    time.day = day;\n    this._cachedUnixTime = null;\n    return this;\n  }\n\n  /**\n   * Sets up the current instance from unix time, the number of seconds since\n   * January 1st, 1970.\n   *\n   * @param {Number} seconds      The seconds to set up with\n   */\n  fromUnixTime(seconds) {\n    this.zone = Timezone.utcTimezone;\n    // We could use `fromJSDate` here, but this is about twice as fast.\n    // We could also clone `epochTime` and use `adjust` for a more\n    // ical.js-centric approach, but this is about 100 times as fast.\n    let date = new Date(seconds * 1000);\n    this.year = date.getUTCFullYear();\n    this.month = date.getUTCMonth() + 1;\n    this.day = date.getUTCDate();\n    if (this._time.isDate) {\n      this.hour = 0;\n      this.minute = 0;\n      this.second = 0;\n    } else {\n      this.hour = date.getUTCHours();\n      this.minute = date.getUTCMinutes();\n      this.second = date.getUTCSeconds();\n    }\n    this._cachedUnixTime = null;\n  }\n\n  /**\n   * Converts the current instance to seconds since January 1st 1970.\n   *\n   * @return {Number}         Seconds since 1970\n   */\n  toUnixTime() {\n    if (this._cachedUnixTime !== null) {\n      return this._cachedUnixTime;\n    }\n    let offset = this.utcOffset();\n\n    // we use the offset trick to ensure\n    // that we are getting the actual UTC time\n    let ms = Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second - offset);\n\n    // seconds\n    this._cachedUnixTime = ms / 1000;\n    return this._cachedUnixTime;\n  }\n\n  /**\n   * Converts time to into Object which can be serialized then re-created\n   * using the constructor.\n   *\n   * @example\n   * // toJSON will automatically be called\n   * var json = JSON.stringify(mytime);\n   *\n   * var deserialized = JSON.parse(json);\n   *\n   * var time = new ICAL.Time(deserialized);\n   *\n   * @return {Object}\n   */\n  toJSON() {\n    let copy = ['year', 'month', 'day', 'hour', 'minute', 'second', 'isDate'];\n    let result = Object.create(null);\n    let i = 0;\n    let len = copy.length;\n    let prop;\n    for (; i < len; i++) {\n      prop = copy[i];\n      result[prop] = this[prop];\n    }\n    if (this.zone) {\n      result.timezone = this.zone.tzid;\n    }\n    return result;\n  }\n}\n(function setupNormalizeAttributes() {\n  // This needs to run before any instances are created!\n  function defineAttr(attr) {\n    Object.defineProperty(Time.prototype, attr, {\n      get: function getTimeAttr() {\n        if (this._pendingNormalization) {\n          this._normalize();\n          this._pendingNormalization = false;\n        }\n        return this._time[attr];\n      },\n      set: function setTimeAttr(val) {\n        // Check if isDate will be set and if was not set to normalize date.\n        // This avoids losing days when seconds, minutes and hours are zeroed\n        // what normalize will do when time is a date.\n        if (attr === \"isDate\" && val && !this._time.isDate) {\n          this.adjust(0, 0, 0, 0);\n        }\n        this._cachedUnixTime = null;\n        this._pendingNormalization = true;\n        this._time[attr] = val;\n      }\n    });\n  }\n  defineAttr(\"year\");\n  defineAttr(\"month\");\n  defineAttr(\"day\");\n  defineAttr(\"hour\");\n  defineAttr(\"minute\");\n  defineAttr(\"second\");\n  defineAttr(\"isDate\");\n})();\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n/**\n * This lets typescript resolve our custom types in the\n * generated d.ts files (jsdoc typedefs are converted to typescript types).\n * Ignore prevents the typedefs from being documented more than once.\n *\n * @ignore\n * @typedef {import(\"./types.js\").parserState} parserState\n * Imports the 'parserState' type from the \"types.js\" module\n * @typedef {import(\"./types.js\").designSet} designSet\n * Imports the 'designSet' type from the \"types.js\" module\n */\n\nconst CHAR = /[^ \\t]/;\nconst VALUE_DELIMITER = ':';\nconst PARAM_DELIMITER = ';';\nconst PARAM_NAME_DELIMITER = '=';\nconst DEFAULT_VALUE_TYPE$1 = 'unknown';\nconst DEFAULT_PARAM_TYPE = 'text';\nconst RFC6868_REPLACE_MAP$1 = {\n  \"^'\": '\"',\n  \"^n\": \"\\n\",\n  \"^^\": \"^\"\n};\n\n/**\n * Parses iCalendar or vCard data into a raw jCal object. Consult\n * documentation on the {@tutorial layers|layers of parsing} for more\n * details.\n *\n * @function ICAL.parse\n * @memberof ICAL\n * @variation function\n * @todo Fix the API to be more clear on the return type\n * @param {String} input      The string data to parse\n * @return {Object|Object[]}  A single jCal object, or an array thereof\n */\nfunction parse(input) {\n  let state = {};\n  let root = state.component = [];\n  state.stack = [root];\n  parse._eachLine(input, function (err, line) {\n    parse._handleContentLine(line, state);\n  });\n\n  // when there are still items on the stack\n  // throw a fatal error, a component was not closed\n  // correctly in that case.\n  if (state.stack.length > 1) {\n    throw new ParserError('invalid ical body. component began but did not end');\n  }\n  state = null;\n  return root.length == 1 ? root[0] : root;\n}\n\n/**\n * Parse an iCalendar property value into the jCal for a single property\n *\n * @function ICAL.parse.property\n * @param {String} str\n *   The iCalendar property string to parse\n * @param {designSet=} designSet\n *   The design data to use for this property\n * @return {Object}\n *   The jCal Object containing the property\n */\nparse.property = function (str, designSet) {\n  let state = {\n    component: [[], []],\n    designSet: designSet || design$1.defaultSet\n  };\n  parse._handleContentLine(str, state);\n  return state.component[1][0];\n};\n\n/**\n * Convenience method to parse a component. You can use ICAL.parse() directly\n * instead.\n *\n * @function ICAL.parse.component\n * @see ICAL.parse(function)\n * @param {String} str    The iCalendar component string to parse\n * @return {Object}       The jCal Object containing the component\n */\nparse.component = function (str) {\n  return parse(str);\n};\n\n/**\n * An error that occurred during parsing.\n *\n * @param {String} message        The error message\n * @memberof ICAL.parse\n * @extends {Error}\n */\nclass ParserError extends Error {\n  name = this.constructor.name;\n}\n\n// classes & constants\nparse.ParserError = ParserError;\n\n/**\n * Handles a single line of iCalendar/vCard, updating the state.\n *\n * @private\n * @function ICAL.parse._handleContentLine\n * @param {String} line          The content line to process\n * @param {parserState} state    The current state of the line parsing\n */\nparse._handleContentLine = function (line, state) {\n  // break up the parts of the line\n  let valuePos = line.indexOf(VALUE_DELIMITER);\n  let paramPos = line.indexOf(PARAM_DELIMITER);\n  let lastParamIndex;\n  let lastValuePos;\n\n  // name of property or begin/end\n  let name;\n  let value;\n  // params is only overridden if paramPos !== -1.\n  // we can't do params = params || {} later on\n  // because it sacrifices ops.\n  let params = {};\n\n  /**\n   * Different property cases\n   *\n   *\n   * 1. RRULE:FREQ=foo\n   *    // FREQ= is not a param but the value\n   *\n   * 2. ATTENDEE;ROLE=REQ-PARTICIPANT;\n   *    // ROLE= is a param because : has not happened yet\n   */\n  // when the parameter delimiter is after the\n  // value delimiter then it is not a parameter.\n\n  if (paramPos !== -1 && valuePos !== -1) {\n    // when the parameter delimiter is after the\n    // value delimiter then it is not a parameter.\n    if (paramPos > valuePos) {\n      paramPos = -1;\n    }\n  }\n  let parsedParams;\n  if (paramPos !== -1) {\n    name = line.slice(0, Math.max(0, paramPos)).toLowerCase();\n    parsedParams = parse._parseParameters(line.slice(Math.max(0, paramPos)), 0, state.designSet);\n    if (parsedParams[2] == -1) {\n      throw new ParserError(\"Invalid parameters in '\" + line + \"'\");\n    }\n    params = parsedParams[0];\n    lastParamIndex = parsedParams[1].length + parsedParams[2] + paramPos;\n    if ((lastValuePos = line.slice(Math.max(0, lastParamIndex)).indexOf(VALUE_DELIMITER)) !== -1) {\n      value = line.slice(Math.max(0, lastParamIndex + lastValuePos + 1));\n    } else {\n      throw new ParserError(\"Missing parameter value in '\" + line + \"'\");\n    }\n  } else if (valuePos !== -1) {\n    // without parmeters (BEGIN:VCAENDAR, CLASS:PUBLIC)\n    name = line.slice(0, Math.max(0, valuePos)).toLowerCase();\n    value = line.slice(Math.max(0, valuePos + 1));\n    if (name === 'begin') {\n      let newComponent = [value.toLowerCase(), [], []];\n      if (state.stack.length === 1) {\n        state.component.push(newComponent);\n      } else {\n        state.component[2].push(newComponent);\n      }\n      state.stack.push(state.component);\n      state.component = newComponent;\n      if (!state.designSet) {\n        state.designSet = design$1.getDesignSet(state.component[0]);\n      }\n      return;\n    } else if (name === 'end') {\n      state.component = state.stack.pop();\n      return;\n    }\n    // If it is not begin/end, then this is a property with an empty value,\n    // which should be considered valid.\n  } else {\n    /**\n     * Invalid line.\n     * The rational to throw an error is we will\n     * never be certain that the rest of the file\n     * is sane and it is unlikely that we can serialize\n     * the result correctly either.\n     */\n    throw new ParserError('invalid line (no token \";\" or \":\") \"' + line + '\"');\n  }\n  let valueType;\n  let multiValue = false;\n  let structuredValue = false;\n  let propertyDetails;\n  let splitName;\n  let ungroupedName;\n\n  // fetch the ungrouped part of the name\n  if (state.designSet.propertyGroups && name.indexOf('.') !== -1) {\n    splitName = name.split('.');\n    params.group = splitName[0];\n    ungroupedName = splitName[1];\n  } else {\n    ungroupedName = name;\n  }\n  if (ungroupedName in state.designSet.property) {\n    propertyDetails = state.designSet.property[ungroupedName];\n    if ('multiValue' in propertyDetails) {\n      multiValue = propertyDetails.multiValue;\n    }\n    if ('structuredValue' in propertyDetails) {\n      structuredValue = propertyDetails.structuredValue;\n    }\n    if (value && 'detectType' in propertyDetails) {\n      valueType = propertyDetails.detectType(value);\n    }\n  }\n\n  // attempt to determine value\n  if (!valueType) {\n    if (!('value' in params)) {\n      if (propertyDetails) {\n        valueType = propertyDetails.defaultType;\n      } else {\n        valueType = DEFAULT_VALUE_TYPE$1;\n      }\n    } else {\n      // possible to avoid this?\n      valueType = params.value.toLowerCase();\n    }\n  }\n  delete params.value;\n\n  /**\n   * Note on `var result` juggling:\n   *\n   * I observed that building the array in pieces has adverse\n   * effects on performance, so where possible we inline the creation.\n   * It is a little ugly but resulted in ~2000 additional ops/sec.\n   */\n\n  let result;\n  if (multiValue && structuredValue) {\n    value = parse._parseMultiValue(value, structuredValue, valueType, [], multiValue, state.designSet, structuredValue);\n    result = [ungroupedName, params, valueType, value];\n  } else if (multiValue) {\n    result = [ungroupedName, params, valueType];\n    parse._parseMultiValue(value, multiValue, valueType, result, null, state.designSet, false);\n  } else if (structuredValue) {\n    value = parse._parseMultiValue(value, structuredValue, valueType, [], null, state.designSet, structuredValue);\n    result = [ungroupedName, params, valueType, value];\n  } else {\n    value = parse._parseValue(value, valueType, state.designSet, false);\n    result = [ungroupedName, params, valueType, value];\n  }\n  // rfc6350 requires that in vCard 4.0 the first component is the VERSION\n  // component with as value 4.0, note that 3.0 does not have this requirement.\n  if (state.component[0] === 'vcard' && state.component[1].length === 0 && !(name === 'version' && value === '4.0')) {\n    state.designSet = design$1.getDesignSet(\"vcard3\");\n  }\n  state.component[1].push(result);\n};\n\n/**\n * Parse a value from the raw value into the jCard/jCal value.\n *\n * @private\n * @function ICAL.parse._parseValue\n * @param {String} value          Original value\n * @param {String} type           Type of value\n * @param {Object} designSet      The design data to use for this value\n * @return {Object} varies on type\n */\nparse._parseValue = function (value, type, designSet, structuredValue) {\n  if (type in designSet.value && 'fromICAL' in designSet.value[type]) {\n    return designSet.value[type].fromICAL(value, structuredValue);\n  }\n  return value;\n};\n\n/**\n * Parse parameters from a string to object.\n *\n * @function ICAL.parse._parseParameters\n * @private\n * @param {String} line           A single unfolded line\n * @param {Number} start         Position to start looking for properties\n * @param {Object} designSet      The design data to use for this property\n * @return {Object} key/value pairs\n */\nparse._parseParameters = function (line, start, designSet) {\n  let lastParam = start;\n  let pos = 0;\n  let delim = PARAM_NAME_DELIMITER;\n  let result = {};\n  let name, lcname;\n  let value,\n    valuePos = -1;\n  let type, multiValue, mvdelim;\n\n  // find the next '=' sign\n  // use lastParam and pos to find name\n  // check if \" is used if so get value from \"->\"\n  // then increment pos to find next ;\n\n  while (pos !== false && (pos = line.indexOf(delim, pos + 1)) !== -1) {\n    name = line.slice(lastParam + 1, pos);\n    if (name.length == 0) {\n      throw new ParserError(\"Empty parameter name in '\" + line + \"'\");\n    }\n    lcname = name.toLowerCase();\n    mvdelim = false;\n    multiValue = false;\n    if (lcname in designSet.param && designSet.param[lcname].valueType) {\n      type = designSet.param[lcname].valueType;\n    } else {\n      type = DEFAULT_PARAM_TYPE;\n    }\n    if (lcname in designSet.param) {\n      multiValue = designSet.param[lcname].multiValue;\n      if (designSet.param[lcname].multiValueSeparateDQuote) {\n        mvdelim = parse._rfc6868Escape('\"' + multiValue + '\"');\n      }\n    }\n    let nextChar = line[pos + 1];\n    if (nextChar === '\"') {\n      valuePos = pos + 2;\n      pos = line.indexOf('\"', valuePos);\n      if (multiValue && pos != -1) {\n        let extendedValue = true;\n        while (extendedValue) {\n          if (line[pos + 1] == multiValue && line[pos + 2] == '\"') {\n            pos = line.indexOf('\"', pos + 3);\n          } else {\n            extendedValue = false;\n          }\n        }\n      }\n      if (pos === -1) {\n        throw new ParserError('invalid line (no matching double quote) \"' + line + '\"');\n      }\n      value = line.slice(valuePos, pos);\n      lastParam = line.indexOf(PARAM_DELIMITER, pos);\n      let propValuePos = line.indexOf(VALUE_DELIMITER, pos);\n      // if either no next parameter or delimeter in property value, let's stop here\n      if (lastParam === -1 || propValuePos !== -1 && lastParam > propValuePos) {\n        pos = false;\n      }\n    } else {\n      valuePos = pos + 1;\n\n      // move to next \";\"\n      let nextPos = line.indexOf(PARAM_DELIMITER, valuePos);\n      let propValuePos = line.indexOf(VALUE_DELIMITER, valuePos);\n      if (propValuePos !== -1 && nextPos > propValuePos) {\n        // this is a delimiter in the property value, let's stop here\n        nextPos = propValuePos;\n        pos = false;\n      } else if (nextPos === -1) {\n        // no \";\"\n        if (propValuePos === -1) {\n          nextPos = line.length;\n        } else {\n          nextPos = propValuePos;\n        }\n        pos = false;\n      } else {\n        lastParam = nextPos;\n        pos = nextPos;\n      }\n      value = line.slice(valuePos, nextPos);\n    }\n    const length_before = value.length;\n    value = parse._rfc6868Escape(value);\n    valuePos += length_before - value.length;\n    if (multiValue) {\n      let delimiter = mvdelim || multiValue;\n      value = parse._parseMultiValue(value, delimiter, type, [], null, designSet);\n    } else {\n      value = parse._parseValue(value, type, designSet);\n    }\n    if (multiValue && lcname in result) {\n      if (Array.isArray(result[lcname])) {\n        result[lcname].push(value);\n      } else {\n        result[lcname] = [result[lcname], value];\n      }\n    } else {\n      result[lcname] = value;\n    }\n  }\n  return [result, value, valuePos];\n};\n\n/**\n * Internal helper for rfc6868. Exposing this on ICAL.parse so that\n * hackers can disable the rfc6868 parsing if the really need to.\n *\n * @function ICAL.parse._rfc6868Escape\n * @param {String} val        The value to escape\n * @return {String}           The escaped value\n */\nparse._rfc6868Escape = function (val) {\n  return val.replace(/\\^['n^]/g, function (x) {\n    return RFC6868_REPLACE_MAP$1[x];\n  });\n};\n\n/**\n * Parse a multi value string. This function is used either for parsing\n * actual multi-value property's values, or for handling parameter values. It\n * can be used for both multi-value properties and structured value properties.\n *\n * @private\n * @function ICAL.parse._parseMultiValue\n * @param {String} buffer           The buffer containing the full value\n * @param {String} delim            The multi-value delimiter\n * @param {String} type             The value type to be parsed\n * @param {Array.<?>} result        The array to append results to, varies on value type\n * @param {String} innerMulti       The inner delimiter to split each value with\n * @param {designSet} designSet     The design data for this value\n * @return {?|Array.<?>}            Either an array of results, or the first result\n */\nparse._parseMultiValue = function (buffer, delim, type, result, innerMulti, designSet, structuredValue) {\n  let pos = 0;\n  let lastPos = 0;\n  let value;\n  if (delim.length === 0) {\n    return buffer;\n  }\n\n  // split each piece\n  while ((pos = unescapedIndexOf(buffer, delim, lastPos)) !== -1) {\n    value = buffer.slice(lastPos, pos);\n    if (innerMulti) {\n      value = parse._parseMultiValue(value, innerMulti, type, [], null, designSet, structuredValue);\n    } else {\n      value = parse._parseValue(value, type, designSet, structuredValue);\n    }\n    result.push(value);\n    lastPos = pos + delim.length;\n  }\n\n  // on the last piece take the rest of string\n  value = buffer.slice(lastPos);\n  if (innerMulti) {\n    value = parse._parseMultiValue(value, innerMulti, type, [], null, designSet, structuredValue);\n  } else {\n    value = parse._parseValue(value, type, designSet, structuredValue);\n  }\n  result.push(value);\n  return result.length == 1 ? result[0] : result;\n};\n\n/**\n * Process a complete buffer of iCalendar/vCard data line by line, correctly\n * unfolding content. Each line will be processed with the given callback\n *\n * @private\n * @function ICAL.parse._eachLine\n * @param {String} buffer                         The buffer to process\n * @param {function(?String, String)} callback    The callback for each line\n */\nparse._eachLine = function (buffer, callback) {\n  let len = buffer.length;\n  let lastPos = buffer.search(CHAR);\n  let pos = lastPos;\n  let line;\n  let firstChar;\n  let newlineOffset;\n  do {\n    pos = buffer.indexOf('\\n', lastPos) + 1;\n    if (pos > 1 && buffer[pos - 2] === '\\r') {\n      newlineOffset = 2;\n    } else {\n      newlineOffset = 1;\n    }\n    if (pos === 0) {\n      pos = len;\n      newlineOffset = 0;\n    }\n    firstChar = buffer[lastPos];\n    if (firstChar === ' ' || firstChar === '\\t') {\n      // add to line\n      line += buffer.slice(lastPos + 1, pos - newlineOffset);\n    } else {\n      if (line) callback(null, line);\n      // push line\n      line = buffer.slice(lastPos, pos - newlineOffset);\n    }\n    lastPos = pos;\n  } while (pos !== len);\n\n  // extra ending line\n  line = line.trim();\n  if (line.length) callback(null, line);\n};\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\nconst OPTIONS = [\"tzid\", \"location\", \"tznames\", \"latitude\", \"longitude\"];\n\n/**\n * Timezone representation.\n *\n * @example\n * var vcalendar;\n * var timezoneComp = vcalendar.getFirstSubcomponent('vtimezone');\n * var tzid = timezoneComp.getFirstPropertyValue('tzid');\n *\n * var timezone = new ICAL.Timezone({\n *   component: timezoneComp,\n *   tzid\n * });\n *\n * @memberof ICAL\n */\nclass Timezone {\n  static _compare_change_fn(a, b) {\n    if (a.year < b.year) return -1;else if (a.year > b.year) return 1;\n    if (a.month < b.month) return -1;else if (a.month > b.month) return 1;\n    if (a.day < b.day) return -1;else if (a.day > b.day) return 1;\n    if (a.hour < b.hour) return -1;else if (a.hour > b.hour) return 1;\n    if (a.minute < b.minute) return -1;else if (a.minute > b.minute) return 1;\n    if (a.second < b.second) return -1;else if (a.second > b.second) return 1;\n    return 0;\n  }\n\n  /**\n   * Convert the date/time from one zone to the next.\n   *\n   * @param {Time} tt                  The time to convert\n   * @param {Timezone} from_zone       The source zone to convert from\n   * @param {Timezone} to_zone         The target zone to convert to\n   * @return {Time}                    The converted date/time object\n   */\n  static convert_time(tt, from_zone, to_zone) {\n    if (tt.isDate || from_zone.tzid == to_zone.tzid || from_zone == Timezone.localTimezone || to_zone == Timezone.localTimezone) {\n      tt.zone = to_zone;\n      return tt;\n    }\n    let utcOffset = from_zone.utcOffset(tt);\n    tt.adjust(0, 0, 0, -utcOffset);\n    utcOffset = to_zone.utcOffset(tt);\n    tt.adjust(0, 0, 0, utcOffset);\n    return null;\n  }\n\n  /**\n   * Creates a new ICAL.Timezone instance from the passed data object.\n   *\n   * @param {Component|Object} aData options for class\n   * @param {String|Component} aData.component\n   *        If aData is a simple object, then this member can be set to either a\n   *        string containing the component data, or an already parsed\n   *        ICAL.Component\n   * @param {String} aData.tzid      The timezone identifier\n   * @param {String} aData.location  The timezone locationw\n   * @param {String} aData.tznames   An alternative string representation of the\n   *                                  timezone\n   * @param {Number} aData.latitude  The latitude of the timezone\n   * @param {Number} aData.longitude The longitude of the timezone\n   */\n  static fromData(aData) {\n    let tt = new Timezone();\n    return tt.fromData(aData);\n  }\n\n  /**\n   * The instance describing the UTC timezone\n   * @type {Timezone}\n   * @constant\n   * @instance\n   */\n  static #utcTimezone = null;\n  static get utcTimezone() {\n    if (!this.#utcTimezone) {\n      this.#utcTimezone = Timezone.fromData({\n        tzid: \"UTC\"\n      });\n    }\n    return this.#utcTimezone;\n  }\n\n  /**\n   * The instance describing the local timezone\n   * @type {Timezone}\n   * @constant\n   * @instance\n   */\n  static #localTimezone = null;\n  static get localTimezone() {\n    if (!this.#localTimezone) {\n      this.#localTimezone = Timezone.fromData({\n        tzid: \"floating\"\n      });\n    }\n    return this.#localTimezone;\n  }\n\n  /**\n   * Adjust a timezone change object.\n   * @private\n   * @param {Object} change     The timezone change object\n   * @param {Number} days       The extra amount of days\n   * @param {Number} hours      The extra amount of hours\n   * @param {Number} minutes    The extra amount of minutes\n   * @param {Number} seconds    The extra amount of seconds\n   */\n  static adjust_change(change, days, hours, minutes, seconds) {\n    return Time.prototype.adjust.call(change, days, hours, minutes, seconds, change);\n  }\n  static _minimumExpansionYear = -1;\n  static EXTRA_COVERAGE = 5;\n\n  /**\n   * Creates a new ICAL.Timezone instance, by passing in a tzid and component.\n   *\n   * @param {Component|Object} data options for class\n   * @param {String|Component} data.component\n   *        If data is a simple object, then this member can be set to either a\n   *        string containing the component data, or an already parsed\n   *        ICAL.Component\n   * @param {String} data.tzid      The timezone identifier\n   * @param {String} data.location  The timezone locationw\n   * @param {String} data.tznames   An alternative string representation of the\n   *                                  timezone\n   * @param {Number} data.latitude  The latitude of the timezone\n   * @param {Number} data.longitude The longitude of the timezone\n   */\n  constructor(data) {\n    this.wrappedJSObject = this;\n    this.fromData(data);\n  }\n\n  /**\n   * Timezone identifier\n   * @type {String}\n   */\n  tzid = \"\";\n\n  /**\n   * Timezone location\n   * @type {String}\n   */\n  location = \"\";\n\n  /**\n   * Alternative timezone name, for the string representation\n   * @type {String}\n   */\n  tznames = \"\";\n\n  /**\n   * The primary latitude for the timezone.\n   * @type {Number}\n   */\n  latitude = 0.0;\n\n  /**\n   * The primary longitude for the timezone.\n   * @type {Number}\n   */\n  longitude = 0.0;\n\n  /**\n   * The vtimezone component for this timezone.\n   * @type {Component}\n   */\n  component = null;\n\n  /**\n   * The year this timezone has been expanded to. All timezone transition\n   * dates until this year are known and can be used for calculation\n   *\n   * @private\n   * @type {Number}\n   */\n  expandedUntilYear = 0;\n\n  /**\n   * The class identifier.\n   * @constant\n   * @type {String}\n   * @default \"icaltimezone\"\n   */\n  icalclass = \"icaltimezone\";\n\n  /**\n   * Sets up the current instance using members from the passed data object.\n   *\n   * @param {Component|Object} aData options for class\n   * @param {String|Component} aData.component\n   *        If aData is a simple object, then this member can be set to either a\n   *        string containing the component data, or an already parsed\n   *        ICAL.Component\n   * @param {String} aData.tzid      The timezone identifier\n   * @param {String} aData.location  The timezone locationw\n   * @param {String} aData.tznames   An alternative string representation of the\n   *                                  timezone\n   * @param {Number} aData.latitude  The latitude of the timezone\n   * @param {Number} aData.longitude The longitude of the timezone\n   */\n  fromData(aData) {\n    this.expandedUntilYear = 0;\n    this.changes = [];\n    if (aData instanceof Component) {\n      // Either a component is passed directly\n      this.component = aData;\n    } else {\n      // Otherwise the component may be in the data object\n      if (aData && \"component\" in aData) {\n        if (typeof aData.component == \"string\") {\n          // If a string was passed, parse it as a component\n          let jCal = parse(aData.component);\n          this.component = new Component(jCal);\n        } else if (aData.component instanceof Component) {\n          // If it was a component already, then just set it\n          this.component = aData.component;\n        } else {\n          // Otherwise just null out the component\n          this.component = null;\n        }\n      }\n\n      // Copy remaining passed properties\n      for (let prop of OPTIONS) {\n        if (aData && prop in aData) {\n          this[prop] = aData[prop];\n        }\n      }\n    }\n\n    // If we have a component but no TZID, attempt to get it from the\n    // component's properties.\n    if (this.component instanceof Component && !this.tzid) {\n      this.tzid = this.component.getFirstPropertyValue('tzid');\n    }\n    return this;\n  }\n\n  /**\n   * Finds the utcOffset the given time would occur in this timezone.\n   *\n   * @param {Time} tt         The time to check for\n   * @return {Number}         utc offset in seconds\n   */\n  utcOffset(tt) {\n    if (this == Timezone.utcTimezone || this == Timezone.localTimezone) {\n      return 0;\n    }\n    this._ensureCoverage(tt.year);\n    if (!this.changes.length) {\n      return 0;\n    }\n    let tt_change = {\n      year: tt.year,\n      month: tt.month,\n      day: tt.day,\n      hour: tt.hour,\n      minute: tt.minute,\n      second: tt.second\n    };\n    let change_num = this._findNearbyChange(tt_change);\n    let change_num_to_use = -1;\n    let step = 1;\n\n    // TODO: replace with bin search?\n    for (;;) {\n      let change = clone(this.changes[change_num], true);\n      if (change.utcOffset < change.prevUtcOffset) {\n        Timezone.adjust_change(change, 0, 0, 0, change.utcOffset);\n      } else {\n        Timezone.adjust_change(change, 0, 0, 0, change.prevUtcOffset);\n      }\n      let cmp = Timezone._compare_change_fn(tt_change, change);\n      if (cmp >= 0) {\n        change_num_to_use = change_num;\n      } else {\n        step = -1;\n      }\n      if (step == -1 && change_num_to_use != -1) {\n        break;\n      }\n      change_num += step;\n      if (change_num < 0) {\n        return 0;\n      }\n      if (change_num >= this.changes.length) {\n        break;\n      }\n    }\n    let zone_change = this.changes[change_num_to_use];\n    let utcOffset_change = zone_change.utcOffset - zone_change.prevUtcOffset;\n    if (utcOffset_change < 0 && change_num_to_use > 0) {\n      let tmp_change = clone(zone_change, true);\n      Timezone.adjust_change(tmp_change, 0, 0, 0, tmp_change.prevUtcOffset);\n      if (Timezone._compare_change_fn(tt_change, tmp_change) < 0) {\n        let prev_zone_change = this.changes[change_num_to_use - 1];\n        let want_daylight = false; // TODO\n\n        if (zone_change.is_daylight != want_daylight && prev_zone_change.is_daylight == want_daylight) {\n          zone_change = prev_zone_change;\n        }\n      }\n    }\n\n    // TODO return is_daylight?\n    return zone_change.utcOffset;\n  }\n  _findNearbyChange(change) {\n    // find the closest match\n    let idx = binsearchInsert(this.changes, change, Timezone._compare_change_fn);\n    if (idx >= this.changes.length) {\n      return this.changes.length - 1;\n    }\n    return idx;\n  }\n  _ensureCoverage(aYear) {\n    if (Timezone._minimumExpansionYear == -1) {\n      let today = Time.now();\n      Timezone._minimumExpansionYear = today.year;\n    }\n    let changesEndYear = aYear;\n    if (changesEndYear < Timezone._minimumExpansionYear) {\n      changesEndYear = Timezone._minimumExpansionYear;\n    }\n    changesEndYear += Timezone.EXTRA_COVERAGE;\n    if (!this.changes.length || this.expandedUntilYear < aYear) {\n      let subcomps = this.component.getAllSubcomponents();\n      let compLen = subcomps.length;\n      let compIdx = 0;\n      for (; compIdx < compLen; compIdx++) {\n        this._expandComponent(subcomps[compIdx], changesEndYear, this.changes);\n      }\n      this.changes.sort(Timezone._compare_change_fn);\n      this.expandedUntilYear = changesEndYear;\n    }\n  }\n  _expandComponent(aComponent, aYear, changes) {\n    if (!aComponent.hasProperty(\"dtstart\") || !aComponent.hasProperty(\"tzoffsetto\") || !aComponent.hasProperty(\"tzoffsetfrom\")) {\n      return null;\n    }\n    let dtstart = aComponent.getFirstProperty(\"dtstart\").getFirstValue();\n    let change;\n    function convert_tzoffset(offset) {\n      return offset.factor * (offset.hours * 3600 + offset.minutes * 60);\n    }\n    function init_changes() {\n      let changebase = {};\n      changebase.is_daylight = aComponent.name == \"daylight\";\n      changebase.utcOffset = convert_tzoffset(aComponent.getFirstProperty(\"tzoffsetto\").getFirstValue());\n      changebase.prevUtcOffset = convert_tzoffset(aComponent.getFirstProperty(\"tzoffsetfrom\").getFirstValue());\n      return changebase;\n    }\n    if (!aComponent.hasProperty(\"rrule\") && !aComponent.hasProperty(\"rdate\")) {\n      change = init_changes();\n      change.year = dtstart.year;\n      change.month = dtstart.month;\n      change.day = dtstart.day;\n      change.hour = dtstart.hour;\n      change.minute = dtstart.minute;\n      change.second = dtstart.second;\n      Timezone.adjust_change(change, 0, 0, 0, -change.prevUtcOffset);\n      changes.push(change);\n    } else {\n      let props = aComponent.getAllProperties(\"rdate\");\n      for (let rdate of props) {\n        let time = rdate.getFirstValue();\n        change = init_changes();\n        change.year = time.year;\n        change.month = time.month;\n        change.day = time.day;\n        if (time.isDate) {\n          change.hour = dtstart.hour;\n          change.minute = dtstart.minute;\n          change.second = dtstart.second;\n          if (dtstart.zone != Timezone.utcTimezone) {\n            Timezone.adjust_change(change, 0, 0, 0, -change.prevUtcOffset);\n          }\n        } else {\n          change.hour = time.hour;\n          change.minute = time.minute;\n          change.second = time.second;\n          if (time.zone != Timezone.utcTimezone) {\n            Timezone.adjust_change(change, 0, 0, 0, -change.prevUtcOffset);\n          }\n        }\n        changes.push(change);\n      }\n      let rrule = aComponent.getFirstProperty(\"rrule\");\n      if (rrule) {\n        rrule = rrule.getFirstValue();\n        change = init_changes();\n        if (rrule.until && rrule.until.zone == Timezone.utcTimezone) {\n          rrule.until.adjust(0, 0, 0, change.prevUtcOffset);\n          rrule.until.zone = Timezone.localTimezone;\n        }\n        let iterator = rrule.iterator(dtstart);\n        let occ;\n        while (occ = iterator.next()) {\n          change = init_changes();\n          if (occ.year > aYear || !occ) {\n            break;\n          }\n          change.year = occ.year;\n          change.month = occ.month;\n          change.day = occ.day;\n          change.hour = occ.hour;\n          change.minute = occ.minute;\n          change.second = occ.second;\n          change.isDate = occ.isDate;\n          Timezone.adjust_change(change, 0, 0, 0, -change.prevUtcOffset);\n          changes.push(change);\n        }\n      }\n    }\n    return changes;\n  }\n\n  /**\n   * The string representation of this timezone.\n   * @return {String}\n   */\n  toString() {\n    return this.tznames ? this.tznames : this.tzid;\n  }\n}\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\nlet zones = null;\n\n/**\n * @classdesc\n * Singleton class to contain timezones.  Right now it is all manual registry in\n * the future we may use this class to download timezone information or handle\n * loading pre-expanded timezones.\n *\n * @exports module:ICAL.TimezoneService\n * @memberof ICAL\n */\nconst TimezoneService = {\n  get count() {\n    if (zones === null) {\n      return 0;\n    }\n    return Object.keys(zones).length;\n  },\n  reset: function () {\n    zones = Object.create(null);\n    let utc = Timezone.utcTimezone;\n    zones.Z = utc;\n    zones.UTC = utc;\n    zones.GMT = utc;\n  },\n  _hard_reset: function () {\n    zones = null;\n  },\n  /**\n   * Checks if timezone id has been registered.\n   *\n   * @param {String} tzid     Timezone identifier (e.g. America/Los_Angeles)\n   * @return {Boolean}        False, when not present\n   */\n  has: function (tzid) {\n    if (zones === null) {\n      return false;\n    }\n    return !!zones[tzid];\n  },\n  /**\n   * Returns a timezone by its tzid if present.\n   *\n   * @param {String} tzid               Timezone identifier (e.g. America/Los_Angeles)\n   * @return {Timezone | undefined}     The timezone, or undefined if not found\n   */\n  get: function (tzid) {\n    if (zones === null) {\n      this.reset();\n    }\n    return zones[tzid];\n  },\n  /**\n   * Registers a timezone object or component.\n   *\n   * @param {Component|Timezone} timezone\n   *        The initialized zone or vtimezone.\n   *\n   * @param {String=} name\n   *        The name of the timezone. Defaults to the component's TZID if not\n   *        passed.\n   */\n  register: function (timezone, name) {\n    if (zones === null) {\n      this.reset();\n    }\n\n    // This avoids a breaking change by the change of argument order\n    // TODO remove in v3\n    if (typeof timezone === \"string\" && name instanceof Timezone) {\n      [timezone, name] = [name, timezone];\n    }\n    if (!name) {\n      if (timezone instanceof Timezone) {\n        name = timezone.tzid;\n      } else {\n        if (timezone.name === 'vtimezone') {\n          timezone = new Timezone(timezone);\n          name = timezone.tzid;\n        }\n      }\n    }\n    if (!name) {\n      throw new TypeError(\"Neither a timezone nor a name was passed\");\n    }\n    if (timezone instanceof Timezone) {\n      zones[name] = timezone;\n    } else {\n      throw new TypeError('timezone must be ICAL.Timezone or ICAL.Component');\n    }\n  },\n  /**\n   * Removes a timezone by its tzid from the list.\n   *\n   * @param {String} tzid     Timezone identifier (e.g. America/Los_Angeles)\n   * @return {?Timezone}      The removed timezone, or null if not registered\n   */\n  remove: function (tzid) {\n    if (zones === null) {\n      return null;\n    }\n    return delete zones[tzid];\n  }\n};\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n/**\n * Helper functions used in various places within ical.js\n * @module ICAL.helpers\n */\n\n/**\n * Compiles a list of all referenced TZIDs in all subcomponents and\n * removes any extra VTIMEZONE subcomponents. In addition, if any TZIDs\n * are referenced by a component, but a VTIMEZONE does not exist,\n * an attempt will be made to generate a VTIMEZONE using ICAL.TimezoneService.\n *\n * @param {Component} vcal     The top-level VCALENDAR component.\n * @return {Component}         The ICAL.Component that was passed in.\n */\nfunction updateTimezones(vcal) {\n  let allsubs, properties, vtimezones, reqTzid, i;\n  if (!vcal || vcal.name !== \"vcalendar\") {\n    //not a top-level vcalendar component\n    return vcal;\n  }\n\n  //Store vtimezone subcomponents in an object reference by tzid.\n  //Store properties from everything else in another array\n  allsubs = vcal.getAllSubcomponents();\n  properties = [];\n  vtimezones = {};\n  for (i = 0; i < allsubs.length; i++) {\n    if (allsubs[i].name === \"vtimezone\") {\n      let tzid = allsubs[i].getFirstProperty(\"tzid\").getFirstValue();\n      vtimezones[tzid] = allsubs[i];\n    } else {\n      properties = properties.concat(allsubs[i].getAllProperties());\n    }\n  }\n\n  //create an object with one entry for each required tz\n  reqTzid = {};\n  for (i = 0; i < properties.length; i++) {\n    let tzid = properties[i].getParameter(\"tzid\");\n    if (tzid) {\n      reqTzid[tzid] = true;\n    }\n  }\n\n  //delete any vtimezones that are not on the reqTzid list.\n  for (let [tzid, comp] of Object.entries(vtimezones)) {\n    if (!reqTzid[tzid]) {\n      vcal.removeSubcomponent(comp);\n    }\n  }\n\n  //create any missing, but registered timezones\n  for (let tzid of Object.keys(reqTzid)) {\n    if (!vtimezones[tzid] && TimezoneService.has(tzid)) {\n      vcal.addSubcomponent(TimezoneService.get(tzid).component);\n    }\n  }\n  return vcal;\n}\n\n/**\n * Checks if the given type is of the number type and also NaN.\n *\n * @param {Number} number     The number to check\n * @return {Boolean}          True, if the number is strictly NaN\n */\nfunction isStrictlyNaN(number) {\n  return typeof number === 'number' && isNaN(number);\n}\n\n/**\n * Parses a string value that is expected to be an integer, when the valid is\n * not an integer throws a decoration error.\n *\n * @param {String} string     Raw string input\n * @return {Number}           Parsed integer\n */\nfunction strictParseInt(string) {\n  let result = parseInt(string, 10);\n  if (isStrictlyNaN(result)) {\n    throw new Error('Could not extract integer from \"' + string + '\"');\n  }\n  return result;\n}\n\n/**\n * Creates or returns a class instance of a given type with the initialization\n * data if the data is not already an instance of the given type.\n *\n * @example\n * var time = new ICAL.Time(...);\n * var result = ICAL.helpers.formatClassType(time, ICAL.Time);\n *\n * (result instanceof ICAL.Time)\n * // => true\n *\n * result = ICAL.helpers.formatClassType({}, ICAL.Time);\n * (result isntanceof ICAL.Time)\n * // => true\n *\n *\n * @param {Object} data       object initialization data\n * @param {Object} type       object type (like ICAL.Time)\n * @return {?}                An instance of the found type.\n */\nfunction formatClassType(data, type) {\n  if (typeof data === 'undefined') {\n    return undefined;\n  }\n  if (data instanceof type) {\n    return data;\n  }\n  return new type(data);\n}\n\n/**\n * Identical to indexOf but will only match values when they are not preceded\n * by a backslash character.\n *\n * @param {String} buffer         String to search\n * @param {String} search         Value to look for\n * @param {Number} pos            Start position\n * @return {Number}               The position, or -1 if not found\n */\nfunction unescapedIndexOf(buffer, search, pos) {\n  while ((pos = buffer.indexOf(search, pos)) !== -1) {\n    if (pos > 0 && buffer[pos - 1] === '\\\\') {\n      pos += 1;\n    } else {\n      return pos;\n    }\n  }\n  return -1;\n}\n\n/**\n * Find the index for insertion using binary search.\n *\n * @param {Array} list            The list to search\n * @param {?} seekVal             The value to insert\n * @param {function(?,?)} cmpfunc The comparison func, that can\n *                                  compare two seekVals\n * @return {Number}               The insert position\n */\nfunction binsearchInsert(list, seekVal, cmpfunc) {\n  if (!list.length) return 0;\n  let low = 0,\n    high = list.length - 1,\n    mid,\n    cmpval;\n  while (low <= high) {\n    mid = low + Math.floor((high - low) / 2);\n    cmpval = cmpfunc(seekVal, list[mid]);\n    if (cmpval < 0) high = mid - 1;else if (cmpval > 0) low = mid + 1;else break;\n  }\n  if (cmpval < 0) return mid; // insertion is displacing, so use mid outright.\n  else if (cmpval > 0) return mid + 1;else return mid;\n}\n\n/**\n * Clone the passed object or primitive. By default a shallow clone will be\n * executed.\n *\n * @param {*} aSrc            The thing to clone\n * @param {Boolean=} aDeep    If true, a deep clone will be performed\n * @return {*}                The copy of the thing\n */\nfunction clone(aSrc, aDeep) {\n  if (!aSrc || typeof aSrc != \"object\") {\n    return aSrc;\n  } else if (aSrc instanceof Date) {\n    return new Date(aSrc.getTime());\n  } else if (\"clone\" in aSrc) {\n    return aSrc.clone();\n  } else if (Array.isArray(aSrc)) {\n    let arr = [];\n    for (let i = 0; i < aSrc.length; i++) {\n      arr.push(aDeep ? clone(aSrc[i], true) : aSrc[i]);\n    }\n    return arr;\n  } else {\n    let obj = {};\n    for (let [name, value] of Object.entries(aSrc)) {\n      if (aDeep) {\n        obj[name] = clone(value, true);\n      } else {\n        obj[name] = value;\n      }\n    }\n    return obj;\n  }\n}\n\n/**\n * Performs iCalendar line folding. A line ending character is inserted and\n * the next line begins with a whitespace.\n *\n * @example\n * SUMMARY:This line will be fold\n *  ed right in the middle of a word.\n *\n * @param {String} aLine      The line to fold\n * @return {String}           The folded line\n */\nfunction foldline(aLine) {\n  let result = \"\";\n  let line = aLine || \"\",\n    pos = 0,\n    line_length = 0;\n  //pos counts position in line for the UTF-16 presentation\n  //line_length counts the bytes for the UTF-8 presentation\n  while (line.length) {\n    let cp = line.codePointAt(pos);\n    if (cp < 128) ++line_length;else if (cp < 2048) line_length += 2; //needs 2 UTF-8 bytes\n    else if (cp < 65536) line_length += 3;else line_length += 4; //cp is less than 1114112\n    if (line_length < ICALmodule.foldLength + 1) pos += cp > 65535 ? 2 : 1;else {\n      result += ICALmodule.newLineChar + \" \" + line.slice(0, Math.max(0, pos));\n      line = line.slice(Math.max(0, pos));\n      pos = line_length = 0;\n    }\n  }\n  return result.slice(ICALmodule.newLineChar.length + 1);\n}\n\n/**\n * Pads the given string or number with zeros so it will have at least two\n * characters.\n *\n * @param {String|Number} data    The string or number to pad\n * @return {String}               The number padded as a string\n */\nfunction pad2(data) {\n  if (typeof data !== 'string') {\n    // handle fractions.\n    if (typeof data === 'number') {\n      data = parseInt(data);\n    }\n    data = String(data);\n  }\n  let len = data.length;\n  switch (len) {\n    case 0:\n      return '00';\n    case 1:\n      return '0' + data;\n    default:\n      return data;\n  }\n}\n\n/**\n * Truncates the given number, correctly handling negative numbers.\n *\n * @param {Number} number     The number to truncate\n * @return {Number}           The truncated number\n */\nfunction trunc(number) {\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}\n\n/**\n * Poor-man's cross-browser object extension. Doesn't support all the\n * features, but enough for our usage. Note that the target's properties are\n * not overwritten with the source properties.\n *\n * @example\n * var child = ICAL.helpers.extend(parent, {\n *   \"bar\": 123\n * });\n *\n * @param {Object} source     The object to extend\n * @param {Object} target     The object to extend with\n * @return {Object}           Returns the target.\n */\nfunction extend(source, target) {\n  for (let key in source) {\n    let descr = Object.getOwnPropertyDescriptor(source, key);\n    if (descr && !Object.getOwnPropertyDescriptor(target, key)) {\n      Object.defineProperty(target, key, descr);\n    }\n  }\n  return target;\n}\nvar helpers = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  updateTimezones: updateTimezones,\n  isStrictlyNaN: isStrictlyNaN,\n  strictParseInt: strictParseInt,\n  formatClassType: formatClassType,\n  unescapedIndexOf: unescapedIndexOf,\n  binsearchInsert: binsearchInsert,\n  clone: clone,\n  foldline: foldline,\n  pad2: pad2,\n  trunc: trunc,\n  extend: extend\n});\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n/**\n * This class represents the \"utc-offset\" value type, with various calculation and manipulation\n * methods.\n *\n * @memberof ICAL\n */\nclass UtcOffset {\n  /**\n   * Creates a new {@link ICAL.UtcOffset} instance from the passed string.\n   *\n   * @param {String} aString    The string to parse\n   * @return {Duration}         The created utc-offset instance\n   */\n  static fromString(aString) {\n    // -05:00\n    let options = {};\n    //TODO: support seconds per rfc5545 ?\n    options.factor = aString[0] === '+' ? 1 : -1;\n    options.hours = strictParseInt(aString.slice(1, 3));\n    options.minutes = strictParseInt(aString.slice(4, 6));\n    return new UtcOffset(options);\n  }\n\n  /**\n   * Creates a new {@link ICAL.UtcOffset} instance from the passed seconds\n   * value.\n   *\n   * @param {Number} aSeconds       The number of seconds to convert\n   */\n  static fromSeconds(aSeconds) {\n    let instance = new UtcOffset();\n    instance.fromSeconds(aSeconds);\n    return instance;\n  }\n\n  /**\n   * Creates a new ICAL.UtcOffset instance.\n   *\n   * @param {Object} aData          An object with members of the utc offset\n   * @param {Number=} aData.hours   The hours for the utc offset\n   * @param {Number=} aData.minutes The minutes in the utc offset\n   * @param {Number=} aData.factor  The factor for the utc-offset, either -1 or 1\n   */\n  constructor(aData) {\n    this.fromData(aData);\n  }\n\n  /**\n   * The hours in the utc-offset\n   * @type {Number}\n   */\n  hours = 0;\n\n  /**\n   * The minutes in the utc-offset\n   * @type {Number}\n   */\n  minutes = 0;\n\n  /**\n   * The sign of the utc offset, 1 for positive offset, -1 for negative\n   * offsets.\n   * @type {Number}\n   */\n  factor = 1;\n\n  /**\n   * The type name, to be used in the jCal object.\n   * @constant\n   * @type {String}\n   * @default \"utc-offset\"\n   */\n  icaltype = \"utc-offset\";\n\n  /**\n   * Returns a clone of the utc offset object.\n   *\n   * @return {UtcOffset}     The cloned object\n   */\n  clone() {\n    return UtcOffset.fromSeconds(this.toSeconds());\n  }\n\n  /**\n   * Sets up the current instance using members from the passed data object.\n   *\n   * @param {Object} aData          An object with members of the utc offset\n   * @param {Number=} aData.hours   The hours for the utc offset\n   * @param {Number=} aData.minutes The minutes in the utc offset\n   * @param {Number=} aData.factor  The factor for the utc-offset, either -1 or 1\n   */\n  fromData(aData) {\n    if (aData) {\n      for (let [key, value] of Object.entries(aData)) {\n        this[key] = value;\n      }\n    }\n    this._normalize();\n  }\n\n  /**\n   * Sets up the current instance from the given seconds value. The seconds\n   * value is truncated to the minute. Offsets are wrapped when the world\n   * ends, the hour after UTC+14:00 is UTC-12:00.\n   *\n   * @param {Number} aSeconds         The seconds to convert into an offset\n   */\n  fromSeconds(aSeconds) {\n    let secs = Math.abs(aSeconds);\n    this.factor = aSeconds < 0 ? -1 : 1;\n    this.hours = trunc(secs / 3600);\n    secs -= this.hours * 3600;\n    this.minutes = trunc(secs / 60);\n    return this;\n  }\n\n  /**\n   * Convert the current offset to a value in seconds\n   *\n   * @return {Number}                 The offset in seconds\n   */\n  toSeconds() {\n    return this.factor * (60 * this.minutes + 3600 * this.hours);\n  }\n\n  /**\n   * Compare this utc offset with another one.\n   *\n   * @param {UtcOffset} other             The other offset to compare with\n   * @return {Number}                     -1, 0 or 1 for less/equal/greater\n   */\n  compare(other) {\n    let a = this.toSeconds();\n    let b = other.toSeconds();\n    return (a > b) - (b > a);\n  }\n  _normalize() {\n    // Range: 97200 seconds (with 1 hour inbetween)\n    let secs = this.toSeconds();\n    let factor = this.factor;\n    while (secs < -43200) {\n      // = UTC-12:00\n      secs += 97200;\n    }\n    while (secs > 50400) {\n      // = UTC+14:00\n      secs -= 97200;\n    }\n    this.fromSeconds(secs);\n\n    // Avoid changing the factor when on zero seconds\n    if (secs == 0) {\n      this.factor = factor;\n    }\n  }\n\n  /**\n   * The iCalendar string representation of this utc-offset.\n   * @return {String}\n   */\n  toICALString() {\n    return design$1.icalendar.value['utc-offset'].toICAL(this.toString());\n  }\n\n  /**\n   * The string representation of this utc-offset.\n   * @return {String}\n   */\n  toString() {\n    return (this.factor == 1 ? \"+\" : \"-\") + pad2(this.hours) + ':' + pad2(this.minutes);\n  }\n}\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n/**\n * Describes a vCard time, which has slight differences to the ICAL.Time.\n * Properties can be null if not specified, for example for dates with\n * reduced accuracy or truncation.\n *\n * Note that currently not all methods are correctly re-implemented for\n * VCardTime. For example, comparison will have undefined results when some\n * members are null.\n *\n * Also, normalization is not yet implemented for this class!\n *\n * @memberof ICAL\n * @extends {ICAL.Time}\n */\nclass VCardTime extends Time {\n  /**\n   * Returns a new ICAL.VCardTime instance from a date and/or time string.\n   *\n   * @param {String} aValue     The string to create from\n   * @param {String} aIcalType  The type for this instance, e.g. date-and-or-time\n   * @return {VCardTime}        The date/time instance\n   */\n  static fromDateAndOrTimeString(aValue, aIcalType) {\n    function part(v, s, e) {\n      return v ? strictParseInt(v.slice(s, s + e)) : null;\n    }\n    let parts = aValue.split('T');\n    let dt = parts[0],\n      tmz = parts[1];\n    let splitzone = tmz ? design$1.vcard.value.time._splitZone(tmz) : [];\n    let zone = splitzone[0],\n      tm = splitzone[1];\n    let dtlen = dt ? dt.length : 0;\n    let tmlen = tm ? tm.length : 0;\n    let hasDashDate = dt && dt[0] == '-' && dt[1] == '-';\n    let hasDashTime = tm && tm[0] == '-';\n    let o = {\n      year: hasDashDate ? null : part(dt, 0, 4),\n      month: hasDashDate && (dtlen == 4 || dtlen == 7) ? part(dt, 2, 2) : dtlen == 7 ? part(dt, 5, 2) : dtlen == 10 ? part(dt, 5, 2) : null,\n      day: dtlen == 5 ? part(dt, 3, 2) : dtlen == 7 && hasDashDate ? part(dt, 5, 2) : dtlen == 10 ? part(dt, 8, 2) : null,\n      hour: hasDashTime ? null : part(tm, 0, 2),\n      minute: hasDashTime && tmlen == 3 ? part(tm, 1, 2) : tmlen > 4 ? hasDashTime ? part(tm, 1, 2) : part(tm, 3, 2) : null,\n      second: tmlen == 4 ? part(tm, 2, 2) : tmlen == 6 ? part(tm, 4, 2) : tmlen == 8 ? part(tm, 6, 2) : null\n    };\n    if (zone == 'Z') {\n      zone = Timezone.utcTimezone;\n    } else if (zone && zone[3] == ':') {\n      zone = UtcOffset.fromString(zone);\n    } else {\n      zone = null;\n    }\n    return new VCardTime(o, zone, aIcalType);\n  }\n\n  /**\n   * Creates a new ICAL.VCardTime instance.\n   *\n   * @param {Object} data                           The data for the time instance\n   * @param {Number=} data.year                     The year for this date\n   * @param {Number=} data.month                    The month for this date\n   * @param {Number=} data.day                      The day for this date\n   * @param {Number=} data.hour                     The hour for this date\n   * @param {Number=} data.minute                   The minute for this date\n   * @param {Number=} data.second                   The second for this date\n   * @param {Timezone|UtcOffset} zone               The timezone to use\n   * @param {String} icaltype                       The type for this date/time object\n   */\n  constructor(data, zone, icaltype) {\n    super(data, zone);\n    this.icaltype = icaltype || \"date-and-or-time\";\n  }\n\n  /**\n   * The class identifier.\n   * @constant\n   * @type {String}\n   * @default \"vcardtime\"\n   */\n  icalclass = \"vcardtime\";\n\n  /**\n   * The type name, to be used in the jCal object.\n   * @type {String}\n   * @default \"date-and-or-time\"\n   */\n  icaltype = \"date-and-or-time\";\n\n  /**\n   * Returns a clone of the vcard date/time object.\n   *\n   * @return {VCardTime}     The cloned object\n   */\n  clone() {\n    return new VCardTime(this._time, this.zone, this.icaltype);\n  }\n  _normalize() {\n    return this;\n  }\n\n  /**\n   * @inheritdoc\n   */\n  utcOffset() {\n    if (this.zone instanceof UtcOffset) {\n      return this.zone.toSeconds();\n    } else {\n      return Time.prototype.utcOffset.apply(this, arguments);\n    }\n  }\n\n  /**\n   * Returns an RFC 6350 compliant representation of this object.\n   *\n   * @return {String}         vcard date/time string\n   */\n  toICALString() {\n    return design$1.vcard.value[this.icaltype].toICAL(this.toString());\n  }\n\n  /**\n   * The string representation of this date/time, in jCard form\n   * (including : and - separators).\n   * @return {String}\n   */\n  toString() {\n    let y = this.year,\n      m = this.month,\n      d = this.day;\n    let h = this.hour,\n      mm = this.minute,\n      s = this.second;\n    let hasYear = y !== null,\n      hasMonth = m !== null,\n      hasDay = d !== null;\n    let hasHour = h !== null,\n      hasMinute = mm !== null,\n      hasSecond = s !== null;\n    let datepart = (hasYear ? pad2(y) + (hasMonth || hasDay ? '-' : '') : hasMonth || hasDay ? '--' : '') + (hasMonth ? pad2(m) : '') + (hasDay ? '-' + pad2(d) : '');\n    let timepart = (hasHour ? pad2(h) : '-') + (hasHour && hasMinute ? ':' : '') + (hasMinute ? pad2(mm) : '') + (!hasHour && !hasMinute ? '-' : '') + (hasMinute && hasSecond ? ':' : '') + (hasSecond ? pad2(s) : '');\n    let zone;\n    if (this.zone === Timezone.utcTimezone) {\n      zone = 'Z';\n    } else if (this.zone instanceof UtcOffset) {\n      zone = this.zone.toString();\n    } else if (this.zone === Timezone.localTimezone) {\n      zone = '';\n    } else if (this.zone instanceof Timezone) {\n      let offset = UtcOffset.fromSeconds(this.zone.utcOffset(this));\n      zone = offset.toString();\n    } else {\n      zone = '';\n    }\n    switch (this.icaltype) {\n      case \"time\":\n        return timepart + zone;\n      case \"date-and-or-time\":\n      case \"date-time\":\n        return datepart + (timepart == '--' ? '' : 'T' + timepart + zone);\n      case \"date\":\n        return datepart;\n    }\n    return null;\n  }\n}\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n/**\n * This lets typescript resolve our custom types in the\n * generated d.ts files (jsdoc typedefs are converted to typescript types).\n * Ignore prevents the typedefs from being documented more than once.\n *\n * @ignore\n * @typedef {import(\"./types.js\").weekDay} weekDay\n * Imports the 'weekDay' type from the \"types.js\" module\n */\n\n/**\n * An iterator for a single recurrence rule. This class usually doesn't have to be instanciated\n * directly, the convenience method {@link ICAL.Recur#iterator} can be used.\n *\n * @memberof ICAL\n */\nclass RecurIterator {\n  static _indexMap = {\n    \"BYSECOND\": 0,\n    \"BYMINUTE\": 1,\n    \"BYHOUR\": 2,\n    \"BYDAY\": 3,\n    \"BYMONTHDAY\": 4,\n    \"BYYEARDAY\": 5,\n    \"BYWEEKNO\": 6,\n    \"BYMONTH\": 7,\n    \"BYSETPOS\": 8\n  };\n  static _expandMap = {\n    \"SECONDLY\": [1, 1, 1, 1, 1, 1, 1, 1],\n    \"MINUTELY\": [2, 1, 1, 1, 1, 1, 1, 1],\n    \"HOURLY\": [2, 2, 1, 1, 1, 1, 1, 1],\n    \"DAILY\": [2, 2, 2, 1, 1, 1, 1, 1],\n    \"WEEKLY\": [2, 2, 2, 2, 3, 3, 1, 1],\n    \"MONTHLY\": [2, 2, 2, 2, 2, 3, 3, 1],\n    \"YEARLY\": [2, 2, 2, 2, 2, 2, 2, 2]\n  };\n  static UNKNOWN = 0;\n  static CONTRACT = 1;\n  static EXPAND = 2;\n  static ILLEGAL = 3;\n\n  /**\n   * Creates a new ICAL.RecurIterator instance. The options object may contain additional members\n   * when resuming iteration from a previous run.\n   *\n   * @param {Object} options                The iterator options\n   * @param {Recur} options.rule            The rule to iterate.\n   * @param {Time} options.dtstart          The start date of the event.\n   * @param {Boolean=} options.initialized  When true, assume that options are\n   *        from a previously constructed iterator. Initialization will not be\n   *        repeated.\n   */\n  constructor(options) {\n    this.fromData(options);\n  }\n\n  /**\n   * True when iteration is finished.\n   * @type {Boolean}\n   */\n  completed = false;\n\n  /**\n   * The rule that is being iterated\n   * @type {Recur}\n   */\n  rule = null;\n\n  /**\n   * The start date of the event being iterated.\n   * @type {Time}\n   */\n  dtstart = null;\n\n  /**\n   * The last occurrence that was returned from the\n   * {@link RecurIterator#next} method.\n   * @type {Time}\n   */\n  last = null;\n\n  /**\n   * The sequence number from the occurrence\n   * @type {Number}\n   */\n  occurrence_number = 0;\n\n  /**\n   * The indices used for the {@link ICAL.RecurIterator#by_data} object.\n   * @type {Object}\n   * @private\n   */\n  by_indices = null;\n\n  /**\n   * If true, the iterator has already been initialized\n   * @type {Boolean}\n   * @private\n   */\n  initialized = false;\n\n  /**\n   * The initializd by-data.\n   * @type {Object}\n   * @private\n   */\n  by_data = null;\n\n  /**\n   * The expanded yeardays\n   * @type {Array}\n   * @private\n   */\n  days = null;\n\n  /**\n   * The index in the {@link ICAL.RecurIterator#days} array.\n   * @type {Number}\n   * @private\n   */\n  days_index = 0;\n\n  /**\n   * Initialize the recurrence iterator from the passed data object. This\n   * method is usually not called directly, you can initialize the iterator\n   * through the constructor.\n   *\n   * @param {Object} options                The iterator options\n   * @param {Recur} options.rule            The rule to iterate.\n   * @param {Time} options.dtstart          The start date of the event.\n   * @param {Boolean=} options.initialized  When true, assume that options are\n   *        from a previously constructed iterator. Initialization will not be\n   *        repeated.\n   */\n  fromData(options) {\n    this.rule = formatClassType(options.rule, Recur);\n    if (!this.rule) {\n      throw new Error('iterator requires a (ICAL.Recur) rule');\n    }\n    this.dtstart = formatClassType(options.dtstart, Time);\n    if (!this.dtstart) {\n      throw new Error('iterator requires a (ICAL.Time) dtstart');\n    }\n    if (options.by_data) {\n      this.by_data = options.by_data;\n    } else {\n      this.by_data = clone(this.rule.parts, true);\n    }\n    if (options.occurrence_number) this.occurrence_number = options.occurrence_number;\n    this.days = options.days || [];\n    if (options.last) {\n      this.last = formatClassType(options.last, Time);\n    }\n    this.by_indices = options.by_indices;\n    if (!this.by_indices) {\n      this.by_indices = {\n        \"BYSECOND\": 0,\n        \"BYMINUTE\": 0,\n        \"BYHOUR\": 0,\n        \"BYDAY\": 0,\n        \"BYMONTH\": 0,\n        \"BYWEEKNO\": 0,\n        \"BYMONTHDAY\": 0\n      };\n    }\n    this.initialized = options.initialized || false;\n    if (!this.initialized) {\n      try {\n        this.init();\n      } catch (e) {\n        if (e instanceof InvalidRecurrenceRuleError) {\n          // Init may error if there are no possible recurrence instances from\n          // the rule, but we don't want to bubble this error up. Instead, we\n          // create an empty iterator.\n          this.completed = true;\n        } else {\n          // Propagate other errors to consumers.\n          throw e;\n        }\n      }\n    }\n  }\n\n  /**\n   * Initialize the iterator\n   * @private\n   */\n  init() {\n    this.initialized = true;\n    this.last = this.dtstart.clone();\n    let parts = this.by_data;\n    if (\"BYDAY\" in parts) {\n      // libical does this earlier when the rule is loaded, but we postpone to\n      // now so we can preserve the original order.\n      this.sort_byday_rules(parts.BYDAY);\n    }\n\n    // If the BYYEARDAY appares, no other date rule part may appear\n    if (\"BYYEARDAY\" in parts) {\n      if (\"BYMONTH\" in parts || \"BYWEEKNO\" in parts || \"BYMONTHDAY\" in parts || \"BYDAY\" in parts) {\n        throw new Error(\"Invalid BYYEARDAY rule\");\n      }\n    }\n\n    // BYWEEKNO and BYMONTHDAY rule parts may not both appear\n    if (\"BYWEEKNO\" in parts && \"BYMONTHDAY\" in parts) {\n      throw new Error(\"BYWEEKNO does not fit to BYMONTHDAY\");\n    }\n\n    // For MONTHLY recurrences (FREQ=MONTHLY) neither BYYEARDAY nor\n    // BYWEEKNO may appear.\n    if (this.rule.freq == \"MONTHLY\" && (\"BYYEARDAY\" in parts || \"BYWEEKNO\" in parts)) {\n      throw new Error(\"For MONTHLY recurrences neither BYYEARDAY nor BYWEEKNO may appear\");\n    }\n\n    // For WEEKLY recurrences (FREQ=WEEKLY) neither BYMONTHDAY nor\n    // BYYEARDAY may appear.\n    if (this.rule.freq == \"WEEKLY\" && (\"BYYEARDAY\" in parts || \"BYMONTHDAY\" in parts)) {\n      throw new Error(\"For WEEKLY recurrences neither BYMONTHDAY nor BYYEARDAY may appear\");\n    }\n\n    // BYYEARDAY may only appear in YEARLY rules\n    if (this.rule.freq != \"YEARLY\" && \"BYYEARDAY\" in parts) {\n      throw new Error(\"BYYEARDAY may only appear in YEARLY rules\");\n    }\n    this.last.second = this.setup_defaults(\"BYSECOND\", \"SECONDLY\", this.dtstart.second);\n    this.last.minute = this.setup_defaults(\"BYMINUTE\", \"MINUTELY\", this.dtstart.minute);\n    this.last.hour = this.setup_defaults(\"BYHOUR\", \"HOURLY\", this.dtstart.hour);\n    this.last.day = this.setup_defaults(\"BYMONTHDAY\", \"DAILY\", this.dtstart.day);\n    this.last.month = this.setup_defaults(\"BYMONTH\", \"MONTHLY\", this.dtstart.month);\n    if (this.rule.freq == \"WEEKLY\") {\n      if (\"BYDAY\" in parts) {\n        let [, dow] = this.ruleDayOfWeek(parts.BYDAY[0], this.rule.wkst);\n        let wkdy = dow - this.last.dayOfWeek(this.rule.wkst);\n        if (this.last.dayOfWeek(this.rule.wkst) < dow && wkdy >= 0 || wkdy < 0) {\n          // Initial time is after first day of BYDAY data\n          this.last.day += wkdy;\n        }\n      } else {\n        let dayName = Recur.numericDayToIcalDay(this.dtstart.dayOfWeek());\n        parts.BYDAY = [dayName];\n      }\n    }\n    if (this.rule.freq == \"YEARLY\") {\n      // Some yearly recurrence rules may be specific enough to not actually\n      // occur on a yearly basis, e.g. the 29th day of February or the fifth\n      // Monday of a given month. The standard isn't clear on the intended\n      // behavior in these cases, but `libical` at least will iterate until it\n      // finds a matching year.\n      // CAREFUL: Some rules may specify an occurrence that can never happen,\n      // e.g. the first Monday of April so long as it falls on the 15th\n      // through the 21st. Detecting these is non-trivial, so ensure that we\n      // stop iterating at some point.\n      const untilYear = this.rule.until ? this.rule.until.year : 20000;\n      while (this.last.year <= untilYear) {\n        this.expand_year_days(this.last.year);\n        if (this.days.length > 0) {\n          break;\n        }\n        this.increment_year(this.rule.interval);\n      }\n      if (this.days.length == 0) {\n        throw new InvalidRecurrenceRuleError();\n      }\n      this._nextByYearDay();\n    }\n    if (this.rule.freq == \"MONTHLY\") {\n      if (this.has_by_data(\"BYDAY\")) {\n        let tempLast = null;\n        let initLast = this.last.clone();\n        let daysInMonth = Time.daysInMonth(this.last.month, this.last.year);\n\n        // Check every weekday in BYDAY with relative dow and pos.\n        for (let bydow of this.by_data.BYDAY) {\n          this.last = initLast.clone();\n          let [pos, dow] = this.ruleDayOfWeek(bydow);\n          let dayOfMonth = this.last.nthWeekDay(dow, pos);\n\n          // If |pos| >= 6, the byday is invalid for a monthly rule.\n          if (pos >= 6 || pos <= -6) {\n            throw new Error(\"Malformed values in BYDAY part\");\n          }\n\n          // If a Byday with pos=+/-5 is not in the current month it\n          // must be searched in the next months.\n          if (dayOfMonth > daysInMonth || dayOfMonth <= 0) {\n            // Skip if we have already found a \"last\" in this month.\n            if (tempLast && tempLast.month == initLast.month) {\n              continue;\n            }\n            while (dayOfMonth > daysInMonth || dayOfMonth <= 0) {\n              this.increment_month();\n              daysInMonth = Time.daysInMonth(this.last.month, this.last.year);\n              dayOfMonth = this.last.nthWeekDay(dow, pos);\n            }\n          }\n          this.last.day = dayOfMonth;\n          if (!tempLast || this.last.compare(tempLast) < 0) {\n            tempLast = this.last.clone();\n          }\n        }\n        this.last = tempLast.clone();\n\n        //XXX: This feels like a hack, but we need to initialize\n        //     the BYMONTHDAY case correctly and byDayAndMonthDay handles\n        //     this case. It accepts a special flag which will avoid incrementing\n        //     the initial value without the flag days that match the start time\n        //     would be missed.\n        if (this.has_by_data('BYMONTHDAY')) {\n          this._byDayAndMonthDay(true);\n        }\n        if (this.last.day > daysInMonth || this.last.day == 0) {\n          throw new Error(\"Malformed values in BYDAY part\");\n        }\n      } else if (this.has_by_data(\"BYMONTHDAY\")) {\n        // Change the day value so that normalisation won't change the month.\n        this.last.day = 1;\n\n        // Get a sorted list of days in the starting month that match the rule.\n        let normalized = this.normalizeByMonthDayRules(this.last.year, this.last.month, this.rule.parts.BYMONTHDAY).filter(d => d >= this.last.day);\n        if (normalized.length) {\n          // There's at least one valid day, use it.\n          this.last.day = normalized[0];\n          this.by_data.BYMONTHDAY = normalized;\n        } else {\n          // There's no occurrence in this month, find the next valid month.\n          // The longest possible sequence of skipped months is February-April-June,\n          // so we might need to call next_month up to three times.\n          if (!this.next_month() && !this.next_month() && !this.next_month()) {\n            throw new Error(\"No possible occurrences\");\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Retrieve the next occurrence from the iterator.\n   * @return {Time}\n   */\n  next(again = false) {\n    let before = this.last ? this.last.clone() : null;\n    if (this.rule.count && this.occurrence_number >= this.rule.count || this.rule.until && this.last.compare(this.rule.until) > 0) {\n      this.completed = true;\n    }\n    if (this.completed) {\n      return null;\n    }\n    if (this.occurrence_number == 0 && this.last.compare(this.dtstart) >= 0) {\n      // First of all, give the instance that was initialized\n      this.occurrence_number++;\n      return this.last;\n    }\n    let valid;\n    do {\n      valid = 1;\n      switch (this.rule.freq) {\n        case \"SECONDLY\":\n          this.next_second();\n          break;\n        case \"MINUTELY\":\n          this.next_minute();\n          break;\n        case \"HOURLY\":\n          this.next_hour();\n          break;\n        case \"DAILY\":\n          this.next_day();\n          break;\n        case \"WEEKLY\":\n          this.next_week();\n          break;\n        case \"MONTHLY\":\n          valid = this.next_month();\n          break;\n        case \"YEARLY\":\n          this.next_year();\n          break;\n        default:\n          return null;\n      }\n    } while (!this.check_contracting_rules() || this.last.compare(this.dtstart) < 0 || !valid);\n    if (this.last.compare(before) == 0) {\n      if (again) {\n        throw new Error(\"Same occurrence found twice, protecting you from death by recursion\");\n      }\n      this.next(true);\n    }\n    if (this.rule.until && this.last.compare(this.rule.until) > 0) {\n      this.completed = true;\n      return null;\n    } else {\n      this.occurrence_number++;\n      return this.last;\n    }\n  }\n  next_second() {\n    return this.next_generic(\"BYSECOND\", \"SECONDLY\", \"second\", \"minute\");\n  }\n  increment_second(inc) {\n    return this.increment_generic(inc, \"second\", 60, \"minute\");\n  }\n  next_minute() {\n    return this.next_generic(\"BYMINUTE\", \"MINUTELY\", \"minute\", \"hour\", \"next_second\");\n  }\n  increment_minute(inc) {\n    return this.increment_generic(inc, \"minute\", 60, \"hour\");\n  }\n  next_hour() {\n    return this.next_generic(\"BYHOUR\", \"HOURLY\", \"hour\", \"monthday\", \"next_minute\");\n  }\n  increment_hour(inc) {\n    this.increment_generic(inc, \"hour\", 24, \"monthday\");\n  }\n  next_day() {\n    let this_freq = this.rule.freq == \"DAILY\";\n    if (this.next_hour() == 0) {\n      return 0;\n    }\n    if (this_freq) {\n      this.increment_monthday(this.rule.interval);\n    } else {\n      this.increment_monthday(1);\n    }\n    return 0;\n  }\n  next_week() {\n    let end_of_data = 0;\n    if (this.next_weekday_by_week() == 0) {\n      return end_of_data;\n    }\n    if (this.has_by_data(\"BYWEEKNO\")) {\n      this.by_indices.BYWEEKNO++;\n      if (this.by_indices.BYWEEKNO == this.by_data.BYWEEKNO.length) {\n        this.by_indices.BYWEEKNO = 0;\n        end_of_data = 1;\n      }\n\n      // HACK should be first month of the year\n      this.last.month = 1;\n      this.last.day = 1;\n      let week_no = this.by_data.BYWEEKNO[this.by_indices.BYWEEKNO];\n      this.last.day += 7 * week_no;\n      if (end_of_data) {\n        this.increment_year(1);\n      }\n    } else {\n      // Jump to the next week\n      this.increment_monthday(7 * this.rule.interval);\n    }\n    return end_of_data;\n  }\n\n  /**\n   * Normalize each by day rule for a given year/month.\n   * Takes into account ordering and negative rules\n   *\n   * @private\n   * @param {Number} year         Current year.\n   * @param {Number} month        Current month.\n   * @param {Array}  rules        Array of rules.\n   *\n   * @return {Array} sorted and normalized rules.\n   *                 Negative rules will be expanded to their\n   *                 correct positive values for easier processing.\n   */\n  normalizeByMonthDayRules(year, month, rules) {\n    let daysInMonth = Time.daysInMonth(month, year);\n\n    // XXX: This is probably bad for performance to allocate\n    //      a new array for each month we scan, if possible\n    //      we should try to optimize this...\n    let newRules = [];\n    let ruleIdx = 0;\n    let len = rules.length;\n    let rule;\n    for (; ruleIdx < len; ruleIdx++) {\n      rule = parseInt(rules[ruleIdx], 10);\n      if (isNaN(rule)) {\n        throw new Error('Invalid BYMONTHDAY value');\n      }\n\n      // if this rule falls outside of given\n      // month discard it.\n      if (Math.abs(rule) > daysInMonth) {\n        continue;\n      }\n\n      // negative case\n      if (rule < 0) {\n        // we add (not subtract it is a negative number)\n        // one from the rule because 1 === last day of month\n        rule = daysInMonth + (rule + 1);\n      } else if (rule === 0) {\n        // skip zero: it is invalid.\n        continue;\n      }\n\n      // only add unique items...\n      if (newRules.indexOf(rule) === -1) {\n        newRules.push(rule);\n      }\n    }\n\n    // unique and sort\n    return newRules.sort(function (a, b) {\n      return a - b;\n    });\n  }\n\n  /**\n   * NOTES:\n   * We are given a list of dates in the month (BYMONTHDAY) (23, etc..)\n   * Also we are given a list of days (BYDAY) (MO, 2SU, etc..) when\n   * both conditions match a given date (this.last.day) iteration stops.\n   *\n   * @private\n   * @param {Boolean=} isInit     When given true will not increment the\n   *                                current day (this.last).\n   */\n  _byDayAndMonthDay(isInit) {\n    let byMonthDay; // setup in initMonth\n    let byDay = this.by_data.BYDAY;\n    let date;\n    let dateIdx = 0;\n    let dateLen; // setup in initMonth\n    let dayLen = byDay.length;\n\n    // we are not valid by default\n    let dataIsValid = 0;\n    let daysInMonth;\n    let self = this;\n    // we need a copy of this, because a DateTime gets normalized\n    // automatically if the day is out of range. At some points we\n    // set the last day to 0 to start counting.\n    let lastDay = this.last.day;\n    function initMonth() {\n      daysInMonth = Time.daysInMonth(self.last.month, self.last.year);\n      byMonthDay = self.normalizeByMonthDayRules(self.last.year, self.last.month, self.by_data.BYMONTHDAY);\n      dateLen = byMonthDay.length;\n\n      // For the case of more than one occurrence in one month\n      // we have to be sure to start searching after the last\n      // found date or at the last BYMONTHDAY, unless we are\n      // initializing the iterator because in this case we have\n      // to consider the last found date too.\n      while (byMonthDay[dateIdx] <= lastDay && !(isInit && byMonthDay[dateIdx] == lastDay) && dateIdx < dateLen - 1) {\n        dateIdx++;\n      }\n    }\n    function nextMonth() {\n      // since the day is incremented at the start\n      // of the loop below, we need to start at 0\n      lastDay = 0;\n      self.increment_month();\n      dateIdx = 0;\n      initMonth();\n    }\n    initMonth();\n\n    // should come after initMonth\n    if (isInit) {\n      lastDay -= 1;\n    }\n\n    // Use a counter to avoid an infinite loop with malformed rules.\n    // Stop checking after 4 years so we consider also a leap year.\n    let monthsCounter = 48;\n    while (!dataIsValid && monthsCounter) {\n      monthsCounter--;\n      // increment the current date. This is really\n      // important otherwise we may fall into the infinite\n      // loop trap. The initial date takes care of the case\n      // where the current date is the date we are looking\n      // for.\n      date = lastDay + 1;\n      if (date > daysInMonth) {\n        nextMonth();\n        continue;\n      }\n\n      // find next date\n      let next = byMonthDay[dateIdx++];\n\n      // this logic is dependent on the BYMONTHDAYS\n      // being in order (which is done by #normalizeByMonthDayRules)\n      if (next >= date) {\n        // if the next month day is in the future jump to it.\n        lastDay = next;\n      } else {\n        // in this case the 'next' monthday has past\n        // we must move to the month.\n        nextMonth();\n        continue;\n      }\n\n      // Now we can loop through the day rules to see\n      // if one matches the current month date.\n      for (let dayIdx = 0; dayIdx < dayLen; dayIdx++) {\n        let parts = this.ruleDayOfWeek(byDay[dayIdx]);\n        let pos = parts[0];\n        let dow = parts[1];\n        this.last.day = lastDay;\n        if (this.last.isNthWeekDay(dow, pos)) {\n          // when we find the valid one we can mark\n          // the conditions as met and break the loop.\n          // (Because we have this condition above\n          //  it will also break the parent loop).\n          dataIsValid = 1;\n          break;\n        }\n      }\n\n      // It is completely possible that the combination\n      // cannot be matched in the current month.\n      // When we reach the end of possible combinations\n      // in the current month we iterate to the next one.\n      // since dateIdx is incremented right after getting\n      // \"next\", we don't need dateLen -1 here.\n      if (!dataIsValid && dateIdx === dateLen) {\n        nextMonth();\n        continue;\n      }\n    }\n    if (monthsCounter <= 0) {\n      // Checked 4 years without finding a Byday that matches\n      // a Bymonthday. Maybe the rule is not correct.\n      throw new Error(\"Malformed values in BYDAY combined with BYMONTHDAY parts\");\n    }\n    return dataIsValid;\n  }\n  next_month() {\n    let data_valid = 1;\n    if (this.next_hour() == 0) {\n      return data_valid;\n    }\n    if (this.has_by_data(\"BYDAY\") && this.has_by_data(\"BYMONTHDAY\")) {\n      data_valid = this._byDayAndMonthDay();\n    } else if (this.has_by_data(\"BYDAY\")) {\n      let daysInMonth = Time.daysInMonth(this.last.month, this.last.year);\n      let setpos = 0;\n      let setpos_total = 0;\n      if (this.has_by_data(\"BYSETPOS\")) {\n        let last_day = this.last.day;\n        for (let day = 1; day <= daysInMonth; day++) {\n          this.last.day = day;\n          if (this.is_day_in_byday(this.last)) {\n            setpos_total++;\n            if (day <= last_day) {\n              setpos++;\n            }\n          }\n        }\n        this.last.day = last_day;\n      }\n      data_valid = 0;\n      let day;\n      for (day = this.last.day + 1; day <= daysInMonth; day++) {\n        this.last.day = day;\n        if (this.is_day_in_byday(this.last)) {\n          if (!this.has_by_data(\"BYSETPOS\") || this.check_set_position(++setpos) || this.check_set_position(setpos - setpos_total - 1)) {\n            data_valid = 1;\n            break;\n          }\n        }\n      }\n      if (day > daysInMonth) {\n        this.last.day = 1;\n        this.increment_month();\n        if (this.is_day_in_byday(this.last)) {\n          if (!this.has_by_data(\"BYSETPOS\") || this.check_set_position(1)) {\n            data_valid = 1;\n          }\n        } else {\n          data_valid = 0;\n        }\n      }\n    } else if (this.has_by_data(\"BYMONTHDAY\")) {\n      this.by_indices.BYMONTHDAY++;\n      if (this.by_indices.BYMONTHDAY >= this.by_data.BYMONTHDAY.length) {\n        this.by_indices.BYMONTHDAY = 0;\n        this.increment_month();\n        if (this.by_indices.BYMONTHDAY >= this.by_data.BYMONTHDAY.length) {\n          return 0;\n        }\n      }\n      let daysInMonth = Time.daysInMonth(this.last.month, this.last.year);\n      let day = this.by_data.BYMONTHDAY[this.by_indices.BYMONTHDAY];\n      if (day < 0) {\n        day = daysInMonth + day + 1;\n      }\n      if (day > daysInMonth) {\n        this.last.day = 1;\n        data_valid = this.is_day_in_byday(this.last);\n      } else {\n        this.last.day = day;\n      }\n    } else {\n      this.increment_month();\n      let daysInMonth = Time.daysInMonth(this.last.month, this.last.year);\n      if (this.by_data.BYMONTHDAY[0] > daysInMonth) {\n        data_valid = 0;\n      } else {\n        this.last.day = this.by_data.BYMONTHDAY[0];\n      }\n    }\n    return data_valid;\n  }\n  next_weekday_by_week() {\n    let end_of_data = 0;\n    if (this.next_hour() == 0) {\n      return end_of_data;\n    }\n    if (!this.has_by_data(\"BYDAY\")) {\n      return 1;\n    }\n    for (;;) {\n      let tt = new Time();\n      this.by_indices.BYDAY++;\n      if (this.by_indices.BYDAY == Object.keys(this.by_data.BYDAY).length) {\n        this.by_indices.BYDAY = 0;\n        end_of_data = 1;\n      }\n      let coded_day = this.by_data.BYDAY[this.by_indices.BYDAY];\n      let parts = this.ruleDayOfWeek(coded_day);\n      let dow = parts[1];\n      dow -= this.rule.wkst;\n      if (dow < 0) {\n        dow += 7;\n      }\n      tt.year = this.last.year;\n      tt.month = this.last.month;\n      tt.day = this.last.day;\n      let startOfWeek = tt.startDoyWeek(this.rule.wkst);\n      if (dow + startOfWeek < 1) {\n        // The selected date is in the previous year\n        if (!end_of_data) {\n          continue;\n        }\n      }\n      let next = Time.fromDayOfYear(startOfWeek + dow, this.last.year);\n\n      /**\n       * The normalization horrors below are due to\n       * the fact that when the year/month/day changes\n       * it can effect the other operations that come after.\n       */\n      this.last.year = next.year;\n      this.last.month = next.month;\n      this.last.day = next.day;\n      return end_of_data;\n    }\n  }\n  next_year() {\n    if (this.next_hour() == 0) {\n      return 0;\n    }\n    if (++this.days_index == this.days.length) {\n      this.days_index = 0;\n      do {\n        this.increment_year(this.rule.interval);\n        if (this.has_by_data(\"BYMONTHDAY\")) {\n          this.by_data.BYMONTHDAY = this.normalizeByMonthDayRules(this.last.year, this.last.month, this.rule.parts.BYMONTHDAY);\n        }\n        this.expand_year_days(this.last.year);\n      } while (this.days.length == 0);\n    }\n    this._nextByYearDay();\n    return 1;\n  }\n  _nextByYearDay() {\n    let doy = this.days[this.days_index];\n    let year = this.last.year;\n    if (doy < 1) {\n      // Time.fromDayOfYear(doy, year) indexes relative to the\n      // start of the given year. That is different from the\n      // semantics of BYYEARDAY where negative indexes are an\n      // offset from the end of the given year.\n      doy += 1;\n      year += 1;\n    }\n    let next = Time.fromDayOfYear(doy, year);\n    this.last.day = next.day;\n    this.last.month = next.month;\n  }\n\n  /**\n   * @param dow (eg: '1TU', '-1MO')\n   * @param {weekDay=} aWeekStart The week start weekday\n   * @return [pos, numericDow] (eg: [1, 3]) numericDow is relative to aWeekStart\n   */\n  ruleDayOfWeek(dow, aWeekStart) {\n    let matches = dow.match(/([+-]?[0-9])?(MO|TU|WE|TH|FR|SA|SU)/);\n    if (matches) {\n      let pos = parseInt(matches[1] || 0, 10);\n      dow = Recur.icalDayToNumericDay(matches[2], aWeekStart);\n      return [pos, dow];\n    } else {\n      return [0, 0];\n    }\n  }\n  next_generic(aRuleType, aInterval, aDateAttr, aFollowingAttr, aPreviousIncr) {\n    let has_by_rule = aRuleType in this.by_data;\n    let this_freq = this.rule.freq == aInterval;\n    let end_of_data = 0;\n    if (aPreviousIncr && this[aPreviousIncr]() == 0) {\n      return end_of_data;\n    }\n    if (has_by_rule) {\n      this.by_indices[aRuleType]++;\n      let dta = this.by_data[aRuleType];\n      if (this.by_indices[aRuleType] == dta.length) {\n        this.by_indices[aRuleType] = 0;\n        end_of_data = 1;\n      }\n      this.last[aDateAttr] = dta[this.by_indices[aRuleType]];\n    } else if (this_freq) {\n      this[\"increment_\" + aDateAttr](this.rule.interval);\n    }\n    if (has_by_rule && end_of_data && this_freq) {\n      this[\"increment_\" + aFollowingAttr](1);\n    }\n    return end_of_data;\n  }\n  increment_monthday(inc) {\n    for (let i = 0; i < inc; i++) {\n      let daysInMonth = Time.daysInMonth(this.last.month, this.last.year);\n      this.last.day++;\n      if (this.last.day > daysInMonth) {\n        this.last.day -= daysInMonth;\n        this.increment_month();\n      }\n    }\n  }\n  increment_month() {\n    this.last.day = 1;\n    if (this.has_by_data(\"BYMONTH\")) {\n      this.by_indices.BYMONTH++;\n      if (this.by_indices.BYMONTH == this.by_data.BYMONTH.length) {\n        this.by_indices.BYMONTH = 0;\n        this.increment_year(1);\n      }\n      this.last.month = this.by_data.BYMONTH[this.by_indices.BYMONTH];\n    } else {\n      if (this.rule.freq == \"MONTHLY\") {\n        this.last.month += this.rule.interval;\n      } else {\n        this.last.month++;\n      }\n      this.last.month--;\n      let years = trunc(this.last.month / 12);\n      this.last.month %= 12;\n      this.last.month++;\n      if (years != 0) {\n        this.increment_year(years);\n      }\n    }\n    if (this.has_by_data(\"BYMONTHDAY\")) {\n      this.by_data.BYMONTHDAY = this.normalizeByMonthDayRules(this.last.year, this.last.month, this.rule.parts.BYMONTHDAY);\n    }\n  }\n  increment_year(inc) {\n    // Don't jump into the next month if this.last is Feb 29.\n    this.last.day = 1;\n    this.last.year += inc;\n  }\n  increment_generic(inc, aDateAttr, aFactor, aNextIncrement) {\n    this.last[aDateAttr] += inc;\n    let nextunit = trunc(this.last[aDateAttr] / aFactor);\n    this.last[aDateAttr] %= aFactor;\n    if (nextunit != 0) {\n      this[\"increment_\" + aNextIncrement](nextunit);\n    }\n  }\n  has_by_data(aRuleType) {\n    return aRuleType in this.rule.parts;\n  }\n  expand_year_days(aYear) {\n    let t = new Time();\n    this.days = [];\n\n    // We need our own copy with a few keys set\n    let parts = {};\n    let rules = [\"BYDAY\", \"BYWEEKNO\", \"BYMONTHDAY\", \"BYMONTH\", \"BYYEARDAY\"];\n    for (let part of rules) {\n      if (part in this.rule.parts) {\n        parts[part] = this.rule.parts[part];\n      }\n    }\n    if (\"BYMONTH\" in parts && \"BYWEEKNO\" in parts) {\n      let valid = 1;\n      let validWeeks = {};\n      t.year = aYear;\n      t.isDate = true;\n      for (let monthIdx = 0; monthIdx < this.by_data.BYMONTH.length; monthIdx++) {\n        let month = this.by_data.BYMONTH[monthIdx];\n        t.month = month;\n        t.day = 1;\n        let first_week = t.weekNumber(this.rule.wkst);\n        t.day = Time.daysInMonth(month, aYear);\n        let last_week = t.weekNumber(this.rule.wkst);\n        for (monthIdx = first_week; monthIdx < last_week; monthIdx++) {\n          validWeeks[monthIdx] = 1;\n        }\n      }\n      for (let weekIdx = 0; weekIdx < this.by_data.BYWEEKNO.length && valid; weekIdx++) {\n        let weekno = this.by_data.BYWEEKNO[weekIdx];\n        if (weekno < 52) {\n          valid &= validWeeks[weekIdx];\n        } else {\n          valid = 0;\n        }\n      }\n      if (valid) {\n        delete parts.BYMONTH;\n      } else {\n        delete parts.BYWEEKNO;\n      }\n    }\n    let partCount = Object.keys(parts).length;\n    if (partCount == 0) {\n      let t1 = this.dtstart.clone();\n      t1.year = this.last.year;\n      this.days.push(t1.dayOfYear());\n    } else if (partCount == 1 && \"BYMONTH\" in parts) {\n      for (let month of this.by_data.BYMONTH) {\n        let t2 = this.dtstart.clone();\n        t2.year = aYear;\n        t2.month = month;\n        t2.isDate = true;\n        this.days.push(t2.dayOfYear());\n      }\n    } else if (partCount == 1 && \"BYMONTHDAY\" in parts) {\n      for (let monthday of this.by_data.BYMONTHDAY) {\n        let t3 = this.dtstart.clone();\n        if (monthday < 0) {\n          let daysInMonth = Time.daysInMonth(t3.month, aYear);\n          monthday = monthday + daysInMonth + 1;\n        }\n        t3.day = monthday;\n        t3.year = aYear;\n        t3.isDate = true;\n        this.days.push(t3.dayOfYear());\n      }\n    } else if (partCount == 2 && \"BYMONTHDAY\" in parts && \"BYMONTH\" in parts) {\n      for (let month of this.by_data.BYMONTH) {\n        let daysInMonth = Time.daysInMonth(month, aYear);\n        for (let monthday of this.by_data.BYMONTHDAY) {\n          if (monthday < 0) {\n            monthday = monthday + daysInMonth + 1;\n          }\n          t.day = monthday;\n          t.month = month;\n          t.year = aYear;\n          t.isDate = true;\n          this.days.push(t.dayOfYear());\n        }\n      }\n    } else if (partCount == 1 && \"BYWEEKNO\" in parts) ;else if (partCount == 2 && \"BYWEEKNO\" in parts && \"BYMONTHDAY\" in parts) ;else if (partCount == 1 && \"BYDAY\" in parts) {\n      this.days = this.days.concat(this.expand_by_day(aYear));\n    } else if (partCount == 2 && \"BYDAY\" in parts && \"BYMONTH\" in parts) {\n      for (let month of this.by_data.BYMONTH) {\n        let daysInMonth = Time.daysInMonth(month, aYear);\n        t.year = aYear;\n        t.month = month;\n        t.day = 1;\n        t.isDate = true;\n        let first_dow = t.dayOfWeek();\n        let doy_offset = t.dayOfYear() - 1;\n        t.day = daysInMonth;\n        let last_dow = t.dayOfWeek();\n        if (this.has_by_data(\"BYSETPOS\")) {\n          let by_month_day = [];\n          for (let day = 1; day <= daysInMonth; day++) {\n            t.day = day;\n            if (this.is_day_in_byday(t)) {\n              by_month_day.push(day);\n            }\n          }\n          for (let spIndex = 0; spIndex < by_month_day.length; spIndex++) {\n            if (this.check_set_position(spIndex + 1) || this.check_set_position(spIndex - by_month_day.length)) {\n              this.days.push(doy_offset + by_month_day[spIndex]);\n            }\n          }\n        } else {\n          for (let coded_day of this.by_data.BYDAY) {\n            let bydayParts = this.ruleDayOfWeek(coded_day);\n            let pos = bydayParts[0];\n            let dow = bydayParts[1];\n            let month_day;\n            let first_matching_day = (dow + 7 - first_dow) % 7 + 1;\n            let last_matching_day = daysInMonth - (last_dow + 7 - dow) % 7;\n            if (pos == 0) {\n              for (let day = first_matching_day; day <= daysInMonth; day += 7) {\n                this.days.push(doy_offset + day);\n              }\n            } else if (pos > 0) {\n              month_day = first_matching_day + (pos - 1) * 7;\n              if (month_day <= daysInMonth) {\n                this.days.push(doy_offset + month_day);\n              }\n            } else {\n              month_day = last_matching_day + (pos + 1) * 7;\n              if (month_day > 0) {\n                this.days.push(doy_offset + month_day);\n              }\n            }\n          }\n        }\n      }\n      // Return dates in order of occurrence (1,2,3,...) instead\n      // of by groups of weekdays (1,8,15,...,2,9,16,...).\n      this.days.sort(function (a, b) {\n        return a - b;\n      }); // Comparator function allows to sort numbers.\n    } else if (partCount == 2 && \"BYDAY\" in parts && \"BYMONTHDAY\" in parts) {\n      let expandedDays = this.expand_by_day(aYear);\n      for (let day of expandedDays) {\n        let tt = Time.fromDayOfYear(day, aYear);\n        if (this.by_data.BYMONTHDAY.indexOf(tt.day) >= 0) {\n          this.days.push(day);\n        }\n      }\n    } else if (partCount == 3 && \"BYDAY\" in parts && \"BYMONTHDAY\" in parts && \"BYMONTH\" in parts) {\n      let expandedDays = this.expand_by_day(aYear);\n      for (let day of expandedDays) {\n        let tt = Time.fromDayOfYear(day, aYear);\n        if (this.by_data.BYMONTH.indexOf(tt.month) >= 0 && this.by_data.BYMONTHDAY.indexOf(tt.day) >= 0) {\n          this.days.push(day);\n        }\n      }\n    } else if (partCount == 2 && \"BYDAY\" in parts && \"BYWEEKNO\" in parts) {\n      let expandedDays = this.expand_by_day(aYear);\n      for (let day of expandedDays) {\n        let tt = Time.fromDayOfYear(day, aYear);\n        let weekno = tt.weekNumber(this.rule.wkst);\n        if (this.by_data.BYWEEKNO.indexOf(weekno)) {\n          this.days.push(day);\n        }\n      }\n    } else if (partCount == 3 && \"BYDAY\" in parts && \"BYWEEKNO\" in parts && \"BYMONTHDAY\" in parts) ;else if (partCount == 1 && \"BYYEARDAY\" in parts) {\n      this.days = this.days.concat(this.by_data.BYYEARDAY);\n    } else {\n      this.days = [];\n    }\n    let daysInYear = Time.isLeapYear(aYear) ? 366 : 365;\n    this.days.sort((a, b) => {\n      if (a < 0) a += daysInYear + 1;\n      if (b < 0) b += daysInYear + 1;\n      return a - b;\n    });\n    return 0;\n  }\n  expand_by_day(aYear) {\n    let days_list = [];\n    let tmp = this.last.clone();\n    tmp.year = aYear;\n    tmp.month = 1;\n    tmp.day = 1;\n    tmp.isDate = true;\n    let start_dow = tmp.dayOfWeek();\n    tmp.month = 12;\n    tmp.day = 31;\n    tmp.isDate = true;\n    let end_dow = tmp.dayOfWeek();\n    let end_year_day = tmp.dayOfYear();\n    for (let day of this.by_data.BYDAY) {\n      let parts = this.ruleDayOfWeek(day);\n      let pos = parts[0];\n      let dow = parts[1];\n      if (pos == 0) {\n        let tmp_start_doy = (dow + 7 - start_dow) % 7 + 1;\n        for (let doy = tmp_start_doy; doy <= end_year_day; doy += 7) {\n          days_list.push(doy);\n        }\n      } else if (pos > 0) {\n        let first;\n        if (dow >= start_dow) {\n          first = dow - start_dow + 1;\n        } else {\n          first = dow - start_dow + 8;\n        }\n        days_list.push(first + (pos - 1) * 7);\n      } else {\n        let last;\n        pos = -pos;\n        if (dow <= end_dow) {\n          last = end_year_day - end_dow + dow;\n        } else {\n          last = end_year_day - end_dow + dow - 7;\n        }\n        days_list.push(last - (pos - 1) * 7);\n      }\n    }\n    return days_list;\n  }\n  is_day_in_byday(tt) {\n    if (this.by_data.BYDAY) {\n      for (let day of this.by_data.BYDAY) {\n        let parts = this.ruleDayOfWeek(day);\n        let pos = parts[0];\n        let dow = parts[1];\n        let this_dow = tt.dayOfWeek();\n        if (pos == 0 && dow == this_dow || tt.nthWeekDay(dow, pos) == tt.day) {\n          return 1;\n        }\n      }\n    }\n    return 0;\n  }\n\n  /**\n   * Checks if given value is in BYSETPOS.\n   *\n   * @private\n   * @param {Numeric} aPos position to check for.\n   * @return {Boolean} false unless BYSETPOS rules exist\n   *                   and the given value is present in rules.\n   */\n  check_set_position(aPos) {\n    if (this.has_by_data('BYSETPOS')) {\n      let idx = this.by_data.BYSETPOS.indexOf(aPos);\n      // negative numbers are not false-y\n      return idx !== -1;\n    }\n    return false;\n  }\n  sort_byday_rules(aRules) {\n    for (let i = 0; i < aRules.length; i++) {\n      for (let j = 0; j < i; j++) {\n        let one = this.ruleDayOfWeek(aRules[j], this.rule.wkst)[1];\n        let two = this.ruleDayOfWeek(aRules[i], this.rule.wkst)[1];\n        if (one > two) {\n          let tmp = aRules[i];\n          aRules[i] = aRules[j];\n          aRules[j] = tmp;\n        }\n      }\n    }\n  }\n  check_contract_restriction(aRuleType, v) {\n    let indexMapValue = RecurIterator._indexMap[aRuleType];\n    let ruleMapValue = RecurIterator._expandMap[this.rule.freq][indexMapValue];\n    let pass = false;\n    if (aRuleType in this.by_data && ruleMapValue == RecurIterator.CONTRACT) {\n      let ruleType = this.by_data[aRuleType];\n      for (let bydata of ruleType) {\n        if (bydata == v) {\n          pass = true;\n          break;\n        }\n      }\n    } else {\n      // Not a contracting byrule or has no data, test passes\n      pass = true;\n    }\n    return pass;\n  }\n  check_contracting_rules() {\n    let dow = this.last.dayOfWeek();\n    let weekNo = this.last.weekNumber(this.rule.wkst);\n    let doy = this.last.dayOfYear();\n    return this.check_contract_restriction(\"BYSECOND\", this.last.second) && this.check_contract_restriction(\"BYMINUTE\", this.last.minute) && this.check_contract_restriction(\"BYHOUR\", this.last.hour) && this.check_contract_restriction(\"BYDAY\", Recur.numericDayToIcalDay(dow)) && this.check_contract_restriction(\"BYWEEKNO\", weekNo) && this.check_contract_restriction(\"BYMONTHDAY\", this.last.day) && this.check_contract_restriction(\"BYMONTH\", this.last.month) && this.check_contract_restriction(\"BYYEARDAY\", doy);\n  }\n  setup_defaults(aRuleType, req, deftime) {\n    let indexMapValue = RecurIterator._indexMap[aRuleType];\n    let ruleMapValue = RecurIterator._expandMap[this.rule.freq][indexMapValue];\n    if (ruleMapValue != RecurIterator.CONTRACT) {\n      if (!(aRuleType in this.by_data)) {\n        this.by_data[aRuleType] = [deftime];\n      }\n      if (this.rule.freq != req) {\n        return this.by_data[aRuleType][0];\n      }\n    }\n    return deftime;\n  }\n\n  /**\n   * Convert iterator into a serialize-able object.  Will preserve current\n   * iteration sequence to ensure the seamless continuation of the recurrence\n   * rule.\n   * @return {Object}\n   */\n  toJSON() {\n    let result = Object.create(null);\n    result.initialized = this.initialized;\n    result.rule = this.rule.toJSON();\n    result.dtstart = this.dtstart.toJSON();\n    result.by_data = this.by_data;\n    result.days = this.days;\n    result.last = this.last.toJSON();\n    result.by_indices = this.by_indices;\n    result.occurrence_number = this.occurrence_number;\n    return result;\n  }\n}\n\n/**\n * An error indicating that a recurrence rule is invalid and produces no\n * occurrences.\n *\n * @extends {Error}\n * @class\n */\nclass InvalidRecurrenceRuleError extends Error {\n  constructor() {\n    super(\"Recurrence rule has no valid occurrences\");\n  }\n}\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n/**\n * This lets typescript resolve our custom types in the\n * generated d.ts files (jsdoc typedefs are converted to typescript types).\n * Ignore prevents the typedefs from being documented more than once.\n *\n * @ignore\n * @typedef {import(\"./types.js\").weekDay} weekDay\n * Imports the 'weekDay' type from the \"types.js\" module\n * @typedef {import(\"./types.js\").frequencyValues} frequencyValues\n * Imports the 'frequencyValues' type from the \"types.js\" module\n */\n\nconst VALID_DAY_NAMES = /^(SU|MO|TU|WE|TH|FR|SA)$/;\nconst VALID_BYDAY_PART = /^([+-])?(5[0-3]|[1-4][0-9]|[1-9])?(SU|MO|TU|WE|TH|FR|SA)$/;\nconst DOW_MAP = {\n  SU: Time.SUNDAY,\n  MO: Time.MONDAY,\n  TU: Time.TUESDAY,\n  WE: Time.WEDNESDAY,\n  TH: Time.THURSDAY,\n  FR: Time.FRIDAY,\n  SA: Time.SATURDAY\n};\nconst REVERSE_DOW_MAP = Object.fromEntries(Object.entries(DOW_MAP).map(entry => entry.reverse()));\nconst ALLOWED_FREQ = ['SECONDLY', 'MINUTELY', 'HOURLY', 'DAILY', 'WEEKLY', 'MONTHLY', 'YEARLY'];\n\n/**\n * This class represents the \"recur\" value type, used for example by RRULE. It provides methods to\n * calculate occurrences among others.\n *\n * @memberof ICAL\n */\nclass Recur {\n  /**\n   * Creates a new {@link ICAL.Recur} instance from the passed string.\n   *\n   * @param {String} string         The string to parse\n   * @return {Recur}                The created recurrence instance\n   */\n  static fromString(string) {\n    let data = this._stringToData(string, false);\n    return new Recur(data);\n  }\n\n  /**\n   * Creates a new {@link ICAL.Recur} instance using members from the passed\n   * data object.\n   *\n   * @param {Object} aData                              An object with members of the recurrence\n   * @param {frequencyValues=} aData.freq               The frequency value\n   * @param {Number=} aData.interval                    The INTERVAL value\n   * @param {weekDay=} aData.wkst                       The week start value\n   * @param {Time=} aData.until                         The end of the recurrence set\n   * @param {Number=} aData.count                       The number of occurrences\n   * @param {Array.<Number>=} aData.bysecond            The seconds for the BYSECOND part\n   * @param {Array.<Number>=} aData.byminute            The minutes for the BYMINUTE part\n   * @param {Array.<Number>=} aData.byhour              The hours for the BYHOUR part\n   * @param {Array.<String>=} aData.byday               The BYDAY values\n   * @param {Array.<Number>=} aData.bymonthday          The days for the BYMONTHDAY part\n   * @param {Array.<Number>=} aData.byyearday           The days for the BYYEARDAY part\n   * @param {Array.<Number>=} aData.byweekno            The weeks for the BYWEEKNO part\n   * @param {Array.<Number>=} aData.bymonth             The month for the BYMONTH part\n   * @param {Array.<Number>=} aData.bysetpos            The positionals for the BYSETPOS part\n   */\n  static fromData(aData) {\n    return new Recur(aData);\n  }\n\n  /**\n   * Converts a recurrence string to a data object, suitable for the fromData\n   * method.\n   *\n   * @private\n   * @param {String} string     The string to parse\n   * @param {Boolean} fmtIcal   If true, the string is considered to be an\n   *                              iCalendar string\n   * @return {Recur}            The recurrence instance\n   */\n  static _stringToData(string, fmtIcal) {\n    let dict = Object.create(null);\n\n    // split is slower in FF but fast enough.\n    // v8 however this is faster then manual split?\n    let values = string.split(';');\n    let len = values.length;\n    for (let i = 0; i < len; i++) {\n      let parts = values[i].split('=');\n      let ucname = parts[0].toUpperCase();\n      let lcname = parts[0].toLowerCase();\n      let name = fmtIcal ? lcname : ucname;\n      let value = parts[1];\n      if (ucname in partDesign) {\n        let partArr = value.split(',');\n        let partSet = new Set();\n        for (let part of partArr) {\n          partSet.add(partDesign[ucname](part));\n        }\n        partArr = [...partSet];\n        dict[name] = partArr.length == 1 ? partArr[0] : partArr;\n      } else if (ucname in optionDesign) {\n        optionDesign[ucname](value, dict, fmtIcal);\n      } else {\n        // Don't swallow unknown values. Just set them as they are.\n        dict[lcname] = value;\n      }\n    }\n    return dict;\n  }\n\n  /**\n   * Convert an ical representation of a day (SU, MO, etc..)\n   * into a numeric value of that day.\n   *\n   * @param {String} string     The iCalendar day name\n   * @param {weekDay=} aWeekStart\n   *        The week start weekday, defaults to SUNDAY\n   * @return {Number}           Numeric value of given day\n   */\n  static icalDayToNumericDay(string, aWeekStart) {\n    //XXX: this is here so we can deal\n    //     with possibly invalid string values.\n    let firstDow = aWeekStart || Time.SUNDAY;\n    return (DOW_MAP[string] - firstDow + 7) % 7 + 1;\n  }\n\n  /**\n   * Convert a numeric day value into its ical representation (SU, MO, etc..)\n   *\n   * @param {Number} num        Numeric value of given day\n   * @param {weekDay=} aWeekStart\n   *        The week start weekday, defaults to SUNDAY\n   * @return {String}           The ICAL day value, e.g SU,MO,...\n   */\n  static numericDayToIcalDay(num, aWeekStart) {\n    //XXX: this is here so we can deal with possibly invalid number values.\n    //     Also, this allows consistent mapping between day numbers and day\n    //     names for external users.\n    let firstDow = aWeekStart || Time.SUNDAY;\n    let dow = num + firstDow - Time.SUNDAY;\n    if (dow > 7) {\n      dow -= 7;\n    }\n    return REVERSE_DOW_MAP[dow];\n  }\n\n  /**\n   * Create a new instance of the Recur class.\n   *\n   * @param {Object} data                               An object with members of the recurrence\n   * @param {frequencyValues=} data.freq                The frequency value\n   * @param {Number=} data.interval                     The INTERVAL value\n   * @param {weekDay=} data.wkst                        The week start value\n   * @param {Time=} data.until                          The end of the recurrence set\n   * @param {Number=} data.count                        The number of occurrences\n   * @param {Array.<Number>=} data.bysecond             The seconds for the BYSECOND part\n   * @param {Array.<Number>=} data.byminute             The minutes for the BYMINUTE part\n   * @param {Array.<Number>=} data.byhour               The hours for the BYHOUR part\n   * @param {Array.<String>=} data.byday                The BYDAY values\n   * @param {Array.<Number>=} data.bymonthday           The days for the BYMONTHDAY part\n   * @param {Array.<Number>=} data.byyearday            The days for the BYYEARDAY part\n   * @param {Array.<Number>=} data.byweekno             The weeks for the BYWEEKNO part\n   * @param {Array.<Number>=} data.bymonth              The month for the BYMONTH part\n   * @param {Array.<Number>=} data.bysetpos             The positionals for the BYSETPOS part\n   */\n  constructor(data) {\n    this.wrappedJSObject = this;\n    this.parts = {};\n    if (data && typeof data === 'object') {\n      this.fromData(data);\n    }\n  }\n\n  /**\n   * An object holding the BY-parts of the recurrence rule\n   * @memberof ICAL.Recur\n   * @typedef {Object} byParts\n   * @property {Array.<Number>=} BYSECOND            The seconds for the BYSECOND part\n   * @property {Array.<Number>=} BYMINUTE            The minutes for the BYMINUTE part\n   * @property {Array.<Number>=} BYHOUR              The hours for the BYHOUR part\n   * @property {Array.<String>=} BYDAY               The BYDAY values\n   * @property {Array.<Number>=} BYMONTHDAY          The days for the BYMONTHDAY part\n   * @property {Array.<Number>=} BYYEARDAY           The days for the BYYEARDAY part\n   * @property {Array.<Number>=} BYWEEKNO            The weeks for the BYWEEKNO part\n   * @property {Array.<Number>=} BYMONTH             The month for the BYMONTH part\n   * @property {Array.<Number>=} BYSETPOS            The positionals for the BYSETPOS part\n   */\n\n  /**\n   * An object holding the BY-parts of the recurrence rule\n   * @type {byParts}\n   */\n  parts = null;\n\n  /**\n   * The interval value for the recurrence rule.\n   * @type {Number}\n   */\n  interval = 1;\n\n  /**\n   * The week start day\n   *\n   * @type {weekDay}\n   * @default ICAL.Time.MONDAY\n   */\n  wkst = Time.MONDAY;\n\n  /**\n   * The end of the recurrence\n   * @type {?Time}\n   */\n  until = null;\n\n  /**\n   * The maximum number of occurrences\n   * @type {?Number}\n   */\n  count = null;\n\n  /**\n   * The frequency value.\n   * @type {frequencyValues}\n   */\n  freq = null;\n\n  /**\n   * The class identifier.\n   * @constant\n   * @type {String}\n   * @default \"icalrecur\"\n   */\n  icalclass = \"icalrecur\";\n\n  /**\n   * The type name, to be used in the jCal object.\n   * @constant\n   * @type {String}\n   * @default \"recur\"\n   */\n  icaltype = \"recur\";\n\n  /**\n   * Create a new iterator for this recurrence rule. The passed start date\n   * must be the start date of the event, not the start of the range to\n   * search in.\n   *\n   * @example\n   * let recur = comp.getFirstPropertyValue('rrule');\n   * let dtstart = comp.getFirstPropertyValue('dtstart');\n   * let iter = recur.iterator(dtstart);\n   * for (let next = iter.next(); next; next = iter.next()) {\n   *   if (next.compare(rangeStart) < 0) {\n   *     continue;\n   *   }\n   *   console.log(next.toString());\n   * }\n   *\n   * @param {Time} aStart        The item's start date\n   * @return {RecurIterator}     The recurrence iterator\n   */\n  iterator(aStart) {\n    return new RecurIterator({\n      rule: this,\n      dtstart: aStart\n    });\n  }\n\n  /**\n   * Returns a clone of the recurrence object.\n   *\n   * @return {Recur}      The cloned object\n   */\n  clone() {\n    return new Recur(this.toJSON());\n  }\n\n  /**\n   * Checks if the current rule is finite, i.e. has a count or until part.\n   *\n   * @return {Boolean}        True, if the rule is finite\n   */\n  isFinite() {\n    return !!(this.count || this.until);\n  }\n\n  /**\n   * Checks if the current rule has a count part, and not limited by an until\n   * part.\n   *\n   * @return {Boolean}        True, if the rule is by count\n   */\n  isByCount() {\n    return !!(this.count && !this.until);\n  }\n\n  /**\n   * Adds a component (part) to the recurrence rule. This is not a component\n   * in the sense of {@link ICAL.Component}, but a part of the recurrence\n   * rule, i.e. BYMONTH.\n   *\n   * @param {String} aType            The name of the component part\n   * @param {Array|String} aValue     The component value\n   */\n  addComponent(aType, aValue) {\n    let ucname = aType.toUpperCase();\n    if (ucname in this.parts) {\n      this.parts[ucname].push(aValue);\n    } else {\n      this.parts[ucname] = [aValue];\n    }\n  }\n\n  /**\n   * Sets the component value for the given by-part.\n   *\n   * @param {String} aType        The component part name\n   * @param {Array} aValues       The component values\n   */\n  setComponent(aType, aValues) {\n    this.parts[aType.toUpperCase()] = aValues.slice();\n  }\n\n  /**\n   * Gets (a copy) of the requested component value.\n   *\n   * @param {String} aType        The component part name\n   * @return {Array}              The component part value\n   */\n  getComponent(aType) {\n    let ucname = aType.toUpperCase();\n    return ucname in this.parts ? this.parts[ucname].slice() : [];\n  }\n\n  /**\n   * Retrieves the next occurrence after the given recurrence id. See the\n   * guide on {@tutorial terminology} for more details.\n   *\n   * NOTE: Currently, this method iterates all occurrences from the start\n   * date. It should not be called in a loop for performance reasons. If you\n   * would like to get more than one occurrence, you can iterate the\n   * occurrences manually, see the example on the\n   * {@link ICAL.Recur#iterator iterator} method.\n   *\n   * @param {Time} aStartTime        The start of the event series\n   * @param {Time} aRecurrenceId     The date of the last occurrence\n   * @return {Time}                  The next occurrence after\n   */\n  getNextOccurrence(aStartTime, aRecurrenceId) {\n    let iter = this.iterator(aStartTime);\n    let next;\n    do {\n      next = iter.next();\n    } while (next && next.compare(aRecurrenceId) <= 0);\n    if (next && aRecurrenceId.zone) {\n      next.zone = aRecurrenceId.zone;\n    }\n    return next;\n  }\n\n  /**\n   * Sets up the current instance using members from the passed data object.\n   *\n   * @param {Object} data                               An object with members of the recurrence\n   * @param {frequencyValues=} data.freq                The frequency value\n   * @param {Number=} data.interval                     The INTERVAL value\n   * @param {weekDay=} data.wkst                        The week start value\n   * @param {Time=} data.until                          The end of the recurrence set\n   * @param {Number=} data.count                        The number of occurrences\n   * @param {Array.<Number>=} data.bysecond             The seconds for the BYSECOND part\n   * @param {Array.<Number>=} data.byminute             The minutes for the BYMINUTE part\n   * @param {Array.<Number>=} data.byhour               The hours for the BYHOUR part\n   * @param {Array.<String>=} data.byday                The BYDAY values\n   * @param {Array.<Number>=} data.bymonthday           The days for the BYMONTHDAY part\n   * @param {Array.<Number>=} data.byyearday            The days for the BYYEARDAY part\n   * @param {Array.<Number>=} data.byweekno             The weeks for the BYWEEKNO part\n   * @param {Array.<Number>=} data.bymonth              The month for the BYMONTH part\n   * @param {Array.<Number>=} data.bysetpos             The positionals for the BYSETPOS part\n   */\n  fromData(data) {\n    for (let key in data) {\n      let uckey = key.toUpperCase();\n      if (uckey in partDesign) {\n        if (Array.isArray(data[key])) {\n          this.parts[uckey] = data[key];\n        } else {\n          this.parts[uckey] = [data[key]];\n        }\n      } else {\n        this[key] = data[key];\n      }\n    }\n    if (this.interval && typeof this.interval != \"number\") {\n      optionDesign.INTERVAL(this.interval, this);\n    }\n    if (this.wkst && typeof this.wkst != \"number\") {\n      this.wkst = Recur.icalDayToNumericDay(this.wkst);\n    }\n    if (this.until && !(this.until instanceof Time)) {\n      this.until = Time.fromString(this.until);\n    }\n  }\n\n  /**\n   * The jCal representation of this recurrence type.\n   * @return {Object}\n   */\n  toJSON() {\n    let res = Object.create(null);\n    res.freq = this.freq;\n    if (this.count) {\n      res.count = this.count;\n    }\n    if (this.interval > 1) {\n      res.interval = this.interval;\n    }\n    for (let [k, kparts] of Object.entries(this.parts)) {\n      if (Array.isArray(kparts) && kparts.length == 1) {\n        res[k.toLowerCase()] = kparts[0];\n      } else {\n        res[k.toLowerCase()] = clone(kparts);\n      }\n    }\n    if (this.until) {\n      res.until = this.until.toString();\n    }\n    if ('wkst' in this && this.wkst !== Time.DEFAULT_WEEK_START) {\n      res.wkst = Recur.numericDayToIcalDay(this.wkst);\n    }\n    return res;\n  }\n\n  /**\n   * The string representation of this recurrence rule.\n   * @return {String}\n   */\n  toString() {\n    // TODO retain order\n    let str = \"FREQ=\" + this.freq;\n    if (this.count) {\n      str += \";COUNT=\" + this.count;\n    }\n    if (this.interval > 1) {\n      str += \";INTERVAL=\" + this.interval;\n    }\n    for (let [k, v] of Object.entries(this.parts)) {\n      str += \";\" + k + \"=\" + v;\n    }\n    if (this.until) {\n      str += ';UNTIL=' + this.until.toICALString();\n    }\n    if ('wkst' in this && this.wkst !== Time.DEFAULT_WEEK_START) {\n      str += ';WKST=' + Recur.numericDayToIcalDay(this.wkst);\n    }\n    return str;\n  }\n}\nfunction parseNumericValue(type, min, max, value) {\n  let result = value;\n  if (value[0] === '+') {\n    result = value.slice(1);\n  }\n  result = strictParseInt(result);\n  if (min !== undefined && value < min) {\n    throw new Error(type + ': invalid value \"' + value + '\" must be > ' + min);\n  }\n  if (max !== undefined && value > max) {\n    throw new Error(type + ': invalid value \"' + value + '\" must be < ' + min);\n  }\n  return result;\n}\nconst optionDesign = {\n  FREQ: function (value, dict, fmtIcal) {\n    // yes this is actually equal or faster then regex.\n    // upside here is we can enumerate the valid values.\n    if (ALLOWED_FREQ.indexOf(value) !== -1) {\n      dict.freq = value;\n    } else {\n      throw new Error('invalid frequency \"' + value + '\" expected: \"' + ALLOWED_FREQ.join(', ') + '\"');\n    }\n  },\n  COUNT: function (value, dict, fmtIcal) {\n    dict.count = strictParseInt(value);\n  },\n  INTERVAL: function (value, dict, fmtIcal) {\n    dict.interval = strictParseInt(value);\n    if (dict.interval < 1) {\n      // 0 or negative values are not allowed, some engines seem to generate\n      // it though. Assume 1 instead.\n      dict.interval = 1;\n    }\n  },\n  UNTIL: function (value, dict, fmtIcal) {\n    if (value.length > 10) {\n      dict.until = design$1.icalendar.value['date-time'].fromICAL(value);\n    } else {\n      dict.until = design$1.icalendar.value.date.fromICAL(value);\n    }\n    if (!fmtIcal) {\n      dict.until = Time.fromString(dict.until);\n    }\n  },\n  WKST: function (value, dict, fmtIcal) {\n    if (VALID_DAY_NAMES.test(value)) {\n      dict.wkst = Recur.icalDayToNumericDay(value);\n    } else {\n      throw new Error('invalid WKST value \"' + value + '\"');\n    }\n  }\n};\nconst partDesign = {\n  BYSECOND: parseNumericValue.bind(undefined, 'BYSECOND', 0, 60),\n  BYMINUTE: parseNumericValue.bind(undefined, 'BYMINUTE', 0, 59),\n  BYHOUR: parseNumericValue.bind(undefined, 'BYHOUR', 0, 23),\n  BYDAY: function (value) {\n    if (VALID_BYDAY_PART.test(value)) {\n      return value;\n    } else {\n      throw new Error('invalid BYDAY value \"' + value + '\"');\n    }\n  },\n  BYMONTHDAY: parseNumericValue.bind(undefined, 'BYMONTHDAY', -31, 31),\n  BYYEARDAY: parseNumericValue.bind(undefined, 'BYYEARDAY', -366, 366),\n  BYWEEKNO: parseNumericValue.bind(undefined, 'BYWEEKNO', -53, 53),\n  BYMONTH: parseNumericValue.bind(undefined, 'BYMONTH', 1, 12),\n  BYSETPOS: parseNumericValue.bind(undefined, 'BYSETPOS', -366, 366)\n};\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n/**\n * This lets typescript resolve our custom types in the\n * generated d.ts files (jsdoc typedefs are converted to typescript types).\n * Ignore prevents the typedefs from being documented more than once.\n * @ignore\n * @typedef {import(\"./types.js\").jCalComponent} jCalComponent\n * Imports the 'occurrenceDetails' type from the \"types.js\" module\n */\n\n/**\n * This class represents the \"period\" value type, with various calculation and manipulation methods.\n *\n * @memberof ICAL\n */\nclass Period {\n  /**\n   * Creates a new {@link ICAL.Period} instance from the passed string.\n   *\n   * @param {String} str            The string to parse\n   * @param {Property} prop         The property this period will be on\n   * @return {Period}               The created period instance\n   */\n  static fromString(str, prop) {\n    let parts = str.split('/');\n    if (parts.length !== 2) {\n      throw new Error('Invalid string value: \"' + str + '\" must contain a \"/\" char.');\n    }\n    let options = {\n      start: Time.fromDateTimeString(parts[0], prop)\n    };\n    let end = parts[1];\n    if (Duration.isValueString(end)) {\n      options.duration = Duration.fromString(end);\n    } else {\n      options.end = Time.fromDateTimeString(end, prop);\n    }\n    return new Period(options);\n  }\n\n  /**\n   * Creates a new {@link ICAL.Period} instance from the given data object.\n   * The passed data object cannot contain both and end date and a duration.\n   *\n   * @param {Object} aData                  An object with members of the period\n   * @param {Time=} aData.start             The start of the period\n   * @param {Time=} aData.end               The end of the period\n   * @param {Duration=} aData.duration      The duration of the period\n   * @return {Period}                       The period instance\n   */\n  static fromData(aData) {\n    return new Period(aData);\n  }\n\n  /**\n   * Returns a new period instance from the given jCal data array. The first\n   * member is always the start date string, the second member is either a\n   * duration or end date string.\n   *\n   * @param {jCalComponent} aData           The jCal data array\n   * @param {Property} aProp                The property this jCal data is on\n   * @param {Boolean} aLenient              If true, data value can be both date and date-time\n   * @return {Period}                       The period instance\n   */\n  static fromJSON(aData, aProp, aLenient) {\n    function fromDateOrDateTimeString(aValue, dateProp) {\n      if (aLenient) {\n        return Time.fromString(aValue, dateProp);\n      } else {\n        return Time.fromDateTimeString(aValue, dateProp);\n      }\n    }\n    if (Duration.isValueString(aData[1])) {\n      return Period.fromData({\n        start: fromDateOrDateTimeString(aData[0], aProp),\n        duration: Duration.fromString(aData[1])\n      });\n    } else {\n      return Period.fromData({\n        start: fromDateOrDateTimeString(aData[0], aProp),\n        end: fromDateOrDateTimeString(aData[1], aProp)\n      });\n    }\n  }\n\n  /**\n   * Creates a new ICAL.Period instance. The passed data object cannot contain both and end date and\n   * a duration.\n   *\n   * @param {Object} aData                  An object with members of the period\n   * @param {Time=} aData.start             The start of the period\n   * @param {Time=} aData.end               The end of the period\n   * @param {Duration=} aData.duration      The duration of the period\n   */\n  constructor(aData) {\n    this.wrappedJSObject = this;\n    if (aData && 'start' in aData) {\n      if (aData.start && !(aData.start instanceof Time)) {\n        throw new TypeError('.start must be an instance of ICAL.Time');\n      }\n      this.start = aData.start;\n    }\n    if (aData && aData.end && aData.duration) {\n      throw new Error('cannot accept both end and duration');\n    }\n    if (aData && 'end' in aData) {\n      if (aData.end && !(aData.end instanceof Time)) {\n        throw new TypeError('.end must be an instance of ICAL.Time');\n      }\n      this.end = aData.end;\n    }\n    if (aData && 'duration' in aData) {\n      if (aData.duration && !(aData.duration instanceof Duration)) {\n        throw new TypeError('.duration must be an instance of ICAL.Duration');\n      }\n      this.duration = aData.duration;\n    }\n  }\n\n  /**\n   * The start of the period\n   * @type {Time}\n   */\n  start = null;\n\n  /**\n   * The end of the period\n   * @type {Time}\n   */\n  end = null;\n\n  /**\n   * The duration of the period\n   * @type {Duration}\n   */\n  duration = null;\n\n  /**\n   * The class identifier.\n   * @constant\n   * @type {String}\n   * @default \"icalperiod\"\n   */\n  icalclass = \"icalperiod\";\n\n  /**\n   * The type name, to be used in the jCal object.\n   * @constant\n   * @type {String}\n   * @default \"period\"\n   */\n  icaltype = \"period\";\n\n  /**\n   * Returns a clone of the duration object.\n   *\n   * @return {Period}      The cloned object\n   */\n  clone() {\n    return Period.fromData({\n      start: this.start ? this.start.clone() : null,\n      end: this.end ? this.end.clone() : null,\n      duration: this.duration ? this.duration.clone() : null\n    });\n  }\n\n  /**\n   * Calculates the duration of the period, either directly or by subtracting\n   * start from end date.\n   *\n   * @return {Duration}      The calculated duration\n   */\n  getDuration() {\n    if (this.duration) {\n      return this.duration;\n    } else {\n      return this.end.subtractDate(this.start);\n    }\n  }\n\n  /**\n   * Calculates the end date of the period, either directly or by adding\n   * duration to start date.\n   *\n   * @return {Time}          The calculated end date\n   */\n  getEnd() {\n    if (this.end) {\n      return this.end;\n    } else {\n      let end = this.start.clone();\n      end.addDuration(this.duration);\n      return end;\n    }\n  }\n\n  /**\n   * The string representation of this period.\n   * @return {String}\n   */\n  toString() {\n    return this.start + \"/\" + (this.end || this.duration);\n  }\n\n  /**\n   * The jCal representation of this period type.\n   * @return {Object}\n   */\n  toJSON() {\n    return [this.start.toString(), (this.end || this.duration).toString()];\n  }\n\n  /**\n   * The iCalendar string representation of this period.\n   * @return {String}\n   */\n  toICALString() {\n    return this.start.toICALString() + \"/\" + (this.end || this.duration).toICALString();\n  }\n}\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n/**\n * This lets typescript resolve our custom types in the\n * generated d.ts files (jsdoc typedefs are converted to typescript types).\n * Ignore prevents the typedefs from being documented more than once.\n * @ignore\n * @typedef {import(\"./types.js\").designSet} designSet\n * Imports the 'designSet' type from the \"types.js\" module\n */\n\n/** @module ICAL.design */\n\nconst FROM_ICAL_NEWLINE = /\\\\\\\\|\\\\;|\\\\,|\\\\[Nn]/g;\nconst TO_ICAL_NEWLINE = /\\\\|;|,|\\n/g;\nconst FROM_VCARD_NEWLINE = /\\\\\\\\|\\\\,|\\\\[Nn]/g;\nconst TO_VCARD_NEWLINE = /\\\\|,|\\n/g;\nfunction createTextType(fromNewline, toNewline) {\n  let result = {\n    matches: /.*/,\n    fromICAL: function (aValue, structuredEscape) {\n      return replaceNewline(aValue, fromNewline, structuredEscape);\n    },\n    toICAL: function (aValue, structuredEscape) {\n      let regEx = toNewline;\n      if (structuredEscape) regEx = new RegExp(regEx.source + '|' + structuredEscape, regEx.flags);\n      return aValue.replace(regEx, function (str) {\n        switch (str) {\n          case \"\\\\\":\n            return \"\\\\\\\\\";\n          case \";\":\n            return \"\\\\;\";\n          case \",\":\n            return \"\\\\,\";\n          case \"\\n\":\n            return \"\\\\n\";\n          /* c8 ignore next 2 */\n          default:\n            return str;\n        }\n      });\n    }\n  };\n  return result;\n}\n\n// default types used multiple times\nconst DEFAULT_TYPE_TEXT = {\n  defaultType: \"text\"\n};\nconst DEFAULT_TYPE_TEXT_MULTI = {\n  defaultType: \"text\",\n  multiValue: \",\"\n};\nconst DEFAULT_TYPE_TEXT_STRUCTURED = {\n  defaultType: \"text\",\n  structuredValue: \";\"\n};\nconst DEFAULT_TYPE_INTEGER = {\n  defaultType: \"integer\"\n};\nconst DEFAULT_TYPE_DATETIME_DATE = {\n  defaultType: \"date-time\",\n  allowedTypes: [\"date-time\", \"date\"]\n};\nconst DEFAULT_TYPE_DATETIME = {\n  defaultType: \"date-time\"\n};\nconst DEFAULT_TYPE_URI = {\n  defaultType: \"uri\"\n};\nconst DEFAULT_TYPE_UTCOFFSET = {\n  defaultType: \"utc-offset\"\n};\nconst DEFAULT_TYPE_RECUR = {\n  defaultType: \"recur\"\n};\nconst DEFAULT_TYPE_DATE_ANDOR_TIME = {\n  defaultType: \"date-and-or-time\",\n  allowedTypes: [\"date-time\", \"date\", \"text\"]\n};\nfunction replaceNewlineReplace(string) {\n  switch (string) {\n    case \"\\\\\\\\\":\n      return \"\\\\\";\n    case \"\\\\;\":\n      return \";\";\n    case \"\\\\,\":\n      return \",\";\n    case \"\\\\n\":\n    case \"\\\\N\":\n      return \"\\n\";\n    /* c8 ignore next 2 */\n    default:\n      return string;\n  }\n}\nfunction replaceNewline(value, newline, structuredEscape) {\n  // avoid regex when possible.\n  if (value.indexOf('\\\\') === -1) {\n    return value;\n  }\n  if (structuredEscape) newline = new RegExp(newline.source + '|\\\\\\\\' + structuredEscape, newline.flags);\n  return value.replace(newline, replaceNewlineReplace);\n}\nlet commonProperties = {\n  \"categories\": DEFAULT_TYPE_TEXT_MULTI,\n  \"url\": DEFAULT_TYPE_URI,\n  \"version\": DEFAULT_TYPE_TEXT,\n  \"uid\": DEFAULT_TYPE_TEXT\n};\nlet commonValues = {\n  \"boolean\": {\n    values: [\"TRUE\", \"FALSE\"],\n    fromICAL: function (aValue) {\n      switch (aValue) {\n        case 'TRUE':\n          return true;\n        case 'FALSE':\n          return false;\n        default:\n          //TODO: parser warning\n          return false;\n      }\n    },\n    toICAL: function (aValue) {\n      if (aValue) {\n        return 'TRUE';\n      }\n      return 'FALSE';\n    }\n  },\n  float: {\n    matches: /^[+-]?\\d+\\.\\d+$/,\n    fromICAL: function (aValue) {\n      let parsed = parseFloat(aValue);\n      if (isStrictlyNaN(parsed)) {\n        // TODO: parser warning\n        return 0.0;\n      }\n      return parsed;\n    },\n    toICAL: function (aValue) {\n      return String(aValue);\n    }\n  },\n  integer: {\n    fromICAL: function (aValue) {\n      let parsed = parseInt(aValue);\n      if (isStrictlyNaN(parsed)) {\n        return 0;\n      }\n      return parsed;\n    },\n    toICAL: function (aValue) {\n      return String(aValue);\n    }\n  },\n  \"utc-offset\": {\n    toICAL: function (aValue) {\n      if (aValue.length < 7) {\n        // no seconds\n        // -0500\n        return aValue.slice(0, 3) + aValue.slice(4, 6);\n      } else {\n        // seconds\n        // -050000\n        return aValue.slice(0, 3) + aValue.slice(4, 6) + aValue.slice(7, 9);\n      }\n    },\n    fromICAL: function (aValue) {\n      if (aValue.length < 6) {\n        // no seconds\n        // -05:00\n        return aValue.slice(0, 3) + ':' + aValue.slice(3, 5);\n      } else {\n        // seconds\n        // -05:00:00\n        return aValue.slice(0, 3) + ':' + aValue.slice(3, 5) + ':' + aValue.slice(5, 7);\n      }\n    },\n    decorate: function (aValue) {\n      return UtcOffset.fromString(aValue);\n    },\n    undecorate: function (aValue) {\n      return aValue.toString();\n    }\n  }\n};\nlet icalParams = {\n  // Although the syntax is DQUOTE uri DQUOTE, I don't think we should\n  // enforce anything aside from it being a valid content line.\n  //\n  // At least some params require - if multi values are used - DQUOTEs\n  // for each of its values - e.g. delegated-from=\"uri1\",\"uri2\"\n  // To indicate this, I introduced the new k/v pair\n  // multiValueSeparateDQuote: true\n  //\n  // \"ALTREP\": { ... },\n\n  // CN just wants a param-value\n  // \"CN\": { ... }\n\n  \"cutype\": {\n    values: [\"INDIVIDUAL\", \"GROUP\", \"RESOURCE\", \"ROOM\", \"UNKNOWN\"],\n    allowXName: true,\n    allowIanaToken: true\n  },\n  \"delegated-from\": {\n    valueType: \"cal-address\",\n    multiValue: \",\",\n    multiValueSeparateDQuote: true\n  },\n  \"delegated-to\": {\n    valueType: \"cal-address\",\n    multiValue: \",\",\n    multiValueSeparateDQuote: true\n  },\n  // \"DIR\": { ... }, // See ALTREP\n  \"encoding\": {\n    values: [\"8BIT\", \"BASE64\"]\n  },\n  // \"FMTTYPE\": { ... }, // See ALTREP\n  \"fbtype\": {\n    values: [\"FREE\", \"BUSY\", \"BUSY-UNAVAILABLE\", \"BUSY-TENTATIVE\"],\n    allowXName: true,\n    allowIanaToken: true\n  },\n  // \"LANGUAGE\": { ... }, // See ALTREP\n  \"member\": {\n    valueType: \"cal-address\",\n    multiValue: \",\",\n    multiValueSeparateDQuote: true\n  },\n  \"partstat\": {\n    // TODO These values are actually different per-component\n    values: [\"NEEDS-ACTION\", \"ACCEPTED\", \"DECLINED\", \"TENTATIVE\", \"DELEGATED\", \"COMPLETED\", \"IN-PROCESS\"],\n    allowXName: true,\n    allowIanaToken: true\n  },\n  \"range\": {\n    values: [\"THISANDFUTURE\"]\n  },\n  \"related\": {\n    values: [\"START\", \"END\"]\n  },\n  \"reltype\": {\n    values: [\"PARENT\", \"CHILD\", \"SIBLING\"],\n    allowXName: true,\n    allowIanaToken: true\n  },\n  \"role\": {\n    values: [\"REQ-PARTICIPANT\", \"CHAIR\", \"OPT-PARTICIPANT\", \"NON-PARTICIPANT\"],\n    allowXName: true,\n    allowIanaToken: true\n  },\n  \"rsvp\": {\n    values: [\"TRUE\", \"FALSE\"]\n  },\n  \"sent-by\": {\n    valueType: \"cal-address\"\n  },\n  \"tzid\": {\n    matches: /^\\//\n  },\n  \"value\": {\n    // since the value here is a 'type' lowercase is used.\n    values: [\"binary\", \"boolean\", \"cal-address\", \"date\", \"date-time\", \"duration\", \"float\", \"integer\", \"period\", \"recur\", \"text\", \"time\", \"uri\", \"utc-offset\"],\n    allowXName: true,\n    allowIanaToken: true\n  }\n};\n\n// When adding a value here, be sure to add it to the parameter types!\nconst icalValues = extend(commonValues, {\n  text: createTextType(FROM_ICAL_NEWLINE, TO_ICAL_NEWLINE),\n  uri: {\n    // TODO\n    /* ... */\n  },\n  \"binary\": {\n    decorate: function (aString) {\n      return Binary.fromString(aString);\n    },\n    undecorate: function (aBinary) {\n      return aBinary.toString();\n    }\n  },\n  \"cal-address\": {\n    // needs to be an uri\n  },\n  \"date\": {\n    decorate: function (aValue, aProp) {\n      if (design.strict) {\n        return Time.fromDateString(aValue, aProp);\n      } else {\n        return Time.fromString(aValue, aProp);\n      }\n    },\n    /**\n     * undecorates a time object.\n     */\n    undecorate: function (aValue) {\n      return aValue.toString();\n    },\n    fromICAL: function (aValue) {\n      // from: 20120901\n      // to: 2012-09-01\n      if (!design.strict && aValue.length >= 15) {\n        // This is probably a date-time, e.g. 20120901T130000Z\n        return icalValues[\"date-time\"].fromICAL(aValue);\n      } else {\n        return aValue.slice(0, 4) + '-' + aValue.slice(4, 6) + '-' + aValue.slice(6, 8);\n      }\n    },\n    toICAL: function (aValue) {\n      // from: 2012-09-01\n      // to: 20120901\n      let len = aValue.length;\n      if (len == 10) {\n        return aValue.slice(0, 4) + aValue.slice(5, 7) + aValue.slice(8, 10);\n      } else if (len >= 19) {\n        return icalValues[\"date-time\"].toICAL(aValue);\n      } else {\n        //TODO: serialize warning?\n        return aValue;\n      }\n    }\n  },\n  \"date-time\": {\n    fromICAL: function (aValue) {\n      // from: 20120901T130000\n      // to: 2012-09-01T13:00:00\n      if (!design.strict && aValue.length == 8) {\n        // This is probably a date, e.g. 20120901\n        return icalValues.date.fromICAL(aValue);\n      } else {\n        let result = aValue.slice(0, 4) + '-' + aValue.slice(4, 6) + '-' + aValue.slice(6, 8) + 'T' + aValue.slice(9, 11) + ':' + aValue.slice(11, 13) + ':' + aValue.slice(13, 15);\n        if (aValue[15] && aValue[15] === 'Z') {\n          result += 'Z';\n        }\n        return result;\n      }\n    },\n    toICAL: function (aValue) {\n      // from: 2012-09-01T13:00:00\n      // to: 20120901T130000\n      let len = aValue.length;\n      if (len == 10 && !design.strict) {\n        return icalValues.date.toICAL(aValue);\n      } else if (len >= 19) {\n        let result = aValue.slice(0, 4) + aValue.slice(5, 7) +\n        // grab the (DDTHH) segment\n        aValue.slice(8, 13) +\n        // MM\n        aValue.slice(14, 16) +\n        // SS\n        aValue.slice(17, 19);\n        if (aValue[19] && aValue[19] === 'Z') {\n          result += 'Z';\n        }\n        return result;\n      } else {\n        // TODO: error\n        return aValue;\n      }\n    },\n    decorate: function (aValue, aProp) {\n      if (design.strict) {\n        return Time.fromDateTimeString(aValue, aProp);\n      } else {\n        return Time.fromString(aValue, aProp);\n      }\n    },\n    undecorate: function (aValue) {\n      return aValue.toString();\n    }\n  },\n  duration: {\n    decorate: function (aValue) {\n      return Duration.fromString(aValue);\n    },\n    undecorate: function (aValue) {\n      return aValue.toString();\n    }\n  },\n  period: {\n    fromICAL: function (string) {\n      let parts = string.split('/');\n      parts[0] = icalValues['date-time'].fromICAL(parts[0]);\n      if (!Duration.isValueString(parts[1])) {\n        parts[1] = icalValues['date-time'].fromICAL(parts[1]);\n      }\n      return parts;\n    },\n    toICAL: function (parts) {\n      parts = parts.slice();\n      if (!design.strict && parts[0].length == 10) {\n        parts[0] = icalValues.date.toICAL(parts[0]);\n      } else {\n        parts[0] = icalValues['date-time'].toICAL(parts[0]);\n      }\n      if (!Duration.isValueString(parts[1])) {\n        if (!design.strict && parts[1].length == 10) {\n          parts[1] = icalValues.date.toICAL(parts[1]);\n        } else {\n          parts[1] = icalValues['date-time'].toICAL(parts[1]);\n        }\n      }\n      return parts.join(\"/\");\n    },\n    decorate: function (aValue, aProp) {\n      return Period.fromJSON(aValue, aProp, !design.strict);\n    },\n    undecorate: function (aValue) {\n      return aValue.toJSON();\n    }\n  },\n  recur: {\n    fromICAL: function (string) {\n      return Recur._stringToData(string, true);\n    },\n    toICAL: function (data) {\n      let str = \"\";\n      for (let [k, val] of Object.entries(data)) {\n        if (k == \"until\") {\n          if (val.length > 10) {\n            val = icalValues['date-time'].toICAL(val);\n          } else {\n            val = icalValues.date.toICAL(val);\n          }\n        } else if (k == \"wkst\") {\n          if (typeof val === 'number') {\n            val = Recur.numericDayToIcalDay(val);\n          }\n        } else if (Array.isArray(val)) {\n          val = val.join(\",\");\n        }\n        str += k.toUpperCase() + \"=\" + val + \";\";\n      }\n      return str.slice(0, Math.max(0, str.length - 1));\n    },\n    decorate: function decorate(aValue) {\n      return Recur.fromData(aValue);\n    },\n    undecorate: function (aRecur) {\n      return aRecur.toJSON();\n    }\n  },\n  time: {\n    fromICAL: function (aValue) {\n      // from: MMHHSS(Z)?\n      // to: HH:MM:SS(Z)?\n      if (aValue.length < 6) {\n        // TODO: parser exception?\n        return aValue;\n      }\n\n      // HH::MM::SSZ?\n      let result = aValue.slice(0, 2) + ':' + aValue.slice(2, 4) + ':' + aValue.slice(4, 6);\n      if (aValue[6] === 'Z') {\n        result += 'Z';\n      }\n      return result;\n    },\n    toICAL: function (aValue) {\n      // from: HH:MM:SS(Z)?\n      // to: MMHHSS(Z)?\n      if (aValue.length < 8) {\n        //TODO: error\n        return aValue;\n      }\n      let result = aValue.slice(0, 2) + aValue.slice(3, 5) + aValue.slice(6, 8);\n      if (aValue[8] === 'Z') {\n        result += 'Z';\n      }\n      return result;\n    }\n  }\n});\nlet icalProperties = extend(commonProperties, {\n  \"action\": DEFAULT_TYPE_TEXT,\n  \"attach\": {\n    defaultType: \"uri\"\n  },\n  \"attendee\": {\n    defaultType: \"cal-address\"\n  },\n  \"calscale\": DEFAULT_TYPE_TEXT,\n  \"class\": DEFAULT_TYPE_TEXT,\n  \"comment\": DEFAULT_TYPE_TEXT,\n  \"completed\": DEFAULT_TYPE_DATETIME,\n  \"contact\": DEFAULT_TYPE_TEXT,\n  \"created\": DEFAULT_TYPE_DATETIME,\n  \"description\": DEFAULT_TYPE_TEXT,\n  \"dtend\": DEFAULT_TYPE_DATETIME_DATE,\n  \"dtstamp\": DEFAULT_TYPE_DATETIME,\n  \"dtstart\": DEFAULT_TYPE_DATETIME_DATE,\n  \"due\": DEFAULT_TYPE_DATETIME_DATE,\n  \"duration\": {\n    defaultType: \"duration\"\n  },\n  \"exdate\": {\n    defaultType: \"date-time\",\n    allowedTypes: [\"date-time\", \"date\"],\n    multiValue: ','\n  },\n  \"exrule\": DEFAULT_TYPE_RECUR,\n  \"freebusy\": {\n    defaultType: \"period\",\n    multiValue: \",\"\n  },\n  \"geo\": {\n    defaultType: \"float\",\n    structuredValue: \";\"\n  },\n  \"last-modified\": DEFAULT_TYPE_DATETIME,\n  \"location\": DEFAULT_TYPE_TEXT,\n  \"method\": DEFAULT_TYPE_TEXT,\n  \"organizer\": {\n    defaultType: \"cal-address\"\n  },\n  \"percent-complete\": DEFAULT_TYPE_INTEGER,\n  \"priority\": DEFAULT_TYPE_INTEGER,\n  \"prodid\": DEFAULT_TYPE_TEXT,\n  \"related-to\": DEFAULT_TYPE_TEXT,\n  \"repeat\": DEFAULT_TYPE_INTEGER,\n  \"rdate\": {\n    defaultType: \"date-time\",\n    allowedTypes: [\"date-time\", \"date\", \"period\"],\n    multiValue: ',',\n    detectType: function (string) {\n      if (string.indexOf('/') !== -1) {\n        return 'period';\n      }\n      return string.indexOf('T') === -1 ? 'date' : 'date-time';\n    }\n  },\n  \"recurrence-id\": DEFAULT_TYPE_DATETIME_DATE,\n  \"resources\": DEFAULT_TYPE_TEXT_MULTI,\n  \"request-status\": DEFAULT_TYPE_TEXT_STRUCTURED,\n  \"rrule\": DEFAULT_TYPE_RECUR,\n  \"sequence\": DEFAULT_TYPE_INTEGER,\n  \"status\": DEFAULT_TYPE_TEXT,\n  \"summary\": DEFAULT_TYPE_TEXT,\n  \"transp\": DEFAULT_TYPE_TEXT,\n  \"trigger\": {\n    defaultType: \"duration\",\n    allowedTypes: [\"duration\", \"date-time\"]\n  },\n  \"tzoffsetfrom\": DEFAULT_TYPE_UTCOFFSET,\n  \"tzoffsetto\": DEFAULT_TYPE_UTCOFFSET,\n  \"tzurl\": DEFAULT_TYPE_URI,\n  \"tzid\": DEFAULT_TYPE_TEXT,\n  \"tzname\": DEFAULT_TYPE_TEXT\n});\n\n// When adding a value here, be sure to add it to the parameter types!\nconst vcardValues = extend(commonValues, {\n  text: createTextType(FROM_VCARD_NEWLINE, TO_VCARD_NEWLINE),\n  uri: createTextType(FROM_VCARD_NEWLINE, TO_VCARD_NEWLINE),\n  date: {\n    decorate: function (aValue) {\n      return VCardTime.fromDateAndOrTimeString(aValue, \"date\");\n    },\n    undecorate: function (aValue) {\n      return aValue.toString();\n    },\n    fromICAL: function (aValue) {\n      if (aValue.length == 8) {\n        return icalValues.date.fromICAL(aValue);\n      } else if (aValue[0] == '-' && aValue.length == 6) {\n        return aValue.slice(0, 4) + '-' + aValue.slice(4);\n      } else {\n        return aValue;\n      }\n    },\n    toICAL: function (aValue) {\n      if (aValue.length == 10) {\n        return icalValues.date.toICAL(aValue);\n      } else if (aValue[0] == '-' && aValue.length == 7) {\n        return aValue.slice(0, 4) + aValue.slice(5);\n      } else {\n        return aValue;\n      }\n    }\n  },\n  time: {\n    decorate: function (aValue) {\n      return VCardTime.fromDateAndOrTimeString(\"T\" + aValue, \"time\");\n    },\n    undecorate: function (aValue) {\n      return aValue.toString();\n    },\n    fromICAL: function (aValue) {\n      let splitzone = vcardValues.time._splitZone(aValue, true);\n      let zone = splitzone[0],\n        value = splitzone[1];\n\n      //console.log(\"SPLIT: \",splitzone);\n\n      if (value.length == 6) {\n        value = value.slice(0, 2) + ':' + value.slice(2, 4) + ':' + value.slice(4, 6);\n      } else if (value.length == 4 && value[0] != '-') {\n        value = value.slice(0, 2) + ':' + value.slice(2, 4);\n      } else if (value.length == 5) {\n        value = value.slice(0, 3) + ':' + value.slice(3, 5);\n      }\n      if (zone.length == 5 && (zone[0] == '-' || zone[0] == '+')) {\n        zone = zone.slice(0, 3) + ':' + zone.slice(3);\n      }\n      return value + zone;\n    },\n    toICAL: function (aValue) {\n      let splitzone = vcardValues.time._splitZone(aValue);\n      let zone = splitzone[0],\n        value = splitzone[1];\n      if (value.length == 8) {\n        value = value.slice(0, 2) + value.slice(3, 5) + value.slice(6, 8);\n      } else if (value.length == 5 && value[0] != '-') {\n        value = value.slice(0, 2) + value.slice(3, 5);\n      } else if (value.length == 6) {\n        value = value.slice(0, 3) + value.slice(4, 6);\n      }\n      if (zone.length == 6 && (zone[0] == '-' || zone[0] == '+')) {\n        zone = zone.slice(0, 3) + zone.slice(4);\n      }\n      return value + zone;\n    },\n    _splitZone: function (aValue, isFromIcal) {\n      let lastChar = aValue.length - 1;\n      let signChar = aValue.length - (isFromIcal ? 5 : 6);\n      let sign = aValue[signChar];\n      let zone, value;\n      if (aValue[lastChar] == 'Z') {\n        zone = aValue[lastChar];\n        value = aValue.slice(0, Math.max(0, lastChar));\n      } else if (aValue.length > 6 && (sign == '-' || sign == '+')) {\n        zone = aValue.slice(signChar);\n        value = aValue.slice(0, Math.max(0, signChar));\n      } else {\n        zone = \"\";\n        value = aValue;\n      }\n      return [zone, value];\n    }\n  },\n  \"date-time\": {\n    decorate: function (aValue) {\n      return VCardTime.fromDateAndOrTimeString(aValue, \"date-time\");\n    },\n    undecorate: function (aValue) {\n      return aValue.toString();\n    },\n    fromICAL: function (aValue) {\n      return vcardValues['date-and-or-time'].fromICAL(aValue);\n    },\n    toICAL: function (aValue) {\n      return vcardValues['date-and-or-time'].toICAL(aValue);\n    }\n  },\n  \"date-and-or-time\": {\n    decorate: function (aValue) {\n      return VCardTime.fromDateAndOrTimeString(aValue, \"date-and-or-time\");\n    },\n    undecorate: function (aValue) {\n      return aValue.toString();\n    },\n    fromICAL: function (aValue) {\n      let parts = aValue.split('T');\n      return (parts[0] ? vcardValues.date.fromICAL(parts[0]) : '') + (parts[1] ? 'T' + vcardValues.time.fromICAL(parts[1]) : '');\n    },\n    toICAL: function (aValue) {\n      let parts = aValue.split('T');\n      return vcardValues.date.toICAL(parts[0]) + (parts[1] ? 'T' + vcardValues.time.toICAL(parts[1]) : '');\n    }\n  },\n  timestamp: icalValues['date-time'],\n  \"language-tag\": {\n    matches: /^[a-zA-Z0-9-]+$/ // Could go with a more strict regex here\n  },\n  \"phone-number\": {\n    fromICAL: function (aValue) {\n      return Array.from(aValue).filter(function (c) {\n        return c === '\\\\' ? undefined : c;\n      }).join('');\n    },\n    toICAL: function (aValue) {\n      return Array.from(aValue).map(function (c) {\n        return c === ',' || c === \";\" ? '\\\\' + c : c;\n      }).join('');\n    }\n  }\n});\nlet vcardParams = {\n  \"type\": {\n    valueType: \"text\",\n    multiValue: \",\"\n  },\n  \"value\": {\n    // since the value here is a 'type' lowercase is used.\n    values: [\"text\", \"uri\", \"date\", \"time\", \"date-time\", \"date-and-or-time\", \"timestamp\", \"boolean\", \"integer\", \"float\", \"utc-offset\", \"language-tag\"],\n    allowXName: true,\n    allowIanaToken: true\n  }\n};\nlet vcardProperties = extend(commonProperties, {\n  \"adr\": {\n    defaultType: \"text\",\n    structuredValue: \";\",\n    multiValue: \",\"\n  },\n  \"anniversary\": DEFAULT_TYPE_DATE_ANDOR_TIME,\n  \"bday\": DEFAULT_TYPE_DATE_ANDOR_TIME,\n  \"caladruri\": DEFAULT_TYPE_URI,\n  \"caluri\": DEFAULT_TYPE_URI,\n  \"clientpidmap\": DEFAULT_TYPE_TEXT_STRUCTURED,\n  \"email\": DEFAULT_TYPE_TEXT,\n  \"fburl\": DEFAULT_TYPE_URI,\n  \"fn\": DEFAULT_TYPE_TEXT,\n  \"gender\": DEFAULT_TYPE_TEXT_STRUCTURED,\n  \"geo\": DEFAULT_TYPE_URI,\n  \"impp\": DEFAULT_TYPE_URI,\n  \"key\": DEFAULT_TYPE_URI,\n  \"kind\": DEFAULT_TYPE_TEXT,\n  \"lang\": {\n    defaultType: \"language-tag\"\n  },\n  \"logo\": DEFAULT_TYPE_URI,\n  \"member\": DEFAULT_TYPE_URI,\n  \"n\": {\n    defaultType: \"text\",\n    structuredValue: \";\",\n    multiValue: \",\"\n  },\n  \"nickname\": DEFAULT_TYPE_TEXT_MULTI,\n  \"note\": DEFAULT_TYPE_TEXT,\n  \"org\": {\n    defaultType: \"text\",\n    structuredValue: \";\"\n  },\n  \"photo\": DEFAULT_TYPE_URI,\n  \"related\": DEFAULT_TYPE_URI,\n  \"rev\": {\n    defaultType: \"timestamp\"\n  },\n  \"role\": DEFAULT_TYPE_TEXT,\n  \"sound\": DEFAULT_TYPE_URI,\n  \"source\": DEFAULT_TYPE_URI,\n  \"tel\": {\n    defaultType: \"uri\",\n    allowedTypes: [\"uri\", \"text\"]\n  },\n  \"title\": DEFAULT_TYPE_TEXT,\n  \"tz\": {\n    defaultType: \"text\",\n    allowedTypes: [\"text\", \"utc-offset\", \"uri\"]\n  },\n  \"xml\": DEFAULT_TYPE_TEXT\n});\nlet vcard3Values = extend(commonValues, {\n  binary: icalValues.binary,\n  date: vcardValues.date,\n  \"date-time\": vcardValues[\"date-time\"],\n  \"phone-number\": vcardValues[\"phone-number\"],\n  uri: icalValues.uri,\n  text: icalValues.text,\n  time: icalValues.time,\n  vcard: icalValues.text,\n  \"utc-offset\": {\n    toICAL: function (aValue) {\n      return aValue.slice(0, 7);\n    },\n    fromICAL: function (aValue) {\n      return aValue.slice(0, 7);\n    },\n    decorate: function (aValue) {\n      return UtcOffset.fromString(aValue);\n    },\n    undecorate: function (aValue) {\n      return aValue.toString();\n    }\n  }\n});\nlet vcard3Params = {\n  \"type\": {\n    valueType: \"text\",\n    multiValue: \",\"\n  },\n  \"value\": {\n    // since the value here is a 'type' lowercase is used.\n    values: [\"text\", \"uri\", \"date\", \"date-time\", \"phone-number\", \"time\", \"boolean\", \"integer\", \"float\", \"utc-offset\", \"vcard\", \"binary\"],\n    allowXName: true,\n    allowIanaToken: true\n  }\n};\nlet vcard3Properties = extend(commonProperties, {\n  fn: DEFAULT_TYPE_TEXT,\n  n: {\n    defaultType: \"text\",\n    structuredValue: \";\",\n    multiValue: \",\"\n  },\n  nickname: DEFAULT_TYPE_TEXT_MULTI,\n  photo: {\n    defaultType: \"binary\",\n    allowedTypes: [\"binary\", \"uri\"]\n  },\n  bday: {\n    defaultType: \"date-time\",\n    allowedTypes: [\"date-time\", \"date\"],\n    detectType: function (string) {\n      return string.indexOf('T') === -1 ? 'date' : 'date-time';\n    }\n  },\n  adr: {\n    defaultType: \"text\",\n    structuredValue: \";\",\n    multiValue: \",\"\n  },\n  label: DEFAULT_TYPE_TEXT,\n  tel: {\n    defaultType: \"phone-number\"\n  },\n  email: DEFAULT_TYPE_TEXT,\n  mailer: DEFAULT_TYPE_TEXT,\n  tz: {\n    defaultType: \"utc-offset\",\n    allowedTypes: [\"utc-offset\", \"text\"]\n  },\n  geo: {\n    defaultType: \"float\",\n    structuredValue: \";\"\n  },\n  title: DEFAULT_TYPE_TEXT,\n  role: DEFAULT_TYPE_TEXT,\n  logo: {\n    defaultType: \"binary\",\n    allowedTypes: [\"binary\", \"uri\"]\n  },\n  agent: {\n    defaultType: \"vcard\",\n    allowedTypes: [\"vcard\", \"text\", \"uri\"]\n  },\n  org: DEFAULT_TYPE_TEXT_STRUCTURED,\n  note: DEFAULT_TYPE_TEXT_MULTI,\n  prodid: DEFAULT_TYPE_TEXT,\n  rev: {\n    defaultType: \"date-time\",\n    allowedTypes: [\"date-time\", \"date\"],\n    detectType: function (string) {\n      return string.indexOf('T') === -1 ? 'date' : 'date-time';\n    }\n  },\n  \"sort-string\": DEFAULT_TYPE_TEXT,\n  sound: {\n    defaultType: \"binary\",\n    allowedTypes: [\"binary\", \"uri\"]\n  },\n  class: DEFAULT_TYPE_TEXT,\n  key: {\n    defaultType: \"binary\",\n    allowedTypes: [\"binary\", \"text\"]\n  }\n});\n\n/**\n * iCalendar design set\n * @type {designSet}\n */\nlet icalSet = {\n  value: icalValues,\n  param: icalParams,\n  property: icalProperties,\n  propertyGroups: false\n};\n\n/**\n * vCard 4.0 design set\n * @type {designSet}\n */\nlet vcardSet = {\n  value: vcardValues,\n  param: vcardParams,\n  property: vcardProperties,\n  propertyGroups: true\n};\n\n/**\n * vCard 3.0 design set\n * @type {designSet}\n */\nlet vcard3Set = {\n  value: vcard3Values,\n  param: vcard3Params,\n  property: vcard3Properties,\n  propertyGroups: true\n};\n\n/**\n * The design data, used by the parser to determine types for properties and\n * other metadata needed to produce correct jCard/jCal data.\n *\n * @alias ICAL.design\n * @exports module:ICAL.design\n */\nconst design = {\n  /**\n   * Can be set to false to make the parser more lenient.\n   */\n  strict: true,\n  /**\n   * The default set for new properties and components if none is specified.\n   * @type {designSet}\n   */\n  defaultSet: icalSet,\n  /**\n   * The default type for unknown properties\n   * @type {String}\n   */\n  defaultType: 'unknown',\n  /**\n   * Holds the design set for known top-level components\n   *\n   * @type {Object}\n   * @property {designSet} vcard       vCard VCARD\n   * @property {designSet} vevent      iCalendar VEVENT\n   * @property {designSet} vtodo       iCalendar VTODO\n   * @property {designSet} vjournal    iCalendar VJOURNAL\n   * @property {designSet} valarm      iCalendar VALARM\n   * @property {designSet} vtimezone   iCalendar VTIMEZONE\n   * @property {designSet} daylight    iCalendar DAYLIGHT\n   * @property {designSet} standard    iCalendar STANDARD\n   *\n   * @example\n   * let propertyName = 'fn';\n   * let componentDesign = ICAL.design.components.vcard;\n   * let propertyDetails = componentDesign.property[propertyName];\n   * if (propertyDetails.defaultType == 'text') {\n   *   // Yep, sure is...\n   * }\n   */\n  components: {\n    vcard: vcardSet,\n    vcard3: vcard3Set,\n    vevent: icalSet,\n    vtodo: icalSet,\n    vjournal: icalSet,\n    valarm: icalSet,\n    vtimezone: icalSet,\n    daylight: icalSet,\n    standard: icalSet\n  },\n  /**\n   * The design set for iCalendar (rfc5545/rfc7265) components.\n   * @type {designSet}\n   */\n  icalendar: icalSet,\n  /**\n   * The design set for vCard (rfc6350/rfc7095) components.\n   * @type {designSet}\n   */\n  vcard: vcardSet,\n  /**\n   * The design set for vCard (rfc2425/rfc2426/rfc7095) components.\n   * @type {designSet}\n   */\n  vcard3: vcard3Set,\n  /**\n   * Gets the design set for the given component name.\n   *\n   * @param {String} componentName        The name of the component\n   * @return {designSet}      The design set for the component\n   */\n  getDesignSet: function (componentName) {\n    let isInDesign = componentName && componentName in design.components;\n    return isInDesign ? design.components[componentName] : design.defaultSet;\n  }\n};\nvar design$1 = design;\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n/**\n * This lets typescript resolve our custom types in the\n * generated d.ts files (jsdoc typedefs are converted to typescript types).\n * Ignore prevents the typedefs from being documented more than once.\n *\n * @ignore\n * @typedef {import(\"./types.js\").designSet} designSet\n * Imports the 'designSet' type from the \"types.js\" module\n */\n\nconst LINE_ENDING = '\\r\\n';\nconst DEFAULT_VALUE_TYPE = 'unknown';\nconst RFC6868_REPLACE_MAP = {\n  '\"': \"^'\",\n  \"\\n\": \"^n\",\n  \"^\": \"^^\"\n};\n\n/**\n * Convert a full jCal/jCard array into a iCalendar/vCard string.\n *\n * @function ICAL.stringify\n * @variation function\n * @param {Array} jCal    The jCal/jCard document\n * @return {String}       The stringified iCalendar/vCard document\n */\nfunction stringify(jCal) {\n  if (typeof jCal[0] == \"string\") {\n    // This is a single component\n    jCal = [jCal];\n  }\n  let i = 0;\n  let len = jCal.length;\n  let result = '';\n  for (; i < len; i++) {\n    result += stringify.component(jCal[i]) + LINE_ENDING;\n  }\n  return result;\n}\n\n/**\n * Converts an jCal component array into a ICAL string.\n * Recursive will resolve sub-components.\n *\n * Exact component/property order is not saved all\n * properties will come before subcomponents.\n *\n * @function ICAL.stringify.component\n * @param {Array} component\n *        jCal/jCard fragment of a component\n * @param {designSet} designSet\n *        The design data to use for this component\n * @return {String}       The iCalendar/vCard string\n */\nstringify.component = function (component, designSet) {\n  let name = component[0].toUpperCase();\n  let result = 'BEGIN:' + name + LINE_ENDING;\n  let props = component[1];\n  let propIdx = 0;\n  let propLen = props.length;\n  let designSetName = component[0];\n  // rfc6350 requires that in vCard 4.0 the first component is the VERSION\n  // component with as value 4.0, note that 3.0 does not have this requirement.\n  if (designSetName === 'vcard' && component[1].length > 0 && !(component[1][0][0] === \"version\" && component[1][0][3] === \"4.0\")) {\n    designSetName = \"vcard3\";\n  }\n  designSet = designSet || design$1.getDesignSet(designSetName);\n  for (; propIdx < propLen; propIdx++) {\n    result += stringify.property(props[propIdx], designSet) + LINE_ENDING;\n  }\n\n  // Ignore subcomponents if none exist, e.g. in vCard.\n  let comps = component[2] || [];\n  let compIdx = 0;\n  let compLen = comps.length;\n  for (; compIdx < compLen; compIdx++) {\n    result += stringify.component(comps[compIdx], designSet) + LINE_ENDING;\n  }\n  result += 'END:' + name;\n  return result;\n};\n\n/**\n * Converts a single jCal/jCard property to a iCalendar/vCard string.\n *\n * @function ICAL.stringify.property\n * @param {Array} property\n *        jCal/jCard property array\n * @param {designSet} designSet\n *        The design data to use for this property\n * @param {Boolean} noFold\n *        If true, the line is not folded\n * @return {String}       The iCalendar/vCard string\n */\nstringify.property = function (property, designSet, noFold) {\n  let name = property[0].toUpperCase();\n  let jsName = property[0];\n  let params = property[1];\n  if (!designSet) {\n    designSet = design$1.defaultSet;\n  }\n  let groupName = params.group;\n  let line;\n  if (designSet.propertyGroups && groupName) {\n    line = groupName.toUpperCase() + \".\" + name;\n  } else {\n    line = name;\n  }\n  for (let [paramName, value] of Object.entries(params)) {\n    if (designSet.propertyGroups && paramName == 'group') {\n      continue;\n    }\n    let paramDesign = designSet.param[paramName];\n    let multiValue = paramDesign && paramDesign.multiValue;\n    if (multiValue && Array.isArray(value)) {\n      value = value.map(function (val) {\n        val = stringify._rfc6868Unescape(val);\n        val = stringify.paramPropertyValue(val, paramDesign.multiValueSeparateDQuote);\n        return val;\n      });\n      value = stringify.multiValue(value, multiValue, \"unknown\", null, designSet);\n    } else {\n      value = stringify._rfc6868Unescape(value);\n      value = stringify.paramPropertyValue(value);\n    }\n    line += ';' + paramName.toUpperCase() + '=' + value;\n  }\n  if (property.length === 3) {\n    // If there are no values, we must assume a blank value\n    return line + ':';\n  }\n  let valueType = property[2];\n  let propDetails;\n  let multiValue = false;\n  let structuredValue = false;\n  let isDefault = false;\n  if (jsName in designSet.property) {\n    propDetails = designSet.property[jsName];\n    if ('multiValue' in propDetails) {\n      multiValue = propDetails.multiValue;\n    }\n    if ('structuredValue' in propDetails && Array.isArray(property[3])) {\n      structuredValue = propDetails.structuredValue;\n    }\n    if ('defaultType' in propDetails) {\n      if (valueType === propDetails.defaultType) {\n        isDefault = true;\n      }\n    } else {\n      if (valueType === DEFAULT_VALUE_TYPE) {\n        isDefault = true;\n      }\n    }\n  } else {\n    if (valueType === DEFAULT_VALUE_TYPE) {\n      isDefault = true;\n    }\n  }\n\n  // push the VALUE property if type is not the default\n  // for the current property.\n  if (!isDefault) {\n    // value will never contain ;/:/, so we don't escape it here.\n    line += ';VALUE=' + valueType.toUpperCase();\n  }\n  line += ':';\n  if (multiValue && structuredValue) {\n    line += stringify.multiValue(property[3], structuredValue, valueType, multiValue, designSet, structuredValue);\n  } else if (multiValue) {\n    line += stringify.multiValue(property.slice(3), multiValue, valueType, null, designSet, false);\n  } else if (structuredValue) {\n    line += stringify.multiValue(property[3], structuredValue, valueType, null, designSet, structuredValue);\n  } else {\n    line += stringify.value(property[3], valueType, designSet, false);\n  }\n  return noFold ? line : foldline(line);\n};\n\n/**\n * Handles escaping of property values that may contain:\n *\n *    COLON (:), SEMICOLON (;), or COMMA (,)\n *\n * If any of the above are present the result is wrapped\n * in double quotes.\n *\n * @function ICAL.stringify.paramPropertyValue\n * @param {String} value      Raw property value\n * @param {boolean} force     If value should be escaped even when unnecessary\n * @return {String}           Given or escaped value when needed\n */\nstringify.paramPropertyValue = function (value, force) {\n  if (!force && value.indexOf(',') === -1 && value.indexOf(':') === -1 && value.indexOf(';') === -1) {\n    return value;\n  }\n  return '\"' + value + '\"';\n};\n\n/**\n * Converts an array of ical values into a single\n * string based on a type and a delimiter value (like \",\").\n *\n * @function ICAL.stringify.multiValue\n * @param {Array} values      List of values to convert\n * @param {String} delim      Used to join the values (\",\", \";\", \":\")\n * @param {String} type       Lowecase ical value type\n *        (like boolean, date-time, etc..)\n * @param {?String} innerMulti If set, each value will again be processed\n *        Used for structured values\n * @param {designSet} designSet\n *        The design data to use for this property\n *\n * @return {String}           iCalendar/vCard string for value\n */\nstringify.multiValue = function (values, delim, type, innerMulti, designSet, structuredValue) {\n  let result = '';\n  let len = values.length;\n  let i = 0;\n  for (; i < len; i++) {\n    if (innerMulti && Array.isArray(values[i])) {\n      result += stringify.multiValue(values[i], innerMulti, type, null, designSet, structuredValue);\n    } else {\n      result += stringify.value(values[i], type, designSet, structuredValue);\n    }\n    if (i !== len - 1) {\n      result += delim;\n    }\n  }\n  return result;\n};\n\n/**\n * Processes a single ical value runs the associated \"toICAL\" method from the\n * design value type if available to convert the value.\n *\n * @function ICAL.stringify.value\n * @param {String|Number} value       A formatted value\n * @param {String} type               Lowercase iCalendar/vCard value type\n *  (like boolean, date-time, etc..)\n * @return {String}                   iCalendar/vCard value for single value\n */\nstringify.value = function (value, type, designSet, structuredValue) {\n  if (type in designSet.value && 'toICAL' in designSet.value[type]) {\n    return designSet.value[type].toICAL(value, structuredValue);\n  }\n  return value;\n};\n\n/**\n * Internal helper for rfc6868. Exposing this on ICAL.stringify so that\n * hackers can disable the rfc6868 parsing if the really need to.\n *\n * @param {String} val        The value to unescape\n * @return {String}           The escaped value\n */\nstringify._rfc6868Unescape = function (val) {\n  return val.replace(/[\\n^\"]/g, function (x) {\n    return RFC6868_REPLACE_MAP[x];\n  });\n};\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\nconst NAME_INDEX$1 = 0;\nconst PROP_INDEX = 1;\nconst TYPE_INDEX = 2;\nconst VALUE_INDEX = 3;\n\n/**\n * This lets typescript resolve our custom types in the\n * generated d.ts files (jsdoc typedefs are converted to typescript types).\n * Ignore prevents the typedefs from being documented more than once.\n * @ignore\n * @typedef {import(\"./types.js\").designSet} designSet\n * Imports the 'designSet' type from the \"types.js\" module\n * @typedef {import(\"./types.js\").Geo} Geo\n * Imports the 'Geo' type from the \"types.js\" module\n */\n\n/**\n * Provides a layer on top of the raw jCal object for manipulating a single property, with its\n * parameters and value.\n *\n * @memberof ICAL\n */\nclass Property {\n  /**\n   * Create an {@link ICAL.Property} by parsing the passed iCalendar string.\n   *\n   * @param {String} str            The iCalendar string to parse\n   * @param {designSet=} designSet  The design data to use for this property\n   * @return {Property}             The created iCalendar property\n   */\n  static fromString(str, designSet) {\n    return new Property(parse.property(str, designSet));\n  }\n\n  /**\n   * Creates a new ICAL.Property instance.\n   *\n   * It is important to note that mutations done in the wrapper directly mutate the jCal object used\n   * to initialize.\n   *\n   * Can also be used to create new properties by passing the name of the property (as a String).\n   *\n   * @param {Array|String} jCal         Raw jCal representation OR the new name of the property\n   * @param {Component=} parent         Parent component\n   */\n  constructor(jCal, parent) {\n    this._parent = parent || null;\n    if (typeof jCal === 'string') {\n      // We are creating the property by name and need to detect the type\n      this.jCal = [jCal, {}, design$1.defaultType];\n      this.jCal[TYPE_INDEX] = this.getDefaultType();\n    } else {\n      this.jCal = jCal;\n    }\n    this._updateType();\n  }\n\n  /**\n   * The value type for this property\n   * @type {String}\n   */\n  get type() {\n    return this.jCal[TYPE_INDEX];\n  }\n\n  /**\n   * The name of this property, in lowercase.\n   * @type {String}\n   */\n  get name() {\n    return this.jCal[NAME_INDEX$1];\n  }\n\n  /**\n   * The parent component for this property.\n   * @type {Component}\n   */\n  get parent() {\n    return this._parent;\n  }\n  set parent(p) {\n    // Before setting the parent, check if the design set has changed. If it\n    // has, we later need to update the type if it was unknown before.\n    let designSetChanged = !this._parent || p && p._designSet != this._parent._designSet;\n    this._parent = p;\n    if (this.type == design$1.defaultType && designSetChanged) {\n      this.jCal[TYPE_INDEX] = this.getDefaultType();\n      this._updateType();\n    }\n  }\n\n  /**\n   * The design set for this property, e.g. icalendar vs vcard\n   *\n   * @type {designSet}\n   * @private\n   */\n  get _designSet() {\n    return this.parent ? this.parent._designSet : design$1.defaultSet;\n  }\n\n  /**\n   * Updates the type metadata from the current jCal type and design set.\n   *\n   * @private\n   */\n  _updateType() {\n    let designSet = this._designSet;\n    if (this.type in designSet.value) {\n      if ('decorate' in designSet.value[this.type]) {\n        this.isDecorated = true;\n      } else {\n        this.isDecorated = false;\n      }\n      if (this.name in designSet.property) {\n        this.isMultiValue = 'multiValue' in designSet.property[this.name];\n        this.isStructuredValue = 'structuredValue' in designSet.property[this.name];\n      }\n    }\n  }\n\n  /**\n   * Hydrate a single value. The act of hydrating means turning the raw jCal\n   * value into a potentially wrapped object, for example {@link ICAL.Time}.\n   *\n   * @private\n   * @param {Number} index        The index of the value to hydrate\n   * @return {?Object}             The decorated value.\n   */\n  _hydrateValue(index) {\n    if (this._values && this._values[index]) {\n      return this._values[index];\n    }\n\n    // for the case where there is no value.\n    if (this.jCal.length <= VALUE_INDEX + index) {\n      return null;\n    }\n    if (this.isDecorated) {\n      if (!this._values) {\n        this._values = [];\n      }\n      return this._values[index] = this._decorate(this.jCal[VALUE_INDEX + index]);\n    } else {\n      return this.jCal[VALUE_INDEX + index];\n    }\n  }\n\n  /**\n   * Decorate a single value, returning its wrapped object. This is used by\n   * the hydrate function to actually wrap the value.\n   *\n   * @private\n   * @param {?} value         The value to decorate\n   * @return {Object}         The decorated value\n   */\n  _decorate(value) {\n    return this._designSet.value[this.type].decorate(value, this);\n  }\n\n  /**\n   * Undecorate a single value, returning its raw jCal data.\n   *\n   * @private\n   * @param {Object} value         The value to undecorate\n   * @return {?}                   The undecorated value\n   */\n  _undecorate(value) {\n    return this._designSet.value[this.type].undecorate(value, this);\n  }\n\n  /**\n   * Sets the value at the given index while also hydrating it. The passed\n   * value can either be a decorated or undecorated value.\n   *\n   * @private\n   * @param {?} value             The value to set\n   * @param {Number} index        The index to set it at\n   */\n  _setDecoratedValue(value, index) {\n    if (!this._values) {\n      this._values = [];\n    }\n    if (typeof value === 'object' && 'icaltype' in value) {\n      // decorated value\n      this.jCal[VALUE_INDEX + index] = this._undecorate(value);\n      this._values[index] = value;\n    } else {\n      // undecorated value\n      this.jCal[VALUE_INDEX + index] = value;\n      this._values[index] = this._decorate(value);\n    }\n  }\n\n  /**\n   * Gets a parameter on the property.\n   *\n   * @param {String}        name   Parameter name (lowercase)\n   * @return {Array|String}        Parameter value\n   */\n  getParameter(name) {\n    if (name in this.jCal[PROP_INDEX]) {\n      return this.jCal[PROP_INDEX][name];\n    } else {\n      return undefined;\n    }\n  }\n\n  /**\n   * Gets first parameter on the property.\n   *\n   * @param {String}        name   Parameter name (lowercase)\n   * @return {String}        Parameter value\n   */\n  getFirstParameter(name) {\n    let parameters = this.getParameter(name);\n    if (Array.isArray(parameters)) {\n      return parameters[0];\n    }\n    return parameters;\n  }\n\n  /**\n   * Sets a parameter on the property.\n   *\n   * @param {String}       name     The parameter name\n   * @param {Array|String} value    The parameter value\n   */\n  setParameter(name, value) {\n    let lcname = name.toLowerCase();\n    if (typeof value === \"string\" && lcname in this._designSet.param && 'multiValue' in this._designSet.param[lcname]) {\n      value = [value];\n    }\n    this.jCal[PROP_INDEX][name] = value;\n  }\n\n  /**\n   * Removes a parameter\n   *\n   * @param {String} name     The parameter name\n   */\n  removeParameter(name) {\n    delete this.jCal[PROP_INDEX][name];\n  }\n\n  /**\n   * Get the default type based on this property's name.\n   *\n   * @return {String}     The default type for this property\n   */\n  getDefaultType() {\n    let name = this.jCal[NAME_INDEX$1];\n    let designSet = this._designSet;\n    if (name in designSet.property) {\n      let details = designSet.property[name];\n      if ('defaultType' in details) {\n        return details.defaultType;\n      }\n    }\n    return design$1.defaultType;\n  }\n\n  /**\n   * Sets type of property and clears out any existing values of the current\n   * type.\n   *\n   * @param {String} type     New iCAL type (see design.*.values)\n   */\n  resetType(type) {\n    this.removeAllValues();\n    this.jCal[TYPE_INDEX] = type;\n    this._updateType();\n  }\n\n  /**\n   * Finds the first property value.\n   *\n   * @return {Binary | Duration | Period |\n   * Recur | Time | UtcOffset | Geo | string | null}         First property value\n   */\n  getFirstValue() {\n    return this._hydrateValue(0);\n  }\n\n  /**\n   * Gets all values on the property.\n   *\n   * NOTE: this creates an array during each call.\n   *\n   * @return {Array}          List of values\n   */\n  getValues() {\n    let len = this.jCal.length - VALUE_INDEX;\n    if (len < 1) {\n      // it is possible for a property to have no value.\n      return [];\n    }\n    let i = 0;\n    let result = [];\n    for (; i < len; i++) {\n      result[i] = this._hydrateValue(i);\n    }\n    return result;\n  }\n\n  /**\n   * Removes all values from this property\n   */\n  removeAllValues() {\n    if (this._values) {\n      this._values.length = 0;\n    }\n    this.jCal.length = 3;\n  }\n\n  /**\n   * Sets the values of the property.  Will overwrite the existing values.\n   * This can only be used for multi-value properties.\n   *\n   * @param {Array} values    An array of values\n   */\n  setValues(values) {\n    if (!this.isMultiValue) {\n      throw new Error(this.name + ': does not not support mulitValue.\\n' + 'override isMultiValue');\n    }\n    let len = values.length;\n    let i = 0;\n    this.removeAllValues();\n    if (len > 0 && typeof values[0] === 'object' && 'icaltype' in values[0]) {\n      this.resetType(values[0].icaltype);\n    }\n    if (this.isDecorated) {\n      for (; i < len; i++) {\n        this._setDecoratedValue(values[i], i);\n      }\n    } else {\n      for (; i < len; i++) {\n        this.jCal[VALUE_INDEX + i] = values[i];\n      }\n    }\n  }\n\n  /**\n   * Sets the current value of the property. If this is a multi-value\n   * property, all other values will be removed.\n   *\n   * @param {String|Object} value     New property value.\n   */\n  setValue(value) {\n    this.removeAllValues();\n    if (typeof value === 'object' && 'icaltype' in value) {\n      this.resetType(value.icaltype);\n    }\n    if (this.isDecorated) {\n      this._setDecoratedValue(value, 0);\n    } else {\n      this.jCal[VALUE_INDEX] = value;\n    }\n  }\n\n  /**\n   * Returns the Object representation of this component. The returned object\n   * is a live jCal object and should be cloned if modified.\n   * @return {Object}\n   */\n  toJSON() {\n    return this.jCal;\n  }\n\n  /**\n   * The string representation of this component.\n   * @return {String}\n   */\n  toICALString() {\n    return stringify.property(this.jCal, this._designSet, true);\n  }\n}\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n/**\n * This lets typescript resolve our custom types in the\n * generated d.ts files (jsdoc typedefs are converted to typescript types).\n * Ignore prevents the typedefs from being documented more than once.\n * @ignore\n * @typedef {import(\"./types.js\").designSet} designSet\n * Imports the 'designSet' type from the \"types.js\" module\n * @typedef {import(\"./types.js\").Geo} Geo\n * Imports the 'Geo' type from the \"types.js\" module\n */\n\nconst NAME_INDEX = 0;\nconst PROPERTY_INDEX = 1;\nconst COMPONENT_INDEX = 2;\n\n/**\n * Wraps a jCal component, adding convenience methods to add, remove and update subcomponents and\n * properties.\n *\n * @memberof ICAL\n */\nclass Component {\n  /**\n   * Create an {@link ICAL.Component} by parsing the passed iCalendar string.\n   *\n   * @param {String} str        The iCalendar string to parse\n   */\n  static fromString(str) {\n    return new Component(parse.component(str));\n  }\n\n  /**\n   * Creates a new Component instance.\n   *\n   * @param {Array|String} jCal         Raw jCal component data OR name of new\n   *                                      component\n   * @param {Component=} parent     Parent component to associate\n   */\n  constructor(jCal, parent) {\n    if (typeof jCal === 'string') {\n      // jCal spec (name, properties, components)\n      jCal = [jCal, [], []];\n    }\n\n    // mostly for legacy reasons.\n    this.jCal = jCal;\n    this.parent = parent || null;\n    if (!this.parent && this.name === 'vcalendar') {\n      this._timezoneCache = new Map();\n    }\n  }\n\n  /**\n   * Hydrated properties are inserted into the _properties array at the same\n   * position as in the jCal array, so it is possible that the array contains\n   * undefined values for unhydrdated properties. To avoid iterating the\n   * array when checking if all properties have been hydrated, we save the\n   * count here.\n   *\n   * @type {Number}\n   * @private\n   */\n  _hydratedPropertyCount = 0;\n\n  /**\n   * The same count as for _hydratedPropertyCount, but for subcomponents\n   *\n   * @type {Number}\n   * @private\n   */\n  _hydratedComponentCount = 0;\n\n  /**\n   * A cache of hydrated time zone objects which may be used by consumers, keyed\n   * by time zone ID.\n   *\n   * @type {Map}\n   * @private\n   */\n  _timezoneCache = null;\n\n  /**\n   * @private\n   */\n  _components = null;\n\n  /**\n   * @private\n   */\n  _properties = null;\n\n  /**\n   * The name of this component\n   *\n   * @type {String}\n   */\n  get name() {\n    return this.jCal[NAME_INDEX];\n  }\n\n  /**\n   * The design set for this component, e.g. icalendar vs vcard\n   *\n   * @type {designSet}\n   * @private\n   */\n  get _designSet() {\n    let parentDesign = this.parent && this.parent._designSet;\n    return parentDesign || design$1.getDesignSet(this.name);\n  }\n\n  /**\n   * @private\n   */\n  _hydrateComponent(index) {\n    if (!this._components) {\n      this._components = [];\n      this._hydratedComponentCount = 0;\n    }\n    if (this._components[index]) {\n      return this._components[index];\n    }\n    let comp = new Component(this.jCal[COMPONENT_INDEX][index], this);\n    this._hydratedComponentCount++;\n    return this._components[index] = comp;\n  }\n\n  /**\n   * @private\n   */\n  _hydrateProperty(index) {\n    if (!this._properties) {\n      this._properties = [];\n      this._hydratedPropertyCount = 0;\n    }\n    if (this._properties[index]) {\n      return this._properties[index];\n    }\n    let prop = new Property(this.jCal[PROPERTY_INDEX][index], this);\n    this._hydratedPropertyCount++;\n    return this._properties[index] = prop;\n  }\n\n  /**\n   * Finds first sub component, optionally filtered by name.\n   *\n   * @param {String=} name        Optional name to filter by\n   * @return {?Component}     The found subcomponent\n   */\n  getFirstSubcomponent(name) {\n    if (name) {\n      let i = 0;\n      let comps = this.jCal[COMPONENT_INDEX];\n      let len = comps.length;\n      for (; i < len; i++) {\n        if (comps[i][NAME_INDEX] === name) {\n          let result = this._hydrateComponent(i);\n          return result;\n        }\n      }\n    } else {\n      if (this.jCal[COMPONENT_INDEX].length) {\n        return this._hydrateComponent(0);\n      }\n    }\n\n    // ensure we return a value (strict mode)\n    return null;\n  }\n\n  /**\n   * Finds all sub components, optionally filtering by name.\n   *\n   * @param {String=} name            Optional name to filter by\n   * @return {Component[]}       The found sub components\n   */\n  getAllSubcomponents(name) {\n    let jCalLen = this.jCal[COMPONENT_INDEX].length;\n    let i = 0;\n    if (name) {\n      let comps = this.jCal[COMPONENT_INDEX];\n      let result = [];\n      for (; i < jCalLen; i++) {\n        if (name === comps[i][NAME_INDEX]) {\n          result.push(this._hydrateComponent(i));\n        }\n      }\n      return result;\n    } else {\n      if (!this._components || this._hydratedComponentCount !== jCalLen) {\n        for (; i < jCalLen; i++) {\n          this._hydrateComponent(i);\n        }\n      }\n      return this._components || [];\n    }\n  }\n\n  /**\n   * Returns true when a named property exists.\n   *\n   * @param {String} name     The property name\n   * @return {Boolean}        True, when property is found\n   */\n  hasProperty(name) {\n    let props = this.jCal[PROPERTY_INDEX];\n    let len = props.length;\n    let i = 0;\n    for (; i < len; i++) {\n      // 0 is property name\n      if (props[i][NAME_INDEX] === name) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Finds the first property, optionally with the given name.\n   *\n   * @param {String=} name        Lowercase property name\n   * @return {?Property}     The found property\n   */\n  getFirstProperty(name) {\n    if (name) {\n      let i = 0;\n      let props = this.jCal[PROPERTY_INDEX];\n      let len = props.length;\n      for (; i < len; i++) {\n        if (props[i][NAME_INDEX] === name) {\n          let result = this._hydrateProperty(i);\n          return result;\n        }\n      }\n    } else {\n      if (this.jCal[PROPERTY_INDEX].length) {\n        return this._hydrateProperty(0);\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns first property's value, if available.\n   *\n   * @param {String=} name                    Lowercase property name\n   * @return {Binary | Duration | Period |\n   * Recur | Time | UtcOffset | Geo | string | null}         The found property value.\n   */\n  getFirstPropertyValue(name) {\n    let prop = this.getFirstProperty(name);\n    if (prop) {\n      return prop.getFirstValue();\n    }\n    return null;\n  }\n\n  /**\n   * Get all properties in the component, optionally filtered by name.\n   *\n   * @param {String=} name        Lowercase property name\n   * @return {Property[]}    List of properties\n   */\n  getAllProperties(name) {\n    let jCalLen = this.jCal[PROPERTY_INDEX].length;\n    let i = 0;\n    if (name) {\n      let props = this.jCal[PROPERTY_INDEX];\n      let result = [];\n      for (; i < jCalLen; i++) {\n        if (name === props[i][NAME_INDEX]) {\n          result.push(this._hydrateProperty(i));\n        }\n      }\n      return result;\n    } else {\n      if (!this._properties || this._hydratedPropertyCount !== jCalLen) {\n        for (; i < jCalLen; i++) {\n          this._hydrateProperty(i);\n        }\n      }\n      return this._properties || [];\n    }\n  }\n\n  /**\n   * @private\n   */\n  _removeObjectByIndex(jCalIndex, cache, index) {\n    cache = cache || [];\n    // remove cached version\n    if (cache[index]) {\n      let obj = cache[index];\n      if (\"parent\" in obj) {\n        obj.parent = null;\n      }\n    }\n    cache.splice(index, 1);\n\n    // remove it from the jCal\n    this.jCal[jCalIndex].splice(index, 1);\n  }\n\n  /**\n   * @private\n   */\n  _removeObject(jCalIndex, cache, nameOrObject) {\n    let i = 0;\n    let objects = this.jCal[jCalIndex];\n    let len = objects.length;\n    let cached = this[cache];\n    if (typeof nameOrObject === 'string') {\n      for (; i < len; i++) {\n        if (objects[i][NAME_INDEX] === nameOrObject) {\n          this._removeObjectByIndex(jCalIndex, cached, i);\n          return true;\n        }\n      }\n    } else if (cached) {\n      for (; i < len; i++) {\n        if (cached[i] && cached[i] === nameOrObject) {\n          this._removeObjectByIndex(jCalIndex, cached, i);\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @private\n   */\n  _removeAllObjects(jCalIndex, cache, name) {\n    let cached = this[cache];\n\n    // Unfortunately we have to run through all children to reset their\n    // parent property.\n    let objects = this.jCal[jCalIndex];\n    let i = objects.length - 1;\n\n    // descending search required because splice\n    // is used and will effect the indices.\n    for (; i >= 0; i--) {\n      if (!name || objects[i][NAME_INDEX] === name) {\n        this._removeObjectByIndex(jCalIndex, cached, i);\n      }\n    }\n  }\n\n  /**\n   * Adds a single sub component.\n   *\n   * @param {Component} component        The component to add\n   * @return {Component}                 The passed in component\n   */\n  addSubcomponent(component) {\n    if (!this._components) {\n      this._components = [];\n      this._hydratedComponentCount = 0;\n    }\n    if (component.parent) {\n      component.parent.removeSubcomponent(component);\n    }\n    let idx = this.jCal[COMPONENT_INDEX].push(component.jCal);\n    this._components[idx - 1] = component;\n    this._hydratedComponentCount++;\n    component.parent = this;\n    return component;\n  }\n\n  /**\n   * Removes a single component by name or the instance of a specific\n   * component.\n   *\n   * @param {Component|String} nameOrComp    Name of component, or component\n   * @return {Boolean}                            True when comp is removed\n   */\n  removeSubcomponent(nameOrComp) {\n    let removed = this._removeObject(COMPONENT_INDEX, '_components', nameOrComp);\n    if (removed) {\n      this._hydratedComponentCount--;\n    }\n    return removed;\n  }\n\n  /**\n   * Removes all components or (if given) all components by a particular\n   * name.\n   *\n   * @param {String=} name            Lowercase component name\n   */\n  removeAllSubcomponents(name) {\n    let removed = this._removeAllObjects(COMPONENT_INDEX, '_components', name);\n    this._hydratedComponentCount = 0;\n    return removed;\n  }\n\n  /**\n   * Adds an {@link ICAL.Property} to the component.\n   *\n   * @param {Property} property      The property to add\n   * @return {Property}              The passed in property\n   */\n  addProperty(property) {\n    if (!(property instanceof Property)) {\n      throw new TypeError('must be instance of ICAL.Property');\n    }\n    if (!this._properties) {\n      this._properties = [];\n      this._hydratedPropertyCount = 0;\n    }\n    if (property.parent) {\n      property.parent.removeProperty(property);\n    }\n    let idx = this.jCal[PROPERTY_INDEX].push(property.jCal);\n    this._properties[idx - 1] = property;\n    this._hydratedPropertyCount++;\n    property.parent = this;\n    return property;\n  }\n\n  /**\n   * Helper method to add a property with a value to the component.\n   *\n   * @param {String}               name         Property name to add\n   * @param {String|Number|Object} value        Property value\n   * @return {Property}                    The created property\n   */\n  addPropertyWithValue(name, value) {\n    let prop = new Property(name);\n    prop.setValue(value);\n    this.addProperty(prop);\n    return prop;\n  }\n\n  /**\n   * Helper method that will update or create a property of the given name\n   * and sets its value. If multiple properties with the given name exist,\n   * only the first is updated.\n   *\n   * @param {String}               name         Property name to update\n   * @param {String|Number|Object} value        Property value\n   * @return {Property}                    The created property\n   */\n  updatePropertyWithValue(name, value) {\n    let prop = this.getFirstProperty(name);\n    if (prop) {\n      prop.setValue(value);\n    } else {\n      prop = this.addPropertyWithValue(name, value);\n    }\n    return prop;\n  }\n\n  /**\n   * Removes a single property by name or the instance of the specific\n   * property.\n   *\n   * @param {String|Property} nameOrProp     Property name or instance to remove\n   * @return {Boolean}                            True, when deleted\n   */\n  removeProperty(nameOrProp) {\n    let removed = this._removeObject(PROPERTY_INDEX, '_properties', nameOrProp);\n    if (removed) {\n      this._hydratedPropertyCount--;\n    }\n    return removed;\n  }\n\n  /**\n   * Removes all properties associated with this component, optionally\n   * filtered by name.\n   *\n   * @param {String=} name        Lowercase property name\n   * @return {Boolean}            True, when deleted\n   */\n  removeAllProperties(name) {\n    let removed = this._removeAllObjects(PROPERTY_INDEX, '_properties', name);\n    this._hydratedPropertyCount = 0;\n    return removed;\n  }\n\n  /**\n   * Returns the Object representation of this component. The returned object\n   * is a live jCal object and should be cloned if modified.\n   * @return {Object}\n   */\n  toJSON() {\n    return this.jCal;\n  }\n\n  /**\n   * The string representation of this component.\n   * @return {String}\n   */\n  toString() {\n    return stringify.component(this.jCal, this._designSet);\n  }\n\n  /**\n   * Retrieve a time zone definition from the component tree, if any is present.\n   * If the tree contains no time zone definitions or the TZID cannot be\n   * matched, returns null.\n   *\n   * @param {String} tzid     The ID of the time zone to retrieve\n   * @return {Timezone}  The time zone corresponding to the ID, or null\n   */\n  getTimeZoneByID(tzid) {\n    // VTIMEZONE components can only appear as a child of the VCALENDAR\n    // component; walk the tree if we're not the root.\n    if (this.parent) {\n      return this.parent.getTimeZoneByID(tzid);\n    }\n\n    // If there is no time zone cache, we are probably parsing an incomplete\n    // file and will have no time zone definitions.\n    if (!this._timezoneCache) {\n      return null;\n    }\n    if (this._timezoneCache.has(tzid)) {\n      return this._timezoneCache.get(tzid);\n    }\n\n    // If the time zone is not already cached, hydrate it from the\n    // subcomponents.\n    const zones = this.getAllSubcomponents('vtimezone');\n    for (const zone of zones) {\n      if (zone.getFirstProperty('tzid').getFirstValue() === tzid) {\n        const hydratedZone = new Timezone({\n          component: zone,\n          tzid: tzid\n        });\n        this._timezoneCache.set(tzid, hydratedZone);\n        return hydratedZone;\n      }\n    }\n\n    // Per the standard, we should always have a time zone defined in a file\n    // for any referenced TZID, but don't blow up if the file is invalid.\n    return null;\n  }\n}\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n/**\n * Primary class for expanding recurring rules.  Can take multiple rrules, rdates, exdate(s) and\n * iterate (in order) over each next occurrence.\n *\n * Once initialized this class can also be serialized saved and continue iteration from the last\n * point.\n *\n * NOTE: it is intended that this class is to be used with {@link ICAL.Event} which handles recurrence\n * exceptions.\n *\n * @example\n * // assuming event is a parsed ical component\n * var event;\n *\n * var expand = new ICAL.RecurExpansion({\n *   component: event,\n *   dtstart: event.getFirstPropertyValue('dtstart')\n * });\n *\n * // remember there are infinite rules so it is a good idea to limit the scope of the iterations\n * // then resume later on.\n *\n * // next is always an ICAL.Time or null\n * var next;\n *\n * while (someCondition && (next = expand.next())) {\n *   // do something with next\n * }\n *\n * // save instance for later\n * var json = JSON.stringify(expand);\n *\n * //...\n *\n * // NOTE: if the component's properties have changed you will need to rebuild the class and start\n * // over. This only works when the component's recurrence info is the same.\n * var expand = new ICAL.RecurExpansion(JSON.parse(json));\n *\n * @memberof ICAL\n */\nclass RecurExpansion {\n  /**\n   * Creates a new ICAL.RecurExpansion instance.\n   *\n   * The options object can be filled with the specified initial values. It can also contain\n   * additional members, as a result of serializing a previous expansion state, as shown in the\n   * example.\n   *\n   * @param {Object} options\n   *        Recurrence expansion options\n   * @param {Time} options.dtstart\n   *        Start time of the event\n   * @param {Component=} options.component\n   *        Component for expansion, required if not resuming.\n   */\n  constructor(options) {\n    this.ruleDates = [];\n    this.exDates = [];\n    this.fromData(options);\n  }\n\n  /**\n   * True when iteration is fully completed.\n   * @type {Boolean}\n   */\n  complete = false;\n\n  /**\n   * Array of rrule iterators.\n   *\n   * @type {RecurIterator[]}\n   * @private\n   */\n  ruleIterators = null;\n\n  /**\n   * Array of rdate instances.\n   *\n   * @type {Time[]}\n   * @private\n   */\n  ruleDates = null;\n\n  /**\n   * Array of exdate instances.\n   *\n   * @type {Time[]}\n   * @private\n   */\n  exDates = null;\n\n  /**\n   * Current position in ruleDates array.\n   * @type {Number}\n   * @private\n   */\n  ruleDateInc = 0;\n\n  /**\n   * Current position in exDates array\n   * @type {Number}\n   * @private\n   */\n  exDateInc = 0;\n\n  /**\n   * Current negative date.\n   *\n   * @type {Time}\n   * @private\n   */\n  exDate = null;\n\n  /**\n   * Current additional date.\n   *\n   * @type {Time}\n   * @private\n   */\n  ruleDate = null;\n\n  /**\n   * Start date of recurring rules.\n   *\n   * @type {Time}\n   */\n  dtstart = null;\n\n  /**\n   * Last expanded time\n   *\n   * @type {Time}\n   */\n  last = null;\n\n  /**\n   * Initialize the recurrence expansion from the data object. The options\n   * object may also contain additional members, see the\n   * {@link ICAL.RecurExpansion constructor} for more details.\n   *\n   * @param {Object} options\n   *        Recurrence expansion options\n   * @param {Time} options.dtstart\n   *        Start time of the event\n   * @param {Component=} options.component\n   *        Component for expansion, required if not resuming.\n   */\n  fromData(options) {\n    let start = formatClassType(options.dtstart, Time);\n    if (!start) {\n      throw new Error('.dtstart (ICAL.Time) must be given');\n    } else {\n      this.dtstart = start;\n    }\n    if (options.component) {\n      this._init(options.component);\n    } else {\n      this.last = formatClassType(options.last, Time) || start.clone();\n      if (!options.ruleIterators) {\n        throw new Error('.ruleIterators or .component must be given');\n      }\n      this.ruleIterators = options.ruleIterators.map(function (item) {\n        return formatClassType(item, RecurIterator);\n      });\n      this.ruleDateInc = options.ruleDateInc;\n      this.exDateInc = options.exDateInc;\n      if (options.ruleDates) {\n        this.ruleDates = options.ruleDates.map(item => formatClassType(item, Time));\n        this.ruleDate = this.ruleDates[this.ruleDateInc];\n      }\n      if (options.exDates) {\n        this.exDates = options.exDates.map(item => formatClassType(item, Time));\n        this.exDate = this.exDates[this.exDateInc];\n      }\n      if (typeof options.complete !== 'undefined') {\n        this.complete = options.complete;\n      }\n    }\n  }\n\n  /**\n   * Retrieve the next occurrence in the series.\n   * @return {Time}\n   */\n  next() {\n    let iter;\n    let next;\n    let compare;\n    let maxTries = 500;\n    let currentTry = 0;\n    while (true) {\n      if (currentTry++ > maxTries) {\n        throw new Error('max tries have occurred, rule may be impossible to fulfill.');\n      }\n      next = this.ruleDate;\n      iter = this._nextRecurrenceIter(this.last);\n\n      // no more matches\n      // because we increment the rule day or rule\n      // _after_ we choose a value this should be\n      // the only spot where we need to worry about the\n      // end of events.\n      if (!next && !iter) {\n        // there are no more iterators or rdates\n        this.complete = true;\n        break;\n      }\n\n      // no next rule day or recurrence rule is first.\n      if (!next || iter && next.compare(iter.last) > 0) {\n        // must be cloned, recur will reuse the time element.\n        next = iter.last.clone();\n        // move to next so we can continue\n        iter.next();\n      }\n\n      // if the ruleDate is still next increment it.\n      if (this.ruleDate === next) {\n        this._nextRuleDay();\n      }\n      this.last = next;\n\n      // check the negative rules\n      if (this.exDate) {\n        compare = this.exDate.compare(this.last);\n        if (compare < 0) {\n          this._nextExDay();\n        }\n\n        // if the current rule is excluded skip it.\n        if (compare === 0) {\n          this._nextExDay();\n          continue;\n        }\n      }\n\n      //XXX: The spec states that after we resolve the final\n      //     list of dates we execute exdate this seems somewhat counter\n      //     intuitive to what I have seen most servers do so for now\n      //     I exclude based on the original date not the one that may\n      //     have been modified by the exception.\n      return this.last;\n    }\n  }\n\n  /**\n   * Converts object into a serialize-able format. This format can be passed\n   * back into the expansion to resume iteration.\n   * @return {Object}\n   */\n  toJSON() {\n    function toJSON(item) {\n      return item.toJSON();\n    }\n    let result = Object.create(null);\n    result.ruleIterators = this.ruleIterators.map(toJSON);\n    if (this.ruleDates) {\n      result.ruleDates = this.ruleDates.map(toJSON);\n    }\n    if (this.exDates) {\n      result.exDates = this.exDates.map(toJSON);\n    }\n    result.ruleDateInc = this.ruleDateInc;\n    result.exDateInc = this.exDateInc;\n    result.last = this.last.toJSON();\n    result.dtstart = this.dtstart.toJSON();\n    result.complete = this.complete;\n    return result;\n  }\n\n  /**\n   * Extract all dates from the properties in the given component. The\n   * properties will be filtered by the property name.\n   *\n   * @private\n   * @param {Component} component             The component to search in\n   * @param {String} propertyName             The property name to search for\n   * @return {Time[]}                         The extracted dates.\n   */\n  _extractDates(component, propertyName) {\n    let result = [];\n    let props = component.getAllProperties(propertyName);\n    for (let i = 0, len = props.length; i < len; i++) {\n      for (let prop of props[i].getValues()) {\n        let idx = binsearchInsert(result, prop, (a, b) => a.compare(b));\n\n        // ordered insert\n        result.splice(idx, 0, prop);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Initialize the recurrence expansion.\n   *\n   * @private\n   * @param {Component} component    The component to initialize from.\n   */\n  _init(component) {\n    this.ruleIterators = [];\n    this.last = this.dtstart.clone();\n\n    // to provide api consistency non-recurring\n    // events can also use the iterator though it will\n    // only return a single time.\n    if (!component.hasProperty('rdate') && !component.hasProperty('rrule') && !component.hasProperty('recurrence-id')) {\n      this.ruleDate = this.last.clone();\n      this.complete = true;\n      return;\n    }\n    if (component.hasProperty('rdate')) {\n      this.ruleDates = this._extractDates(component, 'rdate');\n\n      // special hack for cases where first rdate is prior\n      // to the start date. We only check for the first rdate.\n      // This is mostly for google's crazy recurring date logic\n      // (contacts birthdays).\n      if (this.ruleDates[0] && this.ruleDates[0].compare(this.dtstart) < 0) {\n        this.ruleDateInc = 0;\n        this.last = this.ruleDates[0].clone();\n      } else {\n        this.ruleDateInc = binsearchInsert(this.ruleDates, this.last, (a, b) => a.compare(b));\n      }\n      this.ruleDate = this.ruleDates[this.ruleDateInc];\n    }\n    if (component.hasProperty('rrule')) {\n      let rules = component.getAllProperties('rrule');\n      let i = 0;\n      let len = rules.length;\n      let rule;\n      let iter;\n      for (; i < len; i++) {\n        rule = rules[i].getFirstValue();\n        iter = rule.iterator(this.dtstart);\n        this.ruleIterators.push(iter);\n\n        // increment to the next occurrence so future\n        // calls to next return times beyond the initial iteration.\n        // XXX: I find this suspicious might be a bug?\n        iter.next();\n      }\n    }\n    if (component.hasProperty('exdate')) {\n      this.exDates = this._extractDates(component, 'exdate');\n      // if we have a .last day we increment the index to beyond it.\n      this.exDateInc = binsearchInsert(this.exDates, this.last, (a, b) => a.compare(b));\n      this.exDate = this.exDates[this.exDateInc];\n    }\n  }\n\n  /**\n   * Advance to the next exdate\n   * @private\n   */\n  _nextExDay() {\n    this.exDate = this.exDates[++this.exDateInc];\n  }\n\n  /**\n   * Advance to the next rule date\n   * @private\n   */\n  _nextRuleDay() {\n    this.ruleDate = this.ruleDates[++this.ruleDateInc];\n  }\n\n  /**\n   * Find and return the recurrence rule with the most recent event and\n   * return it.\n   *\n   * @private\n   * @return {?RecurIterator}    Found iterator.\n   */\n  _nextRecurrenceIter() {\n    let iters = this.ruleIterators;\n    if (iters.length === 0) {\n      return null;\n    }\n    let len = iters.length;\n    let iter;\n    let iterTime;\n    let iterIdx = 0;\n    let chosenIter;\n\n    // loop through each iterator\n    for (; iterIdx < len; iterIdx++) {\n      iter = iters[iterIdx];\n      iterTime = iter.last;\n\n      // if iteration is complete\n      // then we must exclude it from\n      // the search and remove it.\n      if (iter.completed) {\n        len--;\n        if (iterIdx !== 0) {\n          iterIdx--;\n        }\n        iters.splice(iterIdx, 1);\n        continue;\n      }\n\n      // find the most recent possible choice\n      if (!chosenIter || chosenIter.last.compare(iterTime) > 0) {\n        // that iterator is saved\n        chosenIter = iter;\n      }\n    }\n\n    // the chosen iterator is returned but not mutated\n    // this iterator contains the most recent event.\n    return chosenIter;\n  }\n}\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n/**\n * This lets typescript resolve our custom types in the\n * generated d.ts files (jsdoc typedefs are converted to typescript types).\n * Ignore prevents the typedefs from being documented more than once.\n * @ignore\n * @typedef {import(\"./types.js\").frequencyValues} frequencyValues\n * Imports the 'frequencyValues' type from the \"types.js\" module\n * @typedef {import(\"./types.js\").occurrenceDetails} occurrenceDetails\n * Imports the 'occurrenceDetails' type from the \"types.js\" module\n */\n\n/**\n * ICAL.js is organized into multiple layers. The bottom layer is a raw jCal\n * object, followed by the component/property layer. The highest level is the\n * event representation, which this class is part of. See the\n * {@tutorial layers} guide for more details.\n *\n * @memberof ICAL\n */\nclass Event {\n  /**\n   * Creates a new ICAL.Event instance.\n   *\n   * @param {Component=} component              The ICAL.Component to base this event on\n   * @param {Object} [options]                  Options for this event\n   * @param {Boolean=} options.strictExceptions  When true, will verify exceptions are related by\n   *                                              their UUID\n   * @param {Array<Component|Event>=} options.exceptions\n   *          Exceptions to this event, either as components or events. If not\n   *            specified exceptions will automatically be set in relation of\n   *            component's parent\n   */\n  constructor(component, options) {\n    if (!(component instanceof Component)) {\n      options = component;\n      component = null;\n    }\n    if (component) {\n      this.component = component;\n    } else {\n      this.component = new Component('vevent');\n    }\n    this._rangeExceptionCache = Object.create(null);\n    this.exceptions = Object.create(null);\n    this.rangeExceptions = [];\n    if (options && options.strictExceptions) {\n      this.strictExceptions = options.strictExceptions;\n    }\n    if (options && options.exceptions) {\n      options.exceptions.forEach(this.relateException, this);\n    } else if (this.component.parent && !this.isRecurrenceException()) {\n      this.component.parent.getAllSubcomponents('vevent').forEach(function (event) {\n        if (event.hasProperty('recurrence-id')) {\n          this.relateException(event);\n        }\n      }, this);\n    }\n  }\n  static THISANDFUTURE = 'THISANDFUTURE';\n\n  /**\n   * List of related event exceptions.\n   *\n   * @type {Event[]}\n   */\n  exceptions = null;\n\n  /**\n   * When true, will verify exceptions are related by their UUID.\n   *\n   * @type {Boolean}\n   */\n  strictExceptions = false;\n\n  /**\n   * Relates a given event exception to this object.  If the given component\n   * does not share the UID of this event it cannot be related and will throw\n   * an exception.\n   *\n   * If this component is an exception it cannot have other exceptions\n   * related to it.\n   *\n   * @param {Component|Event} obj       Component or event\n   */\n  relateException(obj) {\n    if (this.isRecurrenceException()) {\n      throw new Error('cannot relate exception to exceptions');\n    }\n    if (obj instanceof Component) {\n      obj = new Event(obj);\n    }\n    if (this.strictExceptions && obj.uid !== this.uid) {\n      throw new Error('attempted to relate unrelated exception');\n    }\n    let id = obj.recurrenceId.toString();\n\n    // we don't sort or manage exceptions directly\n    // here the recurrence expander handles that.\n    this.exceptions[id] = obj;\n\n    // index RANGE=THISANDFUTURE exceptions so we can\n    // look them up later in getOccurrenceDetails.\n    if (obj.modifiesFuture()) {\n      let item = [obj.recurrenceId.toUnixTime(), id];\n\n      // we keep them sorted so we can find the nearest\n      // value later on...\n      let idx = binsearchInsert(this.rangeExceptions, item, compareRangeException);\n      this.rangeExceptions.splice(idx, 0, item);\n    }\n  }\n\n  /**\n   * Checks if this record is an exception and has the RANGE=THISANDFUTURE\n   * value.\n   *\n   * @return {Boolean}        True, when exception is within range\n   */\n  modifiesFuture() {\n    if (!this.component.hasProperty('recurrence-id')) {\n      return false;\n    }\n    let range = this.component.getFirstProperty('recurrence-id').getParameter('range');\n    return range === Event.THISANDFUTURE;\n  }\n\n  /**\n   * Finds the range exception nearest to the given date.\n   *\n   * @param {Time} time   usually an occurrence time of an event\n   * @return {?Event}     the related event/exception or null\n   */\n  findRangeException(time) {\n    if (!this.rangeExceptions.length) {\n      return null;\n    }\n    let utc = time.toUnixTime();\n    let idx = binsearchInsert(this.rangeExceptions, [utc], compareRangeException);\n    idx -= 1;\n\n    // occurs before\n    if (idx < 0) {\n      return null;\n    }\n    let rangeItem = this.rangeExceptions[idx];\n\n    /* c8 ignore next 4 */\n    if (utc < rangeItem[0]) {\n      // sanity check only\n      return null;\n    }\n    return rangeItem[1];\n  }\n\n  /**\n   * Returns the occurrence details based on its start time.  If the\n   * occurrence has an exception will return the details for that exception.\n   *\n   * NOTE: this method is intend to be used in conjunction\n   *       with the {@link ICAL.Event#iterator iterator} method.\n   *\n   * @param {Time} occurrence               time occurrence\n   * @return {occurrenceDetails}            Information about the occurrence\n   */\n  getOccurrenceDetails(occurrence) {\n    let id = occurrence.toString();\n    let utcId = occurrence.convertToZone(Timezone.utcTimezone).toString();\n    let item;\n    let result = {\n      //XXX: Clone?\n      recurrenceId: occurrence\n    };\n    if (id in this.exceptions) {\n      item = result.item = this.exceptions[id];\n      result.startDate = item.startDate;\n      result.endDate = item.endDate;\n      result.item = item;\n    } else if (utcId in this.exceptions) {\n      item = this.exceptions[utcId];\n      result.startDate = item.startDate;\n      result.endDate = item.endDate;\n      result.item = item;\n    } else {\n      // range exceptions (RANGE=THISANDFUTURE) have a\n      // lower priority then direct exceptions but\n      // must be accounted for first. Their item is\n      // always the first exception with the range prop.\n      let rangeExceptionId = this.findRangeException(occurrence);\n      let end;\n      if (rangeExceptionId) {\n        let exception = this.exceptions[rangeExceptionId];\n\n        // range exception must modify standard time\n        // by the difference (if any) in start/end times.\n        result.item = exception;\n        let startDiff = this._rangeExceptionCache[rangeExceptionId];\n        if (!startDiff) {\n          let original = exception.recurrenceId.clone();\n          let newStart = exception.startDate.clone();\n\n          // zones must be same otherwise subtract may be incorrect.\n          original.zone = newStart.zone;\n          startDiff = newStart.subtractDate(original);\n          this._rangeExceptionCache[rangeExceptionId] = startDiff;\n        }\n        let start = occurrence.clone();\n        start.zone = exception.startDate.zone;\n        start.addDuration(startDiff);\n        end = start.clone();\n        end.addDuration(exception.duration);\n        result.startDate = start;\n        result.endDate = end;\n      } else {\n        // no range exception standard expansion\n        end = occurrence.clone();\n        end.addDuration(this.duration);\n        result.endDate = end;\n        result.startDate = occurrence;\n        result.item = this;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Builds a recur expansion instance for a specific point in time (defaults\n   * to startDate).\n   *\n   * @param {Time=} startTime     Starting point for expansion\n   * @return {RecurExpansion}    Expansion object\n   */\n  iterator(startTime) {\n    return new RecurExpansion({\n      component: this.component,\n      dtstart: startTime || this.startDate\n    });\n  }\n\n  /**\n   * Checks if the event is recurring\n   *\n   * @return {Boolean}        True, if event is recurring\n   */\n  isRecurring() {\n    let comp = this.component;\n    return comp.hasProperty('rrule') || comp.hasProperty('rdate');\n  }\n\n  /**\n   * Checks if the event describes a recurrence exception. See\n   * {@tutorial terminology} for details.\n   *\n   * @return {Boolean}    True, if the event describes a recurrence exception\n   */\n  isRecurrenceException() {\n    return this.component.hasProperty('recurrence-id');\n  }\n\n  /**\n   * Returns the types of recurrences this event may have.\n   *\n   * Returned as an object with the following possible keys:\n   *\n   *    - YEARLY\n   *    - MONTHLY\n   *    - WEEKLY\n   *    - DAILY\n   *    - MINUTELY\n   *    - SECONDLY\n   *\n   * @return {Object.<frequencyValues, Boolean>}\n   *          Object of recurrence flags\n   */\n  getRecurrenceTypes() {\n    let rules = this.component.getAllProperties('rrule');\n    let i = 0;\n    let len = rules.length;\n    let result = Object.create(null);\n    for (; i < len; i++) {\n      let value = rules[i].getFirstValue();\n      result[value.freq] = true;\n    }\n    return result;\n  }\n\n  /**\n   * The uid of this event\n   * @type {String}\n   */\n  get uid() {\n    return this._firstProp('uid');\n  }\n  set uid(value) {\n    this._setProp('uid', value);\n  }\n\n  /**\n   * The start date\n   * @type {Time}\n   */\n  get startDate() {\n    return this._firstProp('dtstart');\n  }\n  set startDate(value) {\n    this._setTime('dtstart', value);\n  }\n\n  /**\n   * The end date. This can be the result directly from the property, or the\n   * end date calculated from start date and duration. Setting the property\n   * will remove any duration properties.\n   * @type {Time}\n   */\n  get endDate() {\n    let endDate = this._firstProp('dtend');\n    if (!endDate) {\n      let duration = this._firstProp('duration');\n      endDate = this.startDate.clone();\n      if (duration) {\n        endDate.addDuration(duration);\n      } else if (endDate.isDate) {\n        endDate.day += 1;\n      }\n    }\n    return endDate;\n  }\n  set endDate(value) {\n    if (this.component.hasProperty('duration')) {\n      this.component.removeProperty('duration');\n    }\n    this._setTime('dtend', value);\n  }\n\n  /**\n   * The duration. This can be the result directly from the property, or the\n   * duration calculated from start date and end date. Setting the property\n   * will remove any `dtend` properties.\n   * @type {Duration}\n   */\n  get duration() {\n    let duration = this._firstProp('duration');\n    if (!duration) {\n      return this.endDate.subtractDateTz(this.startDate);\n    }\n    return duration;\n  }\n  set duration(value) {\n    if (this.component.hasProperty('dtend')) {\n      this.component.removeProperty('dtend');\n    }\n    this._setProp('duration', value);\n  }\n\n  /**\n   * The location of the event.\n   * @type {String}\n   */\n  get location() {\n    return this._firstProp('location');\n  }\n  set location(value) {\n    this._setProp('location', value);\n  }\n\n  /**\n   * The attendees in the event\n   * @type {Property[]}\n   */\n  get attendees() {\n    //XXX: This is way lame we should have a better\n    //     data structure for this later.\n    return this.component.getAllProperties('attendee');\n  }\n\n  /**\n   * The event summary\n   * @type {String}\n   */\n  get summary() {\n    return this._firstProp('summary');\n  }\n  set summary(value) {\n    this._setProp('summary', value);\n  }\n\n  /**\n   * The event description.\n   * @type {String}\n   */\n  get description() {\n    return this._firstProp('description');\n  }\n  set description(value) {\n    this._setProp('description', value);\n  }\n\n  /**\n   * The event color from [rfc7986](https://datatracker.ietf.org/doc/html/rfc7986)\n   * @type {String}\n   */\n  get color() {\n    return this._firstProp('color');\n  }\n  set color(value) {\n    this._setProp('color', value);\n  }\n\n  /**\n   * The organizer value as an uri. In most cases this is a mailto: uri, but\n   * it can also be something else, like urn:uuid:...\n   * @type {String}\n   */\n  get organizer() {\n    return this._firstProp('organizer');\n  }\n  set organizer(value) {\n    this._setProp('organizer', value);\n  }\n\n  /**\n   * The sequence value for this event. Used for scheduling\n   * see {@tutorial terminology}.\n   * @type {Number}\n   */\n  get sequence() {\n    return this._firstProp('sequence');\n  }\n  set sequence(value) {\n    this._setProp('sequence', value);\n  }\n\n  /**\n   * The recurrence id for this event. See {@tutorial terminology} for details.\n   * @type {Time}\n   */\n  get recurrenceId() {\n    return this._firstProp('recurrence-id');\n  }\n  set recurrenceId(value) {\n    this._setTime('recurrence-id', value);\n  }\n\n  /**\n   * Set/update a time property's value.\n   * This will also update the TZID of the property.\n   *\n   * TODO: this method handles the case where we are switching\n   * from a known timezone to an implied timezone (one without TZID).\n   * This does _not_ handle the case of moving between a known\n   *  (by TimezoneService) timezone to an unknown timezone...\n   *\n   * We will not add/remove/update the VTIMEZONE subcomponents\n   *  leading to invalid ICAL data...\n   * @private\n   * @param {String} propName     The property name\n   * @param {Time} time           The time to set\n   */\n  _setTime(propName, time) {\n    let prop = this.component.getFirstProperty(propName);\n    if (!prop) {\n      prop = new Property(propName);\n      this.component.addProperty(prop);\n    }\n\n    // utc and local don't get a tzid\n    if (time.zone === Timezone.localTimezone || time.zone === Timezone.utcTimezone) {\n      // remove the tzid\n      prop.removeParameter('tzid');\n    } else {\n      prop.setParameter('tzid', time.zone.tzid);\n    }\n    prop.setValue(time);\n  }\n  _setProp(name, value) {\n    this.component.updatePropertyWithValue(name, value);\n  }\n  _firstProp(name) {\n    return this.component.getFirstPropertyValue(name);\n  }\n\n  /**\n   * The string representation of this event.\n   * @return {String}\n   */\n  toString() {\n    return this.component.toString();\n  }\n}\nfunction compareRangeException(a, b) {\n  if (a[0] > b[0]) return 1;\n  if (b[0] > a[0]) return -1;\n  return 0;\n}\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n/**\n * The ComponentParser is used to process a String or jCal Object,\n * firing callbacks for various found components, as well as completion.\n *\n * @example\n * var options = {\n *   // when false no events will be emitted for type\n *   parseEvent: true,\n *   parseTimezone: true\n * };\n *\n * var parser = new ICAL.ComponentParser(options);\n *\n * parser.onevent(eventComponent) {\n *   //...\n * }\n *\n * // ontimezone, etc...\n *\n * parser.oncomplete = function() {\n *\n * };\n *\n * parser.process(stringOrComponent);\n *\n * @memberof ICAL\n */\nclass ComponentParser {\n  /**\n   * Creates a new ICAL.ComponentParser instance.\n   *\n   * @param {Object=} options                   Component parser options\n   * @param {Boolean} options.parseEvent        Whether events should be parsed\n   * @param {Boolean} options.parseTimezeone    Whether timezones should be parsed\n   */\n  constructor(options) {\n    if (typeof options === 'undefined') {\n      options = {};\n    }\n    for (let [key, value] of Object.entries(options)) {\n      this[key] = value;\n    }\n  }\n\n  /**\n   * When true, parse events\n   *\n   * @type {Boolean}\n   */\n  parseEvent = true;\n\n  /**\n   * When true, parse timezones\n   *\n   * @type {Boolean}\n   */\n  parseTimezone = true;\n\n  /* SAX like events here for reference */\n\n  /**\n   * Fired when parsing is complete\n   * @callback\n   */\n  oncomplete = /* c8 ignore next */function () {};\n\n  /**\n   * Fired if an error occurs during parsing.\n   *\n   * @callback\n   * @param {Error} err details of error\n   */\n  onerror = /* c8 ignore next */function (err) {};\n\n  /**\n   * Fired when a top level component (VTIMEZONE) is found\n   *\n   * @callback\n   * @param {Timezone} component     Timezone object\n   */\n  ontimezone = /* c8 ignore next */function (component) {};\n\n  /**\n   * Fired when a top level component (VEVENT) is found.\n   *\n   * @callback\n   * @param {Event} component    Top level component\n   */\n  onevent = /* c8 ignore next */function (component) {};\n\n  /**\n   * Process a string or parse ical object.  This function itself will return\n   * nothing but will start the parsing process.\n   *\n   * Events must be registered prior to calling this method.\n   *\n   * @param {Component|String|Object} ical      The component to process,\n   *        either in its final form, as a jCal Object, or string representation\n   */\n  process(ical) {\n    //TODO: this is sync now in the future we will have a incremental parser.\n    if (typeof ical === 'string') {\n      ical = parse(ical);\n    }\n    if (!(ical instanceof Component)) {\n      ical = new Component(ical);\n    }\n    let components = ical.getAllSubcomponents();\n    let i = 0;\n    let len = components.length;\n    let component;\n    for (; i < len; i++) {\n      component = components[i];\n      switch (component.name) {\n        case 'vtimezone':\n          if (this.parseTimezone) {\n            let tzid = component.getFirstPropertyValue('tzid');\n            if (tzid) {\n              this.ontimezone(new Timezone({\n                tzid: tzid,\n                component: component\n              }));\n            }\n          }\n          break;\n        case 'vevent':\n          if (this.parseEvent) {\n            this.onevent(new Event(component));\n          }\n          break;\n        default:\n          continue;\n      }\n    }\n\n    //XXX: ideally we should do a \"nextTick\" here\n    //     so in all cases this is actually async.\n    this.oncomplete();\n  }\n}\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n/**\n * The main ICAL module. Provides access to everything else.\n *\n * @alias ICAL\n * @namespace ICAL\n * @property {ICAL.design} design\n * @property {ICAL.helpers} helpers\n */\nvar ICALmodule = {\n  /**\n   * The number of characters before iCalendar line folding should occur\n   * @type {Number}\n   * @default 75\n   */\n  foldLength: 75,\n  debug: false,\n  /**\n   * The character(s) to be used for a newline. The default value is provided by\n   * rfc5545.\n   * @type {String}\n   * @default \"\\r\\n\"\n   */\n  newLineChar: '\\r\\n',\n  Binary,\n  Component,\n  ComponentParser,\n  Duration,\n  Event,\n  Period,\n  Property,\n  Recur,\n  RecurExpansion,\n  RecurIterator,\n  Time,\n  Timezone,\n  TimezoneService,\n  UtcOffset,\n  VCardTime,\n  parse,\n  stringify,\n  design: design$1,\n  helpers\n};\nexport { ICALmodule as default };","map":{"version":3,"names":["Binary","fromString","aString","constructor","aValue","value","icaltype","decodeValue","_b64_decode","setEncodedValue","_b64_encode","data","b64","o1","o2","o3","h1","h2","h3","h4","bits","i","ac","enc","tmp_arr","charCodeAt","charAt","length","join","r","slice","dec","indexOf","String","fromCharCode","toString","DURATION_LETTERS","DATA_PROPS_TO_COPY","Duration","fromSeconds","aSeconds","isValueString","string","aStr","pos","dict","Object","create","chunks","search","type","numeric","Math","max","parseDurationChunk","Error","fromData","aData","wrappedJSObject","weeks","days","hours","minutes","seconds","isNegative","icalclass","clone","toSeconds","secs","abs","trunc","prop","reset","compare","aOther","thisSeconds","otherSeconds","normalize","str","toICALString","letter","number","object","num","parseInt","isStrictlyNaN","Time","_dowCache","_wnCache","daysInMonth","month","year","_daysInMonth","isLeapYear","fromDayOfYear","aDayOfYear","aYear","doy","tt","auto_normalize","is_leap","daysInYearPassedMonth","isDate","day","fromStringv2","fromDateString","strictParseInt","fromDateTimeString","zone","zoneId","Timezone","utcTimezone","getParameter","parent","name","localTimezone","getTimeZoneByID","timeData","hour","minute","second","timezone","aProperty","fromJSDate","aDate","useUTC","aZone","t","now","Date","weekOneStarts","aWeekStart","dow","dayOfWeek","wkst","DEFAULT_WEEK_START","THURSDAY","getDominicalLetter","yr","LTRS","dom","isLeap","epochTime","_cmp_attr","a","b","attr","SUNDAY","MONDAY","TUESDAY","WEDNESDAY","FRIDAY","SATURDAY","time","_time","_cachedUnixTime","_pendingNormalization","resetTo","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","key","entries","TimezoneService","get","firstDow","dowCacheKey","q","m","Y","h","dayOfYear","diypm","startOfWeek","result","endOfWeek","startOfMonth","endOfMonth","startOfYear","endOfYear","startDoyWeek","aFirstDayOfWeek","delta","nthWeekDay","aDayOfWeek","aPos","weekday","start","otherDay","startDow","offset","endDow","isNthWeekDay","weekNumber","wnCacheKey","week1","dt","isoyear","daysBetween","subtractDate","answer","addDuration","aDuration","mult","unixTime","toUnixTime","utcOffset","other","subtractDateTz","compareDateOnlyTz","tz","convertToZone","rc","copy","zone_equals","tzid","convert_time","design$1","icalendar","toICAL","date","pad2","toJSDate","_normalize","adjust","aExtraDays","aExtraHours","aExtraMinutes","aExtraSeconds","aTime","minutesOverflow","hoursOverflow","daysOverflow","yearsOverflow","fromUnixTime","ms","UTC","toJSON","len","setupNormalizeAttributes","defineAttr","defineProperty","prototype","getTimeAttr","set","setTimeAttr","val","CHAR","VALUE_DELIMITER","PARAM_DELIMITER","PARAM_NAME_DELIMITER","DEFAULT_VALUE_TYPE$1","DEFAULT_PARAM_TYPE","RFC6868_REPLACE_MAP$1","parse","input","state","root","component","stack","_eachLine","err","line","_handleContentLine","ParserError","property","designSet","defaultSet","valuePos","paramPos","lastParamIndex","lastValuePos","params","parsedParams","toLowerCase","_parseParameters","newComponent","push","getDesignSet","pop","valueType","multiValue","structuredValue","propertyDetails","splitName","ungroupedName","propertyGroups","split","group","detectType","defaultType","_parseMultiValue","_parseValue","fromICAL","lastParam","delim","lcname","mvdelim","param","multiValueSeparateDQuote","_rfc6868Escape","nextChar","extendedValue","propValuePos","nextPos","length_before","delimiter","Array","isArray","replace","x","buffer","innerMulti","lastPos","unescapedIndexOf","callback","firstChar","newlineOffset","trim","OPTIONS","_compare_change_fn","from_zone","to_zone","adjust_change","change","call","_minimumExpansionYear","EXTRA_COVERAGE","location","tznames","latitude","longitude","expandedUntilYear","changes","Component","jCal","getFirstPropertyValue","_ensureCoverage","tt_change","change_num","_findNearbyChange","change_num_to_use","step","prevUtcOffset","cmp","zone_change","utcOffset_change","tmp_change","prev_zone_change","want_daylight","is_daylight","idx","binsearchInsert","today","changesEndYear","subcomps","getAllSubcomponents","compLen","compIdx","_expandComponent","sort","aComponent","hasProperty","dtstart","getFirstProperty","getFirstValue","convert_tzoffset","factor","init_changes","changebase","props","getAllProperties","rdate","rrule","until","iterator","occ","next","zones","count","keys","utc","Z","GMT","_hard_reset","has","register","TypeError","remove","updateTimezones","vcal","allsubs","properties","vtimezones","reqTzid","concat","comp","removeSubcomponent","addSubcomponent","isNaN","formatClassType","undefined","list","seekVal","cmpfunc","low","high","mid","cmpval","floor","aSrc","aDeep","getTime","arr","obj","foldline","aLine","line_length","cp","codePointAt","ICALmodule","foldLength","newLineChar","ceil","extend","source","target","descr","getOwnPropertyDescriptor","helpers","freeze","__proto__","UtcOffset","options","instance","VCardTime","fromDateAndOrTimeString","aIcalType","part","v","s","e","parts","tmz","splitzone","vcard","_splitZone","tm","dtlen","tmlen","hasDashDate","hasDashTime","o","apply","arguments","y","d","mm","hasYear","hasMonth","hasDay","hasHour","hasMinute","hasSecond","datepart","timepart","RecurIterator","_indexMap","_expandMap","UNKNOWN","CONTRACT","EXPAND","ILLEGAL","completed","rule","last","occurrence_number","by_indices","initialized","by_data","days_index","Recur","init","InvalidRecurrenceRuleError","sort_byday_rules","BYDAY","freq","setup_defaults","ruleDayOfWeek","wkdy","dayName","numericDayToIcalDay","untilYear","expand_year_days","increment_year","interval","_nextByYearDay","has_by_data","tempLast","initLast","bydow","dayOfMonth","increment_month","_byDayAndMonthDay","normalized","normalizeByMonthDayRules","BYMONTHDAY","filter","next_month","again","before","valid","next_second","next_minute","next_hour","next_day","next_week","next_year","check_contracting_rules","next_generic","increment_second","inc","increment_generic","increment_minute","increment_hour","this_freq","increment_monthday","end_of_data","next_weekday_by_week","BYWEEKNO","week_no","rules","newRules","ruleIdx","isInit","byMonthDay","byDay","dateIdx","dateLen","dayLen","dataIsValid","self","lastDay","initMonth","nextMonth","monthsCounter","dayIdx","data_valid","setpos","setpos_total","last_day","is_day_in_byday","check_set_position","coded_day","matches","match","icalDayToNumericDay","aRuleType","aInterval","aDateAttr","aFollowingAttr","aPreviousIncr","has_by_rule","dta","BYMONTH","years","aFactor","aNextIncrement","nextunit","validWeeks","monthIdx","first_week","last_week","weekIdx","weekno","partCount","t1","t2","monthday","t3","expand_by_day","first_dow","doy_offset","last_dow","by_month_day","spIndex","bydayParts","month_day","first_matching_day","last_matching_day","expandedDays","BYYEARDAY","daysInYear","days_list","tmp","start_dow","end_dow","end_year_day","tmp_start_doy","first","this_dow","BYSETPOS","aRules","j","one","two","check_contract_restriction","indexMapValue","ruleMapValue","pass","ruleType","bydata","weekNo","req","deftime","VALID_DAY_NAMES","VALID_BYDAY_PART","DOW_MAP","SU","MO","TU","WE","TH","FR","SA","REVERSE_DOW_MAP","fromEntries","map","entry","reverse","ALLOWED_FREQ","_stringToData","fmtIcal","values","ucname","toUpperCase","partDesign","partArr","partSet","Set","add","optionDesign","aStart","isFinite","isByCount","addComponent","aType","setComponent","aValues","getComponent","getNextOccurrence","aStartTime","aRecurrenceId","iter","uckey","INTERVAL","res","k","kparts","parseNumericValue","min","FREQ","COUNT","UNTIL","WKST","test","BYSECOND","bind","BYMINUTE","BYHOUR","Period","end","duration","fromJSON","aProp","aLenient","fromDateOrDateTimeString","dateProp","getDuration","getEnd","FROM_ICAL_NEWLINE","TO_ICAL_NEWLINE","FROM_VCARD_NEWLINE","TO_VCARD_NEWLINE","createTextType","fromNewline","toNewline","structuredEscape","replaceNewline","regEx","RegExp","flags","DEFAULT_TYPE_TEXT","DEFAULT_TYPE_TEXT_MULTI","DEFAULT_TYPE_TEXT_STRUCTURED","DEFAULT_TYPE_INTEGER","DEFAULT_TYPE_DATETIME_DATE","allowedTypes","DEFAULT_TYPE_DATETIME","DEFAULT_TYPE_URI","DEFAULT_TYPE_UTCOFFSET","DEFAULT_TYPE_RECUR","DEFAULT_TYPE_DATE_ANDOR_TIME","replaceNewlineReplace","newline","commonProperties","commonValues","float","parsed","parseFloat","integer","decorate","undecorate","icalParams","allowXName","allowIanaToken","icalValues","text","uri","aBinary","design","strict","period","recur","aRecur","icalProperties","vcardValues","isFromIcal","lastChar","signChar","sign","timestamp","from","c","vcardParams","vcardProperties","vcard3Values","binary","vcard3Params","vcard3Properties","fn","n","nickname","photo","bday","adr","label","tel","email","mailer","geo","title","role","logo","agent","org","note","prodid","rev","sound","class","icalSet","vcardSet","vcard3Set","components","vcard3","vevent","vtodo","vjournal","valarm","vtimezone","daylight","standard","componentName","isInDesign","LINE_ENDING","DEFAULT_VALUE_TYPE","RFC6868_REPLACE_MAP","stringify","propIdx","propLen","designSetName","comps","noFold","jsName","groupName","paramName","paramDesign","_rfc6868Unescape","paramPropertyValue","propDetails","isDefault","force","NAME_INDEX$1","PROP_INDEX","TYPE_INDEX","VALUE_INDEX","Property","_parent","getDefaultType","_updateType","p","designSetChanged","_designSet","isDecorated","isMultiValue","isStructuredValue","_hydrateValue","index","_values","_decorate","_undecorate","_setDecoratedValue","getFirstParameter","parameters","setParameter","removeParameter","details","resetType","removeAllValues","getValues","setValues","setValue","NAME_INDEX","PROPERTY_INDEX","COMPONENT_INDEX","_timezoneCache","Map","_hydratedPropertyCount","_hydratedComponentCount","_components","_properties","parentDesign","_hydrateComponent","_hydrateProperty","getFirstSubcomponent","jCalLen","_removeObjectByIndex","jCalIndex","cache","splice","_removeObject","nameOrObject","objects","cached","_removeAllObjects","nameOrComp","removed","removeAllSubcomponents","addProperty","removeProperty","addPropertyWithValue","updatePropertyWithValue","nameOrProp","removeAllProperties","hydratedZone","RecurExpansion","ruleDates","exDates","complete","ruleIterators","ruleDateInc","exDateInc","exDate","ruleDate","_init","item","maxTries","currentTry","_nextRecurrenceIter","_nextRuleDay","_nextExDay","_extractDates","propertyName","iters","iterTime","iterIdx","chosenIter","Event","_rangeExceptionCache","exceptions","rangeExceptions","strictExceptions","forEach","relateException","isRecurrenceException","event","THISANDFUTURE","uid","id","recurrenceId","modifiesFuture","compareRangeException","range","findRangeException","rangeItem","getOccurrenceDetails","occurrence","utcId","startDate","endDate","rangeExceptionId","exception","startDiff","original","newStart","startTime","isRecurring","getRecurrenceTypes","_firstProp","_setProp","_setTime","attendees","summary","description","color","organizer","sequence","propName","ComponentParser","parseEvent","parseTimezone","oncomplete","onerror","ontimezone","onevent","process","ical","debug","default"],"sources":["C:/Users/samue/Online_Projects/My_Own_Thing/CS410_Long_Project/new_landing+admin_page/node_modules/ical.js/dist/ical.js"],"sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n/**\n * Represents the BINARY value type, which contains extra methods for encoding and decoding.\n *\n * @memberof ICAL\n */\nclass Binary {\n  /**\n   * Creates a binary value from the given string.\n   *\n   * @param {String} aString        The binary value string\n   * @return {Binary}               The binary value instance\n   */\n  static fromString(aString) {\n    return new Binary(aString);\n  }\n\n  /**\n   * Creates a new ICAL.Binary instance\n   *\n   * @param {String} aValue     The binary data for this value\n   */\n  constructor(aValue) {\n    this.value = aValue;\n  }\n\n  /**\n   * The type name, to be used in the jCal object.\n   * @default \"binary\"\n   * @constant\n   */\n  icaltype = \"binary\";\n\n  /**\n   * Base64 decode the current value\n   *\n   * @return {String}         The base64-decoded value\n   */\n  decodeValue() {\n    return this._b64_decode(this.value);\n  }\n\n  /**\n   * Encodes the passed parameter with base64 and sets the internal\n   * value to the result.\n   *\n   * @param {String} aValue      The raw binary value to encode\n   */\n  setEncodedValue(aValue) {\n    this.value = this._b64_encode(aValue);\n  }\n\n  _b64_encode(data) {\n    // http://kevin.vanzonneveld.net\n    // +   original by: Tyler Akins (http://rumkin.com)\n    // +   improved by: Bayron Guevara\n    // +   improved by: Thunder.m\n    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   bugfixed by: Pellentesque Malesuada\n    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   improved by: Rafa≈Ç Kukawski (http://kukawski.pl)\n    // *     example 1: base64_encode('Kevin van Zonneveld');\n    // *     returns 1: 'S2V2aW4gdmFuIFpvbm5ldmVsZA=='\n    // mozilla has this native\n    // - but breaks in 2.0.0.12!\n    //if (typeof this.window['atob'] == 'function') {\n    //    return atob(data);\n    //}\n    let b64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" +\n              \"abcdefghijklmnopqrstuvwxyz0123456789+/=\";\n    let o1, o2, o3, h1, h2, h3, h4, bits, i = 0,\n      ac = 0,\n      enc = \"\",\n      tmp_arr = [];\n\n    if (!data) {\n      return data;\n    }\n\n    do { // pack three octets into four hexets\n      o1 = data.charCodeAt(i++);\n      o2 = data.charCodeAt(i++);\n      o3 = data.charCodeAt(i++);\n\n      bits = o1 << 16 | o2 << 8 | o3;\n\n      h1 = bits >> 18 & 0x3f;\n      h2 = bits >> 12 & 0x3f;\n      h3 = bits >> 6 & 0x3f;\n      h4 = bits & 0x3f;\n\n      // use hexets to index into b64, and append result to encoded string\n      tmp_arr[ac++] = b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) + b64.charAt(h4);\n    } while (i < data.length);\n\n    enc = tmp_arr.join('');\n\n    let r = data.length % 3;\n\n    return (r ? enc.slice(0, r - 3) : enc) + '==='.slice(r || 3);\n\n  }\n\n  _b64_decode(data) {\n    // http://kevin.vanzonneveld.net\n    // +   original by: Tyler Akins (http://rumkin.com)\n    // +   improved by: Thunder.m\n    // +      input by: Aman Gupta\n    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   bugfixed by: Onno Marsman\n    // +   bugfixed by: Pellentesque Malesuada\n    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +      input by: Brett Zamir (http://brett-zamir.me)\n    // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // *     example 1: base64_decode('S2V2aW4gdmFuIFpvbm5ldmVsZA==');\n    // *     returns 1: 'Kevin van Zonneveld'\n    // mozilla has this native\n    // - but breaks in 2.0.0.12!\n    //if (typeof this.window['btoa'] == 'function') {\n    //    return btoa(data);\n    //}\n    let b64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" +\n              \"abcdefghijklmnopqrstuvwxyz0123456789+/=\";\n    let o1, o2, o3, h1, h2, h3, h4, bits, i = 0,\n      ac = 0,\n      dec = \"\",\n      tmp_arr = [];\n\n    if (!data) {\n      return data;\n    }\n\n    data += '';\n\n    do { // unpack four hexets into three octets using index points in b64\n      h1 = b64.indexOf(data.charAt(i++));\n      h2 = b64.indexOf(data.charAt(i++));\n      h3 = b64.indexOf(data.charAt(i++));\n      h4 = b64.indexOf(data.charAt(i++));\n\n      bits = h1 << 18 | h2 << 12 | h3 << 6 | h4;\n\n      o1 = bits >> 16 & 0xff;\n      o2 = bits >> 8 & 0xff;\n      o3 = bits & 0xff;\n\n      if (h3 == 64) {\n        tmp_arr[ac++] = String.fromCharCode(o1);\n      } else if (h4 == 64) {\n        tmp_arr[ac++] = String.fromCharCode(o1, o2);\n      } else {\n        tmp_arr[ac++] = String.fromCharCode(o1, o2, o3);\n      }\n    } while (i < data.length);\n\n    dec = tmp_arr.join('');\n\n    return dec;\n  }\n\n  /**\n   * The string representation of this value\n   * @return {String}\n   */\n  toString() {\n    return this.value;\n  }\n}\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\nconst DURATION_LETTERS = /([PDWHMTS]{1,1})/;\nconst DATA_PROPS_TO_COPY = [\"weeks\", \"days\", \"hours\", \"minutes\", \"seconds\", \"isNegative\"];\n\n/**\n * This class represents the \"duration\" value type, with various calculation\n * and manipulation methods.\n *\n * @memberof ICAL\n */\nclass Duration {\n  /**\n   * Returns a new ICAL.Duration instance from the passed seconds value.\n   *\n   * @param {Number} aSeconds       The seconds to create the instance from\n   * @return {Duration}             The newly created duration instance\n   */\n  static fromSeconds(aSeconds) {\n    return (new Duration()).fromSeconds(aSeconds);\n  }\n\n  /**\n   * Checks if the given string is an iCalendar duration value.\n   *\n   * @param {String} value      The raw ical value\n   * @return {Boolean}          True, if the given value is of the\n   *                              duration ical type\n   */\n  static isValueString(string) {\n    return (string[0] === 'P' || string[1] === 'P');\n  }\n\n  /**\n   * Creates a new {@link ICAL.Duration} instance from the passed string.\n   *\n   * @param {String} aStr       The string to parse\n   * @return {Duration}         The created duration instance\n   */\n  static fromString(aStr) {\n    let pos = 0;\n    let dict = Object.create(null);\n    let chunks = 0;\n\n    while ((pos = aStr.search(DURATION_LETTERS)) !== -1) {\n      let type = aStr[pos];\n      let numeric = aStr.slice(0, Math.max(0, pos));\n      aStr = aStr.slice(pos + 1);\n\n      chunks += parseDurationChunk(type, numeric, dict);\n    }\n\n    if (chunks < 2) {\n      // There must be at least a chunk with \"P\" and some unit chunk\n      throw new Error(\n        'invalid duration value: Not enough duration components in \"' + aStr + '\"'\n      );\n    }\n\n    return new Duration(dict);\n  }\n\n  /**\n   * Creates a new ICAL.Duration instance from the given data object.\n   *\n   * @param {Object} aData                An object with members of the duration\n   * @param {Number=} aData.weeks         Duration in weeks\n   * @param {Number=} aData.days          Duration in days\n   * @param {Number=} aData.hours         Duration in hours\n   * @param {Number=} aData.minutes       Duration in minutes\n   * @param {Number=} aData.seconds       Duration in seconds\n   * @param {Boolean=} aData.isNegative   If true, the duration is negative\n   * @return {Duration}                   The createad duration instance\n   */\n  static fromData(aData) {\n    return new Duration(aData);\n  }\n\n  /**\n   * Creates a new ICAL.Duration instance.\n   *\n   * @param {Object} data                 An object with members of the duration\n   * @param {Number=} data.weeks          Duration in weeks\n   * @param {Number=} data.days           Duration in days\n   * @param {Number=} data.hours          Duration in hours\n   * @param {Number=} data.minutes        Duration in minutes\n   * @param {Number=} data.seconds        Duration in seconds\n   * @param {Boolean=} data.isNegative    If true, the duration is negative\n   */\n  constructor(data) {\n    this.wrappedJSObject = this;\n    this.fromData(data);\n  }\n\n  /**\n   * The weeks in this duration\n   * @type {Number}\n   * @default 0\n   */\n  weeks = 0;\n\n  /**\n   * The days in this duration\n   * @type {Number}\n   * @default 0\n   */\n  days = 0;\n\n  /**\n   * The days in this duration\n   * @type {Number}\n   * @default 0\n   */\n  hours = 0;\n\n  /**\n   * The minutes in this duration\n   * @type {Number}\n   * @default 0\n   */\n  minutes = 0;\n\n  /**\n   * The seconds in this duration\n   * @type {Number}\n   * @default 0\n   */\n  seconds = 0;\n\n  /**\n   * The seconds in this duration\n   * @type {Boolean}\n   * @default false\n   */\n  isNegative = false;\n\n  /**\n   * The class identifier.\n   * @constant\n   * @type {String}\n   * @default \"icalduration\"\n   */\n  icalclass = \"icalduration\";\n\n  /**\n   * The type name, to be used in the jCal object.\n   * @constant\n   * @type {String}\n   * @default \"duration\"\n   */\n  icaltype = \"duration\";\n\n  /**\n   * Returns a clone of the duration object.\n   *\n   * @return {Duration}      The cloned object\n   */\n  clone() {\n    return Duration.fromData(this);\n  }\n\n  /**\n   * The duration value expressed as a number of seconds.\n   *\n   * @return {Number}             The duration value in seconds\n   */\n  toSeconds() {\n    let seconds = this.seconds + 60 * this.minutes + 3600 * this.hours +\n                  86400 * this.days + 7 * 86400 * this.weeks;\n    return (this.isNegative ? -seconds : seconds);\n  }\n\n  /**\n   * Reads the passed seconds value into this duration object. Afterwards,\n   * members like {@link ICAL.Duration#days days} and {@link ICAL.Duration#weeks weeks} will be set up\n   * accordingly.\n   *\n   * @param {Number} aSeconds     The duration value in seconds\n   * @return {Duration}           Returns this instance\n   */\n  fromSeconds(aSeconds) {\n    let secs = Math.abs(aSeconds);\n\n    this.isNegative = (aSeconds < 0);\n    this.days = trunc(secs / 86400);\n\n    // If we have a flat number of weeks, use them.\n    if (this.days % 7 == 0) {\n      this.weeks = this.days / 7;\n      this.days = 0;\n    } else {\n      this.weeks = 0;\n    }\n\n    secs -= (this.days + 7 * this.weeks) * 86400;\n\n    this.hours = trunc(secs / 3600);\n    secs -= this.hours * 3600;\n\n    this.minutes = trunc(secs / 60);\n    secs -= this.minutes * 60;\n\n    this.seconds = secs;\n    return this;\n  }\n\n  /**\n   * Sets up the current instance using members from the passed data object.\n   *\n   * @param {Object} aData                An object with members of the duration\n   * @param {Number=} aData.weeks         Duration in weeks\n   * @param {Number=} aData.days          Duration in days\n   * @param {Number=} aData.hours         Duration in hours\n   * @param {Number=} aData.minutes       Duration in minutes\n   * @param {Number=} aData.seconds       Duration in seconds\n   * @param {Boolean=} aData.isNegative   If true, the duration is negative\n   */\n  fromData(aData) {\n    for (let prop of DATA_PROPS_TO_COPY) {\n      if (aData && prop in aData) {\n        this[prop] = aData[prop];\n      } else {\n        this[prop] = 0;\n      }\n    }\n  }\n\n  /**\n   * Resets the duration instance to the default values, i.e. PT0S\n   */\n  reset() {\n    this.isNegative = false;\n    this.weeks = 0;\n    this.days = 0;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n  }\n\n  /**\n   * Compares the duration instance with another one.\n   *\n   * @param {Duration} aOther             The instance to compare with\n   * @return {Number}                     -1, 0 or 1 for less/equal/greater\n   */\n  compare(aOther) {\n    let thisSeconds = this.toSeconds();\n    let otherSeconds = aOther.toSeconds();\n    return (thisSeconds > otherSeconds) - (thisSeconds < otherSeconds);\n  }\n\n  /**\n   * Normalizes the duration instance. For example, a duration with a value\n   * of 61 seconds will be normalized to 1 minute and 1 second.\n   */\n  normalize() {\n    this.fromSeconds(this.toSeconds());\n  }\n\n  /**\n   * The string representation of this duration.\n   * @return {String}\n   */\n  toString() {\n    if (this.toSeconds() == 0) {\n      return \"PT0S\";\n    } else {\n      let str = \"\";\n      if (this.isNegative) str += \"-\";\n      str += \"P\";\n      if (this.weeks) str += this.weeks + \"W\";\n      if (this.days) str += this.days + \"D\";\n\n      if (this.hours || this.minutes || this.seconds) {\n        str += \"T\";\n        if (this.hours) str += this.hours + \"H\";\n        if (this.minutes) str += this.minutes + \"M\";\n        if (this.seconds) str += this.seconds + \"S\";\n      }\n      return str;\n    }\n  }\n\n  /**\n   * The iCalendar string representation of this duration.\n   * @return {String}\n   */\n  toICALString() {\n    return this.toString();\n  }\n}\n\n/**\n * Internal helper function to handle a chunk of a duration.\n *\n * @private\n * @param {String} letter type of duration chunk\n * @param {String} number numeric value or -/+\n * @param {Object} dict target to assign values to\n */\nfunction parseDurationChunk(letter, number, object) {\n  let type;\n  switch (letter) {\n    case 'P':\n      if (number && number === '-') {\n        object.isNegative = true;\n      } else {\n        object.isNegative = false;\n      }\n      // period\n      break;\n    case 'D':\n      type = 'days';\n      break;\n    case 'W':\n      type = 'weeks';\n      break;\n    case 'H':\n      type = 'hours';\n      break;\n    case 'M':\n      type = 'minutes';\n      break;\n    case 'S':\n      type = 'seconds';\n      break;\n    default:\n      // Not a valid chunk\n      return 0;\n  }\n\n  if (type) {\n    if (!number && number !== 0) {\n      throw new Error(\n        'invalid duration value: Missing number before \"' + letter + '\"'\n      );\n    }\n    let num = parseInt(number, 10);\n    if (isStrictlyNaN(num)) {\n      throw new Error(\n        'invalid duration value: Invalid number \"' + number + '\" before \"' + letter + '\"'\n      );\n    }\n    object[type] = num;\n  }\n\n  return 1;\n}\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n/**\n * This lets typescript resolve our custom types in the\n * generated d.ts files (jsdoc typedefs are converted to typescript types).\n * Ignore prevents the typedefs from being documented more than once.\n *\n * @ignore\n * @typedef {import(\"./types.js\").weekDay} weekDay\n * Imports the 'weekDay' type from the \"types.js\" module\n */\n\n/**\n * @classdesc\n * iCalendar Time representation (similar to JS Date object).  Fully\n * independent of system (OS) timezone / time.  Unlike JS Date, the month\n * January is 1, not zero.\n *\n * @example\n * var time = new ICAL.Time({\n *   year: 2012,\n *   month: 10,\n *   day: 11\n *   minute: 0,\n *   second: 0,\n *   isDate: false\n * });\n *\n *\n * @memberof ICAL\n*/\nclass Time {\n  static _dowCache = {};\n  static _wnCache = {};\n\n  /**\n   * Returns the days in the given month\n   *\n   * @param {Number} month      The month to check\n   * @param {Number} year       The year to check\n   * @return {Number}           The number of days in the month\n   */\n  static daysInMonth(month, year) {\n    let _daysInMonth = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    let days = 30;\n\n    if (month < 1 || month > 12) return days;\n\n    days = _daysInMonth[month];\n\n    if (month == 2) {\n      days += Time.isLeapYear(year);\n    }\n\n    return days;\n  }\n\n  /**\n   * Checks if the year is a leap year\n   *\n   * @param {Number} year       The year to check\n   * @return {Boolean}          True, if the year is a leap year\n   */\n  static isLeapYear(year) {\n    if (year <= 1752) {\n      return ((year % 4) == 0);\n    } else {\n      return (((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0));\n    }\n  }\n\n  /**\n   * Create a new ICAL.Time from the day of year and year. The date is returned\n   * in floating timezone.\n   *\n   * @param {Number} aDayOfYear     The day of year\n   * @param {Number} aYear          The year to create the instance in\n   * @return {Time}                 The created instance with the calculated date\n   */\n  static fromDayOfYear(aDayOfYear, aYear) {\n    let year = aYear;\n    let doy = aDayOfYear;\n    let tt = new Time();\n    tt.auto_normalize = false;\n    let is_leap = (Time.isLeapYear(year) ? 1 : 0);\n\n    if (doy < 1) {\n      year--;\n      is_leap = (Time.isLeapYear(year) ? 1 : 0);\n      doy += Time.daysInYearPassedMonth[is_leap][12];\n      return Time.fromDayOfYear(doy, year);\n    } else if (doy > Time.daysInYearPassedMonth[is_leap][12]) {\n      is_leap = (Time.isLeapYear(year) ? 1 : 0);\n      doy -= Time.daysInYearPassedMonth[is_leap][12];\n      year++;\n      return Time.fromDayOfYear(doy, year);\n    }\n\n    tt.year = year;\n    tt.isDate = true;\n\n    for (let month = 11; month >= 0; month--) {\n      if (doy > Time.daysInYearPassedMonth[is_leap][month]) {\n        tt.month = month + 1;\n        tt.day = doy - Time.daysInYearPassedMonth[is_leap][month];\n        break;\n      }\n    }\n\n    tt.auto_normalize = true;\n    return tt;\n  }\n\n  /**\n   * Returns a new ICAL.Time instance from a date string, e.g 2015-01-02.\n   *\n   * @deprecated                Use {@link ICAL.Time.fromDateString} instead\n   * @param {String} str        The string to create from\n   * @return {Time}             The date/time instance\n   */\n  static fromStringv2(str) {\n    return new Time({\n      year: parseInt(str.slice(0, 4), 10),\n      month: parseInt(str.slice(5, 7), 10),\n      day: parseInt(str.slice(8, 10), 10),\n      isDate: true\n    });\n  }\n\n  /**\n   * Returns a new ICAL.Time instance from a date string, e.g 2015-01-02.\n   *\n   * @param {String} aValue     The string to create from\n   * @return {Time}             The date/time instance\n   */\n  static fromDateString(aValue) {\n    // Dates should have no timezone.\n    // Google likes to sometimes specify Z on dates\n    // we specifically ignore that to avoid issues.\n\n    // YYYY-MM-DD\n    // 2012-10-10\n    return new Time({\n      year: strictParseInt(aValue.slice(0, 4)),\n      month: strictParseInt(aValue.slice(5, 7)),\n      day: strictParseInt(aValue.slice(8, 10)),\n      isDate: true\n    });\n  }\n\n  /**\n   * Returns a new ICAL.Time instance from a date-time string, e.g\n   * 2015-01-02T03:04:05. If a property is specified, the timezone is set up\n   * from the property's TZID parameter.\n   *\n   * @param {String} aValue         The string to create from\n   * @param {Property=} prop        The property the date belongs to\n   * @return {Time}                 The date/time instance\n   */\n  static fromDateTimeString(aValue, prop) {\n    if (aValue.length < 19) {\n      throw new Error(\n        'invalid date-time value: \"' + aValue + '\"'\n      );\n    }\n\n    let zone;\n    let zoneId;\n\n    if (aValue[19] && aValue[19] === 'Z') {\n      zone = Timezone.utcTimezone;\n    } else if (prop) {\n      zoneId = prop.getParameter('tzid');\n\n      if (prop.parent) {\n        if (prop.parent.name === 'standard' || prop.parent.name === 'daylight') {\n          // Per RFC 5545 3.8.2.4 and 3.8.2.2, start/end date-times within\n          // these components MUST be specified in local time.\n          zone = Timezone.localTimezone;\n        } else if (zoneId) {\n          // If the desired time zone is defined within the component tree,\n          // fetch its definition and prefer that.\n          zone = prop.parent.getTimeZoneByID(zoneId);\n        }\n      }\n    }\n\n    const timeData = {\n      year: strictParseInt(aValue.slice(0, 4)),\n      month: strictParseInt(aValue.slice(5, 7)),\n      day: strictParseInt(aValue.slice(8, 10)),\n      hour: strictParseInt(aValue.slice(11, 13)),\n      minute: strictParseInt(aValue.slice(14, 16)),\n      second: strictParseInt(aValue.slice(17, 19)),\n    };\n\n    // Although RFC 5545 requires that all TZIDs used within a file have a\n    // corresponding time zone definition, we may not be parsing the full file\n    // or we may be dealing with a non-compliant file; in either case, we can\n    // check our own time zone service for the TZID in a last-ditch effort.\n    if (zoneId && !zone) {\n      timeData.timezone = zoneId;\n    }\n\n    // 2012-10-10T10:10:10(Z)?\n    return new Time(timeData, zone);\n  }\n\n  /**\n   * Returns a new ICAL.Time instance from a date or date-time string,\n   *\n   * @param {String} aValue         The string to create from\n   * @param {Property=} prop        The property the date belongs to\n   * @return {Time}                 The date/time instance\n   */\n  static fromString(aValue, aProperty) {\n    if (aValue.length > 10) {\n      return Time.fromDateTimeString(aValue, aProperty);\n    } else {\n      return Time.fromDateString(aValue);\n    }\n  }\n\n  /**\n   * Creates a new ICAL.Time instance from the given Javascript Date.\n   *\n   * @param {?Date} aDate             The Javascript Date to read, or null to reset\n   * @param {Boolean} [useUTC=false]  If true, the UTC values of the date will be used\n   */\n  static fromJSDate(aDate, useUTC) {\n    let tt = new Time();\n    return tt.fromJSDate(aDate, useUTC);\n  }\n\n  /**\n   * Creates a new ICAL.Time instance from the the passed data object.\n   *\n   * @param {Object} aData            Time initialization\n   * @param {Number=} aData.year      The year for this date\n   * @param {Number=} aData.month     The month for this date\n   * @param {Number=} aData.day       The day for this date\n   * @param {Number=} aData.hour      The hour for this date\n   * @param {Number=} aData.minute    The minute for this date\n   * @param {Number=} aData.second    The second for this date\n   * @param {Boolean=} aData.isDate   If true, the instance represents a date\n   *                                    (as opposed to a date-time)\n   * @param {Timezone=} aZone         Timezone this position occurs in\n   */\n  static fromData = function fromData(aData, aZone) {\n    let t = new Time();\n    return t.fromData(aData, aZone);\n  };\n\n  /**\n   * Creates a new ICAL.Time instance from the current moment.\n   * The instance is ‚Äúfloating‚Äù - has no timezone relation.\n   * To create an instance considering the time zone, call\n   * ICAL.Time.fromJSDate(new Date(), true)\n   * @return {Time}\n   */\n  static now() {\n    return Time.fromJSDate(new Date(), false);\n  }\n\n  /**\n   * Returns the date on which ISO week number 1 starts.\n   *\n   * @see Time#weekNumber\n   * @param {Number} aYear                  The year to search in\n   * @param {weekDay=} aWeekStart           The week start weekday, used for calculation.\n   * @return {Time}                         The date on which week number 1 starts\n   */\n  static weekOneStarts(aYear, aWeekStart) {\n    let t = Time.fromData({\n      year: aYear,\n      month: 1,\n      day: 1,\n      isDate: true\n    });\n\n    let dow = t.dayOfWeek();\n    let wkst = aWeekStart || Time.DEFAULT_WEEK_START;\n    if (dow > Time.THURSDAY) {\n      t.day += 7;\n    }\n    if (wkst > Time.THURSDAY) {\n      t.day -= 7;\n    }\n\n    t.day -= dow - wkst;\n\n    return t;\n  }\n\n  /**\n   * Get the dominical letter for the given year. Letters range from A - G for\n   * common years, and AG to GF for leap years.\n   *\n   * @param {Number} yr           The year to retrieve the letter for\n   * @return {String}             The dominical letter.\n   */\n  static getDominicalLetter(yr) {\n    let LTRS = \"GFEDCBA\";\n    let dom = (yr + (yr / 4 | 0) + (yr / 400 | 0) - (yr / 100 | 0) - 1) % 7;\n    let isLeap = Time.isLeapYear(yr);\n    if (isLeap) {\n      return LTRS[(dom + 6) % 7] + LTRS[dom];\n    } else {\n      return LTRS[dom];\n    }\n  }\n\n  static #epochTime = null;\n  /**\n   * January 1st, 1970 as an ICAL.Time.\n   * @type {Time}\n   * @constant\n   * @instance\n   */\n  static get epochTime() {\n    if (!this.#epochTime) {\n      this.#epochTime = Time.fromData({\n        year: 1970,\n        month: 1,\n        day: 1,\n        hour: 0,\n        minute: 0,\n        second: 0,\n        isDate: false,\n        timezone: \"Z\"\n      });\n    }\n    return this.#epochTime;\n  }\n\n  static _cmp_attr(a, b, attr) {\n    if (a[attr] > b[attr]) return 1;\n    if (a[attr] < b[attr]) return -1;\n    return 0;\n  }\n\n  /**\n   * The days that have passed in the year after a given month. The array has\n   * two members, one being an array of passed days for non-leap years, the\n   * other analog for leap years.\n   * @example\n   * var isLeapYear = ICAL.Time.isLeapYear(year);\n   * var passedDays = ICAL.Time.daysInYearPassedMonth[isLeapYear][month];\n   * @type {Array.<Array.<Number>>}\n   */\n  static daysInYearPassedMonth = [\n    [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365],\n    [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366]\n  ];\n\n  static SUNDAY = 1;\n  static MONDAY = 2;\n  static TUESDAY = 3;\n  static WEDNESDAY = 4;\n  static THURSDAY = 5;\n  static FRIDAY = 6;\n  static SATURDAY = 7;\n\n  /**\n   * The default weekday for the WKST part.\n   * @constant\n   * @default ICAL.Time.MONDAY\n   */\n  static DEFAULT_WEEK_START = 2; // MONDAY\n\n  /**\n   * Creates a new ICAL.Time instance.\n   *\n   * @param {Object} data           Time initialization\n   * @param {Number=} data.year     The year for this date\n   * @param {Number=} data.month    The month for this date\n   * @param {Number=} data.day      The day for this date\n   * @param {Number=} data.hour     The hour for this date\n   * @param {Number=} data.minute   The minute for this date\n   * @param {Number=} data.second   The second for this date\n   * @param {Boolean=} data.isDate  If true, the instance represents a date (as\n   *                                  opposed to a date-time)\n   * @param {Timezone} zone         timezone this position occurs in\n   */\n  constructor(data, zone) {\n    this.wrappedJSObject = this;\n    let time = this._time = Object.create(null);\n\n    /* time defaults */\n    time.year = 0;\n    time.month = 1;\n    time.day = 1;\n    time.hour = 0;\n    time.minute = 0;\n    time.second = 0;\n    time.isDate = false;\n\n    this.fromData(data, zone);\n  }\n\n  /**\n   * The class identifier.\n   * @constant\n   * @type {String}\n   * @default \"icaltime\"\n   */\n  icalclass = \"icaltime\";\n  _cachedUnixTime = null;\n\n  /**\n   * The type name, to be used in the jCal object. This value may change and\n   * is strictly defined by the {@link ICAL.Time#isDate isDate} member.\n   * @type {String}\n   * @default \"date-time\"\n   */\n  get icaltype() {\n    return this.isDate ? 'date' : 'date-time';\n  }\n\n  /**\n   * The timezone for this time.\n   * @type {Timezone}\n   */\n  zone = null;\n\n  /**\n   * Internal uses to indicate that a change has been made and the next read\n   * operation must attempt to normalize the value (for example changing the\n   * day to 33).\n   *\n   * @type {Boolean}\n   * @private\n   */\n  _pendingNormalization = false;\n\n  /**\n   * Returns a clone of the time object.\n   *\n   * @return {Time}              The cloned object\n   */\n  clone() {\n    return new Time(this._time, this.zone);\n  }\n\n  /**\n   * Reset the time instance to epoch time\n   */\n  reset() {\n    this.fromData(Time.epochTime);\n    this.zone = Timezone.utcTimezone;\n  }\n\n  /**\n   * Reset the time instance to the given date/time values.\n   *\n   * @param {Number} year             The year to set\n   * @param {Number} month            The month to set\n   * @param {Number} day              The day to set\n   * @param {Number} hour             The hour to set\n   * @param {Number} minute           The minute to set\n   * @param {Number} second           The second to set\n   * @param {Timezone} timezone       The timezone to set\n   */\n  resetTo(year, month, day, hour, minute, second, timezone) {\n    this.fromData({\n      year: year,\n      month: month,\n      day: day,\n      hour: hour,\n      minute: minute,\n      second: second,\n      zone: timezone\n    });\n  }\n\n  /**\n   * Set up the current instance from the Javascript date value.\n   *\n   * @param {?Date} aDate             The Javascript Date to read, or null to reset\n   * @param {Boolean} [useUTC=false]  If true, the UTC values of the date will be used\n   */\n  fromJSDate(aDate, useUTC) {\n    if (!aDate) {\n      this.reset();\n    } else {\n      if (useUTC) {\n        this.zone = Timezone.utcTimezone;\n        this.year = aDate.getUTCFullYear();\n        this.month = aDate.getUTCMonth() + 1;\n        this.day = aDate.getUTCDate();\n        this.hour = aDate.getUTCHours();\n        this.minute = aDate.getUTCMinutes();\n        this.second = aDate.getUTCSeconds();\n      } else {\n        this.zone = Timezone.localTimezone;\n        this.year = aDate.getFullYear();\n        this.month = aDate.getMonth() + 1;\n        this.day = aDate.getDate();\n        this.hour = aDate.getHours();\n        this.minute = aDate.getMinutes();\n        this.second = aDate.getSeconds();\n      }\n    }\n    this._cachedUnixTime = null;\n    return this;\n  }\n\n  /**\n   * Sets up the current instance using members from the passed data object.\n   *\n   * @param {Object} aData            Time initialization\n   * @param {Number=} aData.year      The year for this date\n   * @param {Number=} aData.month     The month for this date\n   * @param {Number=} aData.day       The day for this date\n   * @param {Number=} aData.hour      The hour for this date\n   * @param {Number=} aData.minute    The minute for this date\n   * @param {Number=} aData.second    The second for this date\n   * @param {Boolean=} aData.isDate   If true, the instance represents a date\n   *                                    (as opposed to a date-time)\n   * @param {Timezone=} aZone         Timezone this position occurs in\n   */\n  fromData(aData, aZone) {\n    if (aData) {\n      for (let [key, value] of Object.entries(aData)) {\n          // ical type cannot be set\n          if (key === 'icaltype') continue;\n        this[key] = value;\n      }\n    }\n\n    if (aZone) {\n      this.zone = aZone;\n    }\n\n    if (aData && !(\"isDate\" in aData)) {\n      this.isDate = !(\"hour\" in aData);\n    } else if (aData && (\"isDate\" in aData)) {\n      this.isDate = aData.isDate;\n    }\n\n    if (aData && \"timezone\" in aData) {\n      let zone = TimezoneService.get(\n        aData.timezone\n      );\n\n      this.zone = zone || Timezone.localTimezone;\n    }\n\n    if (aData && \"zone\" in aData) {\n      this.zone = aData.zone;\n    }\n\n    if (!this.zone) {\n      this.zone = Timezone.localTimezone;\n    }\n\n    this._cachedUnixTime = null;\n    return this;\n  }\n\n  /**\n   * Calculate the day of week.\n   * @param {weekDay=} aWeekStart\n   *        The week start weekday, defaults to SUNDAY\n   * @return {weekDay}\n   */\n  dayOfWeek(aWeekStart) {\n    let firstDow = aWeekStart || Time.SUNDAY;\n    let dowCacheKey = (this.year << 12) + (this.month << 8) + (this.day << 3) + firstDow;\n    if (dowCacheKey in Time._dowCache) {\n      return Time._dowCache[dowCacheKey];\n    }\n\n    // Using Zeller's algorithm\n    let q = this.day;\n    let m = this.month + (this.month < 3 ? 12 : 0);\n    let Y = this.year - (this.month < 3 ? 1 : 0);\n\n    let h = (q + Y + trunc(((m + 1) * 26) / 10) + trunc(Y / 4));\n    { // eslint-disable-line no-constant-condition\n      h += trunc(Y / 100) * 6 + trunc(Y / 400);\n    }\n\n    // Normalize to 1 = wkst\n    h = ((h + 7 - firstDow) % 7) + 1;\n    Time._dowCache[dowCacheKey] = h;\n    return h;\n  }\n\n  /**\n   * Calculate the day of year.\n   * @return {Number}\n   */\n  dayOfYear() {\n    let is_leap = (Time.isLeapYear(this.year) ? 1 : 0);\n    let diypm = Time.daysInYearPassedMonth;\n    return diypm[is_leap][this.month - 1] + this.day;\n  }\n\n  /**\n   * Returns a copy of the current date/time, rewound to the start of the\n   * week. The resulting ICAL.Time instance is of icaltype date, even if this\n   * is a date-time.\n   *\n   * @param {weekDay=} aWeekStart\n   *        The week start weekday, defaults to SUNDAY\n   * @return {Time}      The start of the week (cloned)\n   */\n  startOfWeek(aWeekStart) {\n    let firstDow = aWeekStart || Time.SUNDAY;\n    let result = this.clone();\n    result.day -= ((this.dayOfWeek() + 7 - firstDow) % 7);\n    result.isDate = true;\n    result.hour = 0;\n    result.minute = 0;\n    result.second = 0;\n    return result;\n  }\n\n  /**\n   * Returns a copy of the current date/time, shifted to the end of the week.\n   * The resulting ICAL.Time instance is of icaltype date, even if this is a\n   * date-time.\n   *\n   * @param {weekDay=} aWeekStart\n   *        The week start weekday, defaults to SUNDAY\n   * @return {Time}      The end of the week (cloned)\n   */\n  endOfWeek(aWeekStart) {\n    let firstDow = aWeekStart || Time.SUNDAY;\n    let result = this.clone();\n    result.day += (7 - this.dayOfWeek() + firstDow - Time.SUNDAY) % 7;\n    result.isDate = true;\n    result.hour = 0;\n    result.minute = 0;\n    result.second = 0;\n    return result;\n  }\n\n  /**\n   * Returns a copy of the current date/time, rewound to the start of the\n   * month. The resulting ICAL.Time instance is of icaltype date, even if\n   * this is a date-time.\n   *\n   * @return {Time}      The start of the month (cloned)\n   */\n  startOfMonth() {\n    let result = this.clone();\n    result.day = 1;\n    result.isDate = true;\n    result.hour = 0;\n    result.minute = 0;\n    result.second = 0;\n    return result;\n  }\n\n  /**\n   * Returns a copy of the current date/time, shifted to the end of the\n   * month.  The resulting ICAL.Time instance is of icaltype date, even if\n   * this is a date-time.\n   *\n   * @return {Time}      The end of the month (cloned)\n   */\n  endOfMonth() {\n    let result = this.clone();\n    result.day = Time.daysInMonth(result.month, result.year);\n    result.isDate = true;\n    result.hour = 0;\n    result.minute = 0;\n    result.second = 0;\n    return result;\n  }\n\n  /**\n   * Returns a copy of the current date/time, rewound to the start of the\n   * year. The resulting ICAL.Time instance is of icaltype date, even if\n   * this is a date-time.\n   *\n   * @return {Time}      The start of the year (cloned)\n   */\n  startOfYear() {\n    let result = this.clone();\n    result.day = 1;\n    result.month = 1;\n    result.isDate = true;\n    result.hour = 0;\n    result.minute = 0;\n    result.second = 0;\n    return result;\n  }\n\n  /**\n   * Returns a copy of the current date/time, shifted to the end of the\n   * year.  The resulting ICAL.Time instance is of icaltype date, even if\n   * this is a date-time.\n   *\n   * @return {Time}      The end of the year (cloned)\n   */\n  endOfYear() {\n    let result = this.clone();\n    result.day = 31;\n    result.month = 12;\n    result.isDate = true;\n    result.hour = 0;\n    result.minute = 0;\n    result.second = 0;\n    return result;\n  }\n\n  /**\n   * First calculates the start of the week, then returns the day of year for\n   * this date. If the day falls into the previous year, the day is zero or negative.\n   *\n   * @param {weekDay=} aFirstDayOfWeek\n   *        The week start weekday, defaults to SUNDAY\n   * @return {Number}     The calculated day of year\n   */\n  startDoyWeek(aFirstDayOfWeek) {\n    let firstDow = aFirstDayOfWeek || Time.SUNDAY;\n    let delta = this.dayOfWeek() - firstDow;\n    if (delta < 0) delta += 7;\n    return this.dayOfYear() - delta;\n  }\n\n  /**\n   * Get the dominical letter for the current year. Letters range from A - G\n   * for common years, and AG to GF for leap years.\n   *\n   * @param {Number} yr           The year to retrieve the letter for\n   * @return {String}             The dominical letter.\n   */\n  getDominicalLetter() {\n    return Time.getDominicalLetter(this.year);\n  }\n\n  /**\n   * Finds the nthWeekDay relative to the current month (not day).  The\n   * returned value is a day relative the month that this month belongs to so\n   * 1 would indicate the first of the month and 40 would indicate a day in\n   * the following month.\n   *\n   * @param {Number} aDayOfWeek   Day of the week see the day name constants\n   * @param {Number} aPos         Nth occurrence of a given week day values\n   *        of 1 and 0 both indicate the first weekday of that type. aPos may\n   *        be either positive or negative\n   *\n   * @return {Number} numeric value indicating a day relative\n   *                   to the current month of this time object\n   */\n  nthWeekDay(aDayOfWeek, aPos) {\n    let daysInMonth = Time.daysInMonth(this.month, this.year);\n    let weekday;\n    let pos = aPos;\n\n    let start = 0;\n\n    let otherDay = this.clone();\n\n    if (pos >= 0) {\n      otherDay.day = 1;\n\n      // because 0 means no position has been given\n      // 1 and 0 indicate the same day.\n      if (pos != 0) {\n        // remove the extra numeric value\n        pos--;\n      }\n\n      // set current start offset to current day.\n      start = otherDay.day;\n\n      // find the current day of week\n      let startDow = otherDay.dayOfWeek();\n\n      // calculate the difference between current\n      // day of the week and desired day of the week\n      let offset = aDayOfWeek - startDow;\n\n\n      // if the offset goes into the past\n      // week we add 7 so it goes into the next\n      // week. We only want to go forward in time here.\n      if (offset < 0)\n        // this is really important otherwise we would\n        // end up with dates from in the past.\n        offset += 7;\n\n      // add offset to start so start is the same\n      // day of the week as the desired day of week.\n      start += offset;\n\n      // because we are going to add (and multiply)\n      // the numeric value of the day we subtract it\n      // from the start position so not to add it twice.\n      start -= aDayOfWeek;\n\n      // set week day\n      weekday = aDayOfWeek;\n    } else {\n\n      // then we set it to the last day in the current month\n      otherDay.day = daysInMonth;\n\n      // find the ends weekday\n      let endDow = otherDay.dayOfWeek();\n\n      pos++;\n\n      weekday = (endDow - aDayOfWeek);\n\n      if (weekday < 0) {\n        weekday += 7;\n      }\n\n      weekday = daysInMonth - weekday;\n    }\n\n    weekday += pos * 7;\n\n    return start + weekday;\n  }\n\n  /**\n   * Checks if current time is the nth weekday, relative to the current\n   * month.  Will always return false when rule resolves outside of current\n   * month.\n   *\n   * @param {weekDay} aDayOfWeek                 Day of week to check\n   * @param {Number} aPos                        Relative position\n   * @return {Boolean}                           True, if it is the nth weekday\n   */\n  isNthWeekDay(aDayOfWeek, aPos) {\n    let dow = this.dayOfWeek();\n\n    if (aPos === 0 && dow === aDayOfWeek) {\n      return true;\n    }\n\n    // get pos\n    let day = this.nthWeekDay(aDayOfWeek, aPos);\n\n    if (day === this.day) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Calculates the ISO 8601 week number. The first week of a year is the\n   * week that contains the first Thursday. The year can have 53 weeks, if\n   * January 1st is a Friday.\n   *\n   * Note there are regions where the first week of the year is the one that\n   * starts on January 1st, which may offset the week number. Also, if a\n   * different week start is specified, this will also affect the week\n   * number.\n   *\n   * @see Time.weekOneStarts\n   * @param {weekDay} aWeekStart                  The weekday the week starts with\n   * @return {Number}                             The ISO week number\n   */\n  weekNumber(aWeekStart) {\n    let wnCacheKey = (this.year << 12) + (this.month << 8) + (this.day << 3) + aWeekStart;\n    if (wnCacheKey in Time._wnCache) {\n      return Time._wnCache[wnCacheKey];\n    }\n    // This function courtesty of Julian Bucknall, published under the MIT license\n    // http://www.boyet.com/articles/publishedarticles/calculatingtheisoweeknumb.html\n    // plus some fixes to be able to use different week starts.\n    let week1;\n\n    let dt = this.clone();\n    dt.isDate = true;\n    let isoyear = this.year;\n\n    if (dt.month == 12 && dt.day > 25) {\n      week1 = Time.weekOneStarts(isoyear + 1, aWeekStart);\n      if (dt.compare(week1) < 0) {\n        week1 = Time.weekOneStarts(isoyear, aWeekStart);\n      } else {\n        isoyear++;\n      }\n    } else {\n      week1 = Time.weekOneStarts(isoyear, aWeekStart);\n      if (dt.compare(week1) < 0) {\n        week1 = Time.weekOneStarts(--isoyear, aWeekStart);\n      }\n    }\n\n    let daysBetween = (dt.subtractDate(week1).toSeconds() / 86400);\n    let answer = trunc(daysBetween / 7) + 1;\n    Time._wnCache[wnCacheKey] = answer;\n    return answer;\n  }\n\n  /**\n   * Adds the duration to the current time. The instance is modified in\n   * place.\n   *\n   * @param {Duration} aDuration         The duration to add\n   */\n  addDuration(aDuration) {\n    let mult = (aDuration.isNegative ? -1 : 1);\n\n    // because of the duration optimizations it is much\n    // more efficient to grab all the values up front\n    // then set them directly (which will avoid a normalization call).\n    // So we don't actually normalize until we need it.\n    let second = this.second;\n    let minute = this.minute;\n    let hour = this.hour;\n    let day = this.day;\n\n    second += mult * aDuration.seconds;\n    minute += mult * aDuration.minutes;\n    hour += mult * aDuration.hours;\n    day += mult * aDuration.days;\n    day += mult * 7 * aDuration.weeks;\n\n    this.second = second;\n    this.minute = minute;\n    this.hour = hour;\n    this.day = day;\n\n    this._cachedUnixTime = null;\n  }\n\n  /**\n   * Subtract the date details (_excluding_ timezone).  Useful for finding\n   * the relative difference between two time objects excluding their\n   * timezone differences.\n   *\n   * @param {Time} aDate     The date to subtract\n   * @return {Duration}      The difference as a duration\n   */\n  subtractDate(aDate) {\n    let unixTime = this.toUnixTime() + this.utcOffset();\n    let other = aDate.toUnixTime() + aDate.utcOffset();\n    return Duration.fromSeconds(unixTime - other);\n  }\n\n  /**\n   * Subtract the date details, taking timezones into account.\n   *\n   * @param {Time} aDate  The date to subtract\n   * @return {Duration}   The difference in duration\n   */\n  subtractDateTz(aDate) {\n    let unixTime = this.toUnixTime();\n    let other = aDate.toUnixTime();\n    return Duration.fromSeconds(unixTime - other);\n  }\n\n  /**\n   * Compares the ICAL.Time instance with another one.\n   *\n   * @param {Duration} aOther        The instance to compare with\n   * @return {Number}                     -1, 0 or 1 for less/equal/greater\n   */\n  compare(other) {\n    let a = this.toUnixTime();\n    let b = other.toUnixTime();\n\n    if (a > b) return 1;\n    if (b > a) return -1;\n    return 0;\n  }\n\n  /**\n   * Compares only the date part of this instance with another one.\n   *\n   * @param {Duration} other              The instance to compare with\n   * @param {Timezone} tz                 The timezone to compare in\n   * @return {Number}                     -1, 0 or 1 for less/equal/greater\n   */\n  compareDateOnlyTz(other, tz) {\n    let a = this.convertToZone(tz);\n    let b = other.convertToZone(tz);\n    let rc = 0;\n\n    if ((rc = Time._cmp_attr(a, b, \"year\")) != 0) return rc;\n    if ((rc = Time._cmp_attr(a, b, \"month\")) != 0) return rc;\n    if ((rc = Time._cmp_attr(a, b, \"day\")) != 0) return rc;\n\n    return rc;\n  }\n\n  /**\n   * Convert the instance into another timezone. The returned ICAL.Time\n   * instance is always a copy.\n   *\n   * @param {Timezone} zone      The zone to convert to\n   * @return {Time}              The copy, converted to the zone\n   */\n  convertToZone(zone) {\n    let copy = this.clone();\n    let zone_equals = (this.zone.tzid == zone.tzid);\n\n    if (!this.isDate && !zone_equals) {\n      Timezone.convert_time(copy, this.zone, zone);\n    }\n\n    copy.zone = zone;\n    return copy;\n  }\n\n  /**\n   * Calculates the UTC offset of the current date/time in the timezone it is\n   * in.\n   *\n   * @return {Number}     UTC offset in seconds\n   */\n  utcOffset() {\n    if (this.zone == Timezone.localTimezone ||\n        this.zone == Timezone.utcTimezone) {\n      return 0;\n    } else {\n      return this.zone.utcOffset(this);\n    }\n  }\n\n  /**\n   * Returns an RFC 5545 compliant ical representation of this object.\n   *\n   * @return {String} ical date/date-time\n   */\n  toICALString() {\n    let string = this.toString();\n\n    if (string.length > 10) {\n      return design$1.icalendar.value['date-time'].toICAL(string);\n    } else {\n      return design$1.icalendar.value.date.toICAL(string);\n    }\n  }\n\n  /**\n   * The string representation of this date/time, in jCal form\n   * (including : and - separators).\n   * @return {String}\n   */\n  toString() {\n    let result = this.year + '-' +\n                 pad2(this.month) + '-' +\n                 pad2(this.day);\n\n    if (!this.isDate) {\n        result += 'T' + pad2(this.hour) + ':' +\n                  pad2(this.minute) + ':' +\n                  pad2(this.second);\n\n      if (this.zone === Timezone.utcTimezone) {\n        result += 'Z';\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Converts the current instance to a Javascript date\n   * @return {Date}\n   */\n  toJSDate() {\n    if (this.zone == Timezone.localTimezone) {\n      if (this.isDate) {\n        return new Date(this.year, this.month - 1, this.day);\n      } else {\n        return new Date(this.year, this.month - 1, this.day,\n                        this.hour, this.minute, this.second, 0);\n      }\n    } else {\n      return new Date(this.toUnixTime() * 1000);\n    }\n  }\n\n  _normalize() {\n    if (this._time.isDate) {\n      this._time.hour = 0;\n      this._time.minute = 0;\n      this._time.second = 0;\n    }\n    this.adjust(0, 0, 0, 0);\n\n    return this;\n  }\n\n  /**\n   * Adjust the date/time by the given offset\n   *\n   * @param {Number} aExtraDays       The extra amount of days\n   * @param {Number} aExtraHours      The extra amount of hours\n   * @param {Number} aExtraMinutes    The extra amount of minutes\n   * @param {Number} aExtraSeconds    The extra amount of seconds\n   * @param {Number=} aTime           The time to adjust, defaults to the\n   *                                    current instance.\n   */\n  adjust(aExtraDays, aExtraHours, aExtraMinutes, aExtraSeconds, aTime) {\n\n    let minutesOverflow, hoursOverflow,\n        daysOverflow = 0, yearsOverflow = 0;\n\n    let second, minute, hour, day;\n    let daysInMonth;\n\n    let time = aTime || this._time;\n\n    if (!time.isDate) {\n      second = time.second + aExtraSeconds;\n      time.second = second % 60;\n      minutesOverflow = trunc(second / 60);\n      if (time.second < 0) {\n        time.second += 60;\n        minutesOverflow--;\n      }\n\n      minute = time.minute + aExtraMinutes + minutesOverflow;\n      time.minute = minute % 60;\n      hoursOverflow = trunc(minute / 60);\n      if (time.minute < 0) {\n        time.minute += 60;\n        hoursOverflow--;\n      }\n\n      hour = time.hour + aExtraHours + hoursOverflow;\n\n      time.hour = hour % 24;\n      daysOverflow = trunc(hour / 24);\n      if (time.hour < 0) {\n        time.hour += 24;\n        daysOverflow--;\n      }\n    }\n\n\n    // Adjust month and year first, because we need to know what month the day\n    // is in before adjusting it.\n    if (time.month > 12) {\n      yearsOverflow = trunc((time.month - 1) / 12);\n    } else if (time.month < 1) {\n      yearsOverflow = trunc(time.month / 12) - 1;\n    }\n\n    time.year += yearsOverflow;\n    time.month -= 12 * yearsOverflow;\n\n    // Now take care of the days (and adjust month if needed)\n    day = time.day + aExtraDays + daysOverflow;\n\n    if (day > 0) {\n      for (;;) {\n        daysInMonth = Time.daysInMonth(time.month, time.year);\n        if (day <= daysInMonth) {\n          break;\n        }\n\n        time.month++;\n        if (time.month > 12) {\n          time.year++;\n          time.month = 1;\n        }\n\n        day -= daysInMonth;\n      }\n    } else {\n      while (day <= 0) {\n        if (time.month == 1) {\n          time.year--;\n          time.month = 12;\n        } else {\n          time.month--;\n        }\n\n        day += Time.daysInMonth(time.month, time.year);\n      }\n    }\n\n    time.day = day;\n\n    this._cachedUnixTime = null;\n    return this;\n  }\n\n  /**\n   * Sets up the current instance from unix time, the number of seconds since\n   * January 1st, 1970.\n   *\n   * @param {Number} seconds      The seconds to set up with\n   */\n  fromUnixTime(seconds) {\n    this.zone = Timezone.utcTimezone;\n    // We could use `fromJSDate` here, but this is about twice as fast.\n    // We could also clone `epochTime` and use `adjust` for a more\n    // ical.js-centric approach, but this is about 100 times as fast.\n    let date = new Date(seconds * 1000);\n    this.year = date.getUTCFullYear();\n    this.month = date.getUTCMonth() + 1;\n    this.day = date.getUTCDate();\n    if (this._time.isDate) {\n      this.hour = 0;\n      this.minute = 0;\n      this.second = 0;\n    } else {\n      this.hour = date.getUTCHours();\n      this.minute = date.getUTCMinutes();\n      this.second = date.getUTCSeconds();\n    }\n\n    this._cachedUnixTime = null;\n  }\n\n  /**\n   * Converts the current instance to seconds since January 1st 1970.\n   *\n   * @return {Number}         Seconds since 1970\n   */\n  toUnixTime() {\n    if (this._cachedUnixTime !== null) {\n      return this._cachedUnixTime;\n    }\n    let offset = this.utcOffset();\n\n    // we use the offset trick to ensure\n    // that we are getting the actual UTC time\n    let ms = Date.UTC(\n      this.year,\n      this.month - 1,\n      this.day,\n      this.hour,\n      this.minute,\n      this.second - offset\n    );\n\n    // seconds\n    this._cachedUnixTime = ms / 1000;\n    return this._cachedUnixTime;\n  }\n\n  /**\n   * Converts time to into Object which can be serialized then re-created\n   * using the constructor.\n   *\n   * @example\n   * // toJSON will automatically be called\n   * var json = JSON.stringify(mytime);\n   *\n   * var deserialized = JSON.parse(json);\n   *\n   * var time = new ICAL.Time(deserialized);\n   *\n   * @return {Object}\n   */\n  toJSON() {\n    let copy = [\n      'year',\n      'month',\n      'day',\n      'hour',\n      'minute',\n      'second',\n      'isDate'\n    ];\n\n    let result = Object.create(null);\n\n    let i = 0;\n    let len = copy.length;\n    let prop;\n\n    for (; i < len; i++) {\n      prop = copy[i];\n      result[prop] = this[prop];\n    }\n\n    if (this.zone) {\n      result.timezone = this.zone.tzid;\n    }\n\n    return result;\n  }\n}\n\n(function setupNormalizeAttributes() {\n  // This needs to run before any instances are created!\n  function defineAttr(attr) {\n    Object.defineProperty(Time.prototype, attr, {\n      get: function getTimeAttr() {\n        if (this._pendingNormalization) {\n          this._normalize();\n          this._pendingNormalization = false;\n        }\n\n        return this._time[attr];\n      },\n      set: function setTimeAttr(val) {\n        // Check if isDate will be set and if was not set to normalize date.\n        // This avoids losing days when seconds, minutes and hours are zeroed\n        // what normalize will do when time is a date.\n        if (attr === \"isDate\" && val && !this._time.isDate) {\n          this.adjust(0, 0, 0, 0);\n        }\n        this._cachedUnixTime = null;\n        this._pendingNormalization = true;\n        this._time[attr] = val;\n      }\n    });\n\n  }\n\n    defineAttr(\"year\");\n    defineAttr(\"month\");\n    defineAttr(\"day\");\n    defineAttr(\"hour\");\n    defineAttr(\"minute\");\n    defineAttr(\"second\");\n    defineAttr(\"isDate\");\n})();\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n/**\n * This lets typescript resolve our custom types in the\n * generated d.ts files (jsdoc typedefs are converted to typescript types).\n * Ignore prevents the typedefs from being documented more than once.\n *\n * @ignore\n * @typedef {import(\"./types.js\").parserState} parserState\n * Imports the 'parserState' type from the \"types.js\" module\n * @typedef {import(\"./types.js\").designSet} designSet\n * Imports the 'designSet' type from the \"types.js\" module\n */\n\nconst CHAR = /[^ \\t]/;\nconst VALUE_DELIMITER = ':';\nconst PARAM_DELIMITER = ';';\nconst PARAM_NAME_DELIMITER = '=';\nconst DEFAULT_VALUE_TYPE$1 = 'unknown';\nconst DEFAULT_PARAM_TYPE = 'text';\nconst RFC6868_REPLACE_MAP$1 = { \"^'\": '\"', \"^n\": \"\\n\", \"^^\": \"^\" };\n\n/**\n * Parses iCalendar or vCard data into a raw jCal object. Consult\n * documentation on the {@tutorial layers|layers of parsing} for more\n * details.\n *\n * @function ICAL.parse\n * @memberof ICAL\n * @variation function\n * @todo Fix the API to be more clear on the return type\n * @param {String} input      The string data to parse\n * @return {Object|Object[]}  A single jCal object, or an array thereof\n */\nfunction parse(input) {\n  let state = {};\n  let root = state.component = [];\n\n  state.stack = [root];\n\n  parse._eachLine(input, function(err, line) {\n    parse._handleContentLine(line, state);\n  });\n\n\n  // when there are still items on the stack\n  // throw a fatal error, a component was not closed\n  // correctly in that case.\n  if (state.stack.length > 1) {\n    throw new ParserError(\n      'invalid ical body. component began but did not end'\n    );\n  }\n\n  state = null;\n\n  return (root.length == 1 ? root[0] : root);\n}\n\n/**\n * Parse an iCalendar property value into the jCal for a single property\n *\n * @function ICAL.parse.property\n * @param {String} str\n *   The iCalendar property string to parse\n * @param {designSet=} designSet\n *   The design data to use for this property\n * @return {Object}\n *   The jCal Object containing the property\n */\nparse.property = function(str, designSet) {\n  let state = {\n    component: [[], []],\n    designSet: designSet || design$1.defaultSet\n  };\n  parse._handleContentLine(str, state);\n  return state.component[1][0];\n};\n\n/**\n * Convenience method to parse a component. You can use ICAL.parse() directly\n * instead.\n *\n * @function ICAL.parse.component\n * @see ICAL.parse(function)\n * @param {String} str    The iCalendar component string to parse\n * @return {Object}       The jCal Object containing the component\n */\nparse.component = function(str) {\n  return parse(str);\n};\n\n\n/**\n * An error that occurred during parsing.\n *\n * @param {String} message        The error message\n * @memberof ICAL.parse\n * @extends {Error}\n */\nclass ParserError extends Error {\n  name = this.constructor.name;\n}\n\n// classes & constants\nparse.ParserError = ParserError;\n\n\n/**\n * Handles a single line of iCalendar/vCard, updating the state.\n *\n * @private\n * @function ICAL.parse._handleContentLine\n * @param {String} line          The content line to process\n * @param {parserState} state    The current state of the line parsing\n */\nparse._handleContentLine = function(line, state) {\n  // break up the parts of the line\n  let valuePos = line.indexOf(VALUE_DELIMITER);\n  let paramPos = line.indexOf(PARAM_DELIMITER);\n\n  let lastParamIndex;\n  let lastValuePos;\n\n  // name of property or begin/end\n  let name;\n  let value;\n  // params is only overridden if paramPos !== -1.\n  // we can't do params = params || {} later on\n  // because it sacrifices ops.\n  let params = {};\n\n  /**\n   * Different property cases\n   *\n   *\n   * 1. RRULE:FREQ=foo\n   *    // FREQ= is not a param but the value\n   *\n   * 2. ATTENDEE;ROLE=REQ-PARTICIPANT;\n   *    // ROLE= is a param because : has not happened yet\n   */\n    // when the parameter delimiter is after the\n    // value delimiter then it is not a parameter.\n\n  if ((paramPos !== -1 && valuePos !== -1)) {\n    // when the parameter delimiter is after the\n    // value delimiter then it is not a parameter.\n    if (paramPos > valuePos) {\n      paramPos = -1;\n    }\n  }\n\n  let parsedParams;\n  if (paramPos !== -1) {\n    name = line.slice(0, Math.max(0, paramPos)).toLowerCase();\n    parsedParams = parse._parseParameters(line.slice(Math.max(0, paramPos)), 0, state.designSet);\n    if (parsedParams[2] == -1) {\n      throw new ParserError(\"Invalid parameters in '\" + line + \"'\");\n    }\n    params = parsedParams[0];\n    lastParamIndex = parsedParams[1].length + parsedParams[2] + paramPos;\n    if ((lastValuePos =\n      line.slice(Math.max(0, lastParamIndex)).indexOf(VALUE_DELIMITER)) !== -1) {\n      value = line.slice(Math.max(0, lastParamIndex + lastValuePos + 1));\n    } else {\n      throw new ParserError(\"Missing parameter value in '\" + line + \"'\");\n    }\n  } else if (valuePos !== -1) {\n    // without parmeters (BEGIN:VCAENDAR, CLASS:PUBLIC)\n    name = line.slice(0, Math.max(0, valuePos)).toLowerCase();\n    value = line.slice(Math.max(0, valuePos + 1));\n\n    if (name === 'begin') {\n      let newComponent = [value.toLowerCase(), [], []];\n      if (state.stack.length === 1) {\n        state.component.push(newComponent);\n      } else {\n        state.component[2].push(newComponent);\n      }\n      state.stack.push(state.component);\n      state.component = newComponent;\n      if (!state.designSet) {\n        state.designSet = design$1.getDesignSet(state.component[0]);\n      }\n      return;\n    } else if (name === 'end') {\n      state.component = state.stack.pop();\n      return;\n    }\n    // If it is not begin/end, then this is a property with an empty value,\n    // which should be considered valid.\n  } else {\n    /**\n     * Invalid line.\n     * The rational to throw an error is we will\n     * never be certain that the rest of the file\n     * is sane and it is unlikely that we can serialize\n     * the result correctly either.\n     */\n    throw new ParserError(\n      'invalid line (no token \";\" or \":\") \"' + line + '\"'\n    );\n  }\n\n  let valueType;\n  let multiValue = false;\n  let structuredValue = false;\n  let propertyDetails;\n  let splitName;\n  let ungroupedName;\n\n  // fetch the ungrouped part of the name\n  if (state.designSet.propertyGroups && name.indexOf('.') !== -1) {\n    splitName = name.split('.');\n    params.group = splitName[0];\n    ungroupedName = splitName[1];\n  } else {\n    ungroupedName = name;\n  }\n\n  if (ungroupedName in state.designSet.property) {\n    propertyDetails = state.designSet.property[ungroupedName];\n\n    if ('multiValue' in propertyDetails) {\n      multiValue = propertyDetails.multiValue;\n    }\n\n    if ('structuredValue' in propertyDetails) {\n      structuredValue = propertyDetails.structuredValue;\n    }\n\n    if (value && 'detectType' in propertyDetails) {\n      valueType = propertyDetails.detectType(value);\n    }\n  }\n\n  // attempt to determine value\n  if (!valueType) {\n    if (!('value' in params)) {\n      if (propertyDetails) {\n        valueType = propertyDetails.defaultType;\n      } else {\n        valueType = DEFAULT_VALUE_TYPE$1;\n      }\n    } else {\n      // possible to avoid this?\n      valueType = params.value.toLowerCase();\n    }\n  }\n\n  delete params.value;\n\n  /**\n   * Note on `var result` juggling:\n   *\n   * I observed that building the array in pieces has adverse\n   * effects on performance, so where possible we inline the creation.\n   * It is a little ugly but resulted in ~2000 additional ops/sec.\n   */\n\n  let result;\n  if (multiValue && structuredValue) {\n    value = parse._parseMultiValue(value, structuredValue, valueType, [], multiValue, state.designSet, structuredValue);\n    result = [ungroupedName, params, valueType, value];\n  } else if (multiValue) {\n    result = [ungroupedName, params, valueType];\n    parse._parseMultiValue(value, multiValue, valueType, result, null, state.designSet, false);\n  } else if (structuredValue) {\n    value = parse._parseMultiValue(value, structuredValue, valueType, [], null, state.designSet, structuredValue);\n    result = [ungroupedName, params, valueType, value];\n  } else {\n    value = parse._parseValue(value, valueType, state.designSet, false);\n    result = [ungroupedName, params, valueType, value];\n  }\n  // rfc6350 requires that in vCard 4.0 the first component is the VERSION\n  // component with as value 4.0, note that 3.0 does not have this requirement.\n  if (state.component[0] === 'vcard' && state.component[1].length === 0 &&\n          !(name === 'version' && value === '4.0')) {\n    state.designSet = design$1.getDesignSet(\"vcard3\");\n  }\n  state.component[1].push(result);\n};\n\n/**\n * Parse a value from the raw value into the jCard/jCal value.\n *\n * @private\n * @function ICAL.parse._parseValue\n * @param {String} value          Original value\n * @param {String} type           Type of value\n * @param {Object} designSet      The design data to use for this value\n * @return {Object} varies on type\n */\nparse._parseValue = function(value, type, designSet, structuredValue) {\n  if (type in designSet.value && 'fromICAL' in designSet.value[type]) {\n    return designSet.value[type].fromICAL(value, structuredValue);\n  }\n  return value;\n};\n\n/**\n * Parse parameters from a string to object.\n *\n * @function ICAL.parse._parseParameters\n * @private\n * @param {String} line           A single unfolded line\n * @param {Number} start         Position to start looking for properties\n * @param {Object} designSet      The design data to use for this property\n * @return {Object} key/value pairs\n */\nparse._parseParameters = function(line, start, designSet) {\n  let lastParam = start;\n  let pos = 0;\n  let delim = PARAM_NAME_DELIMITER;\n  let result = {};\n  let name, lcname;\n  let value, valuePos = -1;\n  let type, multiValue, mvdelim;\n\n  // find the next '=' sign\n  // use lastParam and pos to find name\n  // check if \" is used if so get value from \"->\"\n  // then increment pos to find next ;\n\n  while ((pos !== false) &&\n         (pos = line.indexOf(delim, pos + 1)) !== -1) {\n\n    name = line.slice(lastParam + 1, pos);\n    if (name.length == 0) {\n      throw new ParserError(\"Empty parameter name in '\" + line + \"'\");\n    }\n    lcname = name.toLowerCase();\n    mvdelim = false;\n    multiValue = false;\n\n    if (lcname in designSet.param && designSet.param[lcname].valueType) {\n      type = designSet.param[lcname].valueType;\n    } else {\n      type = DEFAULT_PARAM_TYPE;\n    }\n\n    if (lcname in designSet.param) {\n      multiValue = designSet.param[lcname].multiValue;\n      if (designSet.param[lcname].multiValueSeparateDQuote) {\n        mvdelim = parse._rfc6868Escape('\"' + multiValue + '\"');\n      }\n    }\n\n    let nextChar = line[pos + 1];\n    if (nextChar === '\"') {\n      valuePos = pos + 2;\n      pos = line.indexOf('\"', valuePos);\n      if (multiValue && pos != -1) {\n          let extendedValue = true;\n          while (extendedValue) {\n            if (line[pos + 1] == multiValue && line[pos + 2] == '\"') {\n              pos = line.indexOf('\"', pos + 3);\n            } else {\n              extendedValue = false;\n            }\n          }\n        }\n      if (pos === -1) {\n        throw new ParserError(\n          'invalid line (no matching double quote) \"' + line + '\"'\n        );\n      }\n      value = line.slice(valuePos, pos);\n      lastParam = line.indexOf(PARAM_DELIMITER, pos);\n      let propValuePos = line.indexOf(VALUE_DELIMITER, pos);\n      // if either no next parameter or delimeter in property value, let's stop here\n      if (lastParam === -1 || (propValuePos !== -1 && lastParam > propValuePos)) {\n        pos = false;\n      }\n    } else {\n      valuePos = pos + 1;\n\n      // move to next \";\"\n      let nextPos = line.indexOf(PARAM_DELIMITER, valuePos);\n      let propValuePos = line.indexOf(VALUE_DELIMITER, valuePos);\n      if (propValuePos !== -1 && nextPos > propValuePos) {\n        // this is a delimiter in the property value, let's stop here\n        nextPos = propValuePos;\n        pos = false;\n      } else if (nextPos === -1) {\n        // no \";\"\n        if (propValuePos === -1) {\n          nextPos = line.length;\n        } else {\n          nextPos = propValuePos;\n        }\n        pos = false;\n      } else {\n        lastParam = nextPos;\n        pos = nextPos;\n      }\n\n      value = line.slice(valuePos, nextPos);\n    }\n\n    const length_before = value.length;\n    value = parse._rfc6868Escape(value);\n    valuePos += length_before - value.length;\n    if (multiValue) {\n      let delimiter = mvdelim || multiValue;\n      value = parse._parseMultiValue(value, delimiter, type, [], null, designSet);\n    } else {\n      value = parse._parseValue(value, type, designSet);\n    }\n\n    if (multiValue && (lcname in result)) {\n      if (Array.isArray(result[lcname])) {\n        result[lcname].push(value);\n      } else {\n        result[lcname] = [\n          result[lcname],\n          value\n        ];\n      }\n    } else {\n      result[lcname] = value;\n    }\n  }\n  return [result, value, valuePos];\n};\n\n/**\n * Internal helper for rfc6868. Exposing this on ICAL.parse so that\n * hackers can disable the rfc6868 parsing if the really need to.\n *\n * @function ICAL.parse._rfc6868Escape\n * @param {String} val        The value to escape\n * @return {String}           The escaped value\n */\nparse._rfc6868Escape = function(val) {\n  return val.replace(/\\^['n^]/g, function(x) {\n    return RFC6868_REPLACE_MAP$1[x];\n  });\n};\n\n/**\n * Parse a multi value string. This function is used either for parsing\n * actual multi-value property's values, or for handling parameter values. It\n * can be used for both multi-value properties and structured value properties.\n *\n * @private\n * @function ICAL.parse._parseMultiValue\n * @param {String} buffer           The buffer containing the full value\n * @param {String} delim            The multi-value delimiter\n * @param {String} type             The value type to be parsed\n * @param {Array.<?>} result        The array to append results to, varies on value type\n * @param {String} innerMulti       The inner delimiter to split each value with\n * @param {designSet} designSet     The design data for this value\n * @return {?|Array.<?>}            Either an array of results, or the first result\n */\nparse._parseMultiValue = function(buffer, delim, type, result, innerMulti, designSet, structuredValue) {\n  let pos = 0;\n  let lastPos = 0;\n  let value;\n  if (delim.length === 0) {\n    return buffer;\n  }\n\n  // split each piece\n  while ((pos = unescapedIndexOf(buffer, delim, lastPos)) !== -1) {\n    value = buffer.slice(lastPos, pos);\n    if (innerMulti) {\n      value = parse._parseMultiValue(value, innerMulti, type, [], null, designSet, structuredValue);\n    } else {\n      value = parse._parseValue(value, type, designSet, structuredValue);\n    }\n    result.push(value);\n    lastPos = pos + delim.length;\n  }\n\n  // on the last piece take the rest of string\n  value = buffer.slice(lastPos);\n  if (innerMulti) {\n    value = parse._parseMultiValue(value, innerMulti, type, [], null, designSet, structuredValue);\n  } else {\n    value = parse._parseValue(value, type, designSet, structuredValue);\n  }\n  result.push(value);\n\n  return result.length == 1 ? result[0] : result;\n};\n\n/**\n * Process a complete buffer of iCalendar/vCard data line by line, correctly\n * unfolding content. Each line will be processed with the given callback\n *\n * @private\n * @function ICAL.parse._eachLine\n * @param {String} buffer                         The buffer to process\n * @param {function(?String, String)} callback    The callback for each line\n */\nparse._eachLine = function(buffer, callback) {\n  let len = buffer.length;\n  let lastPos = buffer.search(CHAR);\n  let pos = lastPos;\n  let line;\n  let firstChar;\n\n  let newlineOffset;\n\n  do {\n    pos = buffer.indexOf('\\n', lastPos) + 1;\n\n    if (pos > 1 && buffer[pos - 2] === '\\r') {\n      newlineOffset = 2;\n    } else {\n      newlineOffset = 1;\n    }\n\n    if (pos === 0) {\n      pos = len;\n      newlineOffset = 0;\n    }\n\n    firstChar = buffer[lastPos];\n\n    if (firstChar === ' ' || firstChar === '\\t') {\n      // add to line\n      line += buffer.slice(lastPos + 1, pos - newlineOffset);\n    } else {\n      if (line)\n        callback(null, line);\n      // push line\n      line = buffer.slice(lastPos, pos - newlineOffset);\n    }\n\n    lastPos = pos;\n  } while (pos !== len);\n\n  // extra ending line\n  line = line.trim();\n\n  if (line.length)\n    callback(null, line);\n};\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\nconst OPTIONS = [\"tzid\", \"location\", \"tznames\", \"latitude\", \"longitude\"];\n\n/**\n * Timezone representation.\n *\n * @example\n * var vcalendar;\n * var timezoneComp = vcalendar.getFirstSubcomponent('vtimezone');\n * var tzid = timezoneComp.getFirstPropertyValue('tzid');\n *\n * var timezone = new ICAL.Timezone({\n *   component: timezoneComp,\n *   tzid\n * });\n *\n * @memberof ICAL\n */\nclass Timezone {\n  static _compare_change_fn(a, b) {\n    if (a.year < b.year) return -1;\n    else if (a.year > b.year) return 1;\n\n    if (a.month < b.month) return -1;\n    else if (a.month > b.month) return 1;\n\n    if (a.day < b.day) return -1;\n    else if (a.day > b.day) return 1;\n\n    if (a.hour < b.hour) return -1;\n    else if (a.hour > b.hour) return 1;\n\n    if (a.minute < b.minute) return -1;\n    else if (a.minute > b.minute) return 1;\n\n    if (a.second < b.second) return -1;\n    else if (a.second > b.second) return 1;\n\n    return 0;\n  }\n\n  /**\n   * Convert the date/time from one zone to the next.\n   *\n   * @param {Time} tt                  The time to convert\n   * @param {Timezone} from_zone       The source zone to convert from\n   * @param {Timezone} to_zone         The target zone to convert to\n   * @return {Time}                    The converted date/time object\n   */\n  static convert_time(tt, from_zone, to_zone) {\n    if (tt.isDate ||\n        from_zone.tzid == to_zone.tzid ||\n        from_zone == Timezone.localTimezone ||\n        to_zone == Timezone.localTimezone) {\n      tt.zone = to_zone;\n      return tt;\n    }\n\n    let utcOffset = from_zone.utcOffset(tt);\n    tt.adjust(0, 0, 0, - utcOffset);\n\n    utcOffset = to_zone.utcOffset(tt);\n    tt.adjust(0, 0, 0, utcOffset);\n\n    return null;\n  }\n\n  /**\n   * Creates a new ICAL.Timezone instance from the passed data object.\n   *\n   * @param {Component|Object} aData options for class\n   * @param {String|Component} aData.component\n   *        If aData is a simple object, then this member can be set to either a\n   *        string containing the component data, or an already parsed\n   *        ICAL.Component\n   * @param {String} aData.tzid      The timezone identifier\n   * @param {String} aData.location  The timezone locationw\n   * @param {String} aData.tznames   An alternative string representation of the\n   *                                  timezone\n   * @param {Number} aData.latitude  The latitude of the timezone\n   * @param {Number} aData.longitude The longitude of the timezone\n   */\n  static fromData(aData) {\n    let tt = new Timezone();\n    return tt.fromData(aData);\n  }\n\n  /**\n   * The instance describing the UTC timezone\n   * @type {Timezone}\n   * @constant\n   * @instance\n   */\n  static #utcTimezone = null;\n  static get utcTimezone() {\n    if (!this.#utcTimezone) {\n      this.#utcTimezone = Timezone.fromData({\n        tzid: \"UTC\"\n      });\n    }\n    return this.#utcTimezone;\n  }\n\n  /**\n   * The instance describing the local timezone\n   * @type {Timezone}\n   * @constant\n   * @instance\n   */\n  static #localTimezone = null;\n  static get localTimezone() {\n    if (!this.#localTimezone) {\n      this.#localTimezone = Timezone.fromData({\n        tzid: \"floating\"\n      });\n    }\n    return this.#localTimezone;\n  }\n\n  /**\n   * Adjust a timezone change object.\n   * @private\n   * @param {Object} change     The timezone change object\n   * @param {Number} days       The extra amount of days\n   * @param {Number} hours      The extra amount of hours\n   * @param {Number} minutes    The extra amount of minutes\n   * @param {Number} seconds    The extra amount of seconds\n   */\n  static adjust_change(change, days, hours, minutes, seconds) {\n    return Time.prototype.adjust.call(\n      change,\n      days,\n      hours,\n      minutes,\n      seconds,\n      change\n    );\n  }\n\n  static _minimumExpansionYear = -1;\n  static EXTRA_COVERAGE = 5;\n\n  /**\n   * Creates a new ICAL.Timezone instance, by passing in a tzid and component.\n   *\n   * @param {Component|Object} data options for class\n   * @param {String|Component} data.component\n   *        If data is a simple object, then this member can be set to either a\n   *        string containing the component data, or an already parsed\n   *        ICAL.Component\n   * @param {String} data.tzid      The timezone identifier\n   * @param {String} data.location  The timezone locationw\n   * @param {String} data.tznames   An alternative string representation of the\n   *                                  timezone\n   * @param {Number} data.latitude  The latitude of the timezone\n   * @param {Number} data.longitude The longitude of the timezone\n   */\n  constructor(data) {\n    this.wrappedJSObject = this;\n    this.fromData(data);\n  }\n\n\n  /**\n   * Timezone identifier\n   * @type {String}\n   */\n  tzid = \"\";\n\n  /**\n   * Timezone location\n   * @type {String}\n   */\n  location = \"\";\n\n  /**\n   * Alternative timezone name, for the string representation\n   * @type {String}\n   */\n  tznames = \"\";\n\n  /**\n   * The primary latitude for the timezone.\n   * @type {Number}\n   */\n  latitude = 0.0;\n\n  /**\n   * The primary longitude for the timezone.\n   * @type {Number}\n   */\n  longitude = 0.0;\n\n  /**\n   * The vtimezone component for this timezone.\n   * @type {Component}\n   */\n  component = null;\n\n  /**\n   * The year this timezone has been expanded to. All timezone transition\n   * dates until this year are known and can be used for calculation\n   *\n   * @private\n   * @type {Number}\n   */\n  expandedUntilYear = 0;\n\n  /**\n   * The class identifier.\n   * @constant\n   * @type {String}\n   * @default \"icaltimezone\"\n   */\n  icalclass = \"icaltimezone\";\n\n  /**\n   * Sets up the current instance using members from the passed data object.\n   *\n   * @param {Component|Object} aData options for class\n   * @param {String|Component} aData.component\n   *        If aData is a simple object, then this member can be set to either a\n   *        string containing the component data, or an already parsed\n   *        ICAL.Component\n   * @param {String} aData.tzid      The timezone identifier\n   * @param {String} aData.location  The timezone locationw\n   * @param {String} aData.tznames   An alternative string representation of the\n   *                                  timezone\n   * @param {Number} aData.latitude  The latitude of the timezone\n   * @param {Number} aData.longitude The longitude of the timezone\n   */\n  fromData(aData) {\n    this.expandedUntilYear = 0;\n    this.changes = [];\n\n    if (aData instanceof Component) {\n      // Either a component is passed directly\n      this.component = aData;\n    } else {\n      // Otherwise the component may be in the data object\n      if (aData && \"component\" in aData) {\n        if (typeof aData.component == \"string\") {\n          // If a string was passed, parse it as a component\n          let jCal = parse(aData.component);\n          this.component = new Component(jCal);\n        } else if (aData.component instanceof Component) {\n          // If it was a component already, then just set it\n          this.component = aData.component;\n        } else {\n          // Otherwise just null out the component\n          this.component = null;\n        }\n      }\n\n      // Copy remaining passed properties\n      for (let prop of OPTIONS) {\n        if (aData && prop in aData) {\n          this[prop] = aData[prop];\n        }\n      }\n    }\n\n    // If we have a component but no TZID, attempt to get it from the\n    // component's properties.\n    if (this.component instanceof Component && !this.tzid) {\n      this.tzid = this.component.getFirstPropertyValue('tzid');\n    }\n\n    return this;\n  }\n\n  /**\n   * Finds the utcOffset the given time would occur in this timezone.\n   *\n   * @param {Time} tt         The time to check for\n   * @return {Number}         utc offset in seconds\n   */\n  utcOffset(tt) {\n    if (this == Timezone.utcTimezone || this == Timezone.localTimezone) {\n      return 0;\n    }\n\n    this._ensureCoverage(tt.year);\n\n    if (!this.changes.length) {\n      return 0;\n    }\n\n    let tt_change = {\n      year: tt.year,\n      month: tt.month,\n      day: tt.day,\n      hour: tt.hour,\n      minute: tt.minute,\n      second: tt.second\n    };\n\n    let change_num = this._findNearbyChange(tt_change);\n    let change_num_to_use = -1;\n    let step = 1;\n\n    // TODO: replace with bin search?\n    for (;;) {\n      let change = clone(this.changes[change_num], true);\n      if (change.utcOffset < change.prevUtcOffset) {\n        Timezone.adjust_change(change, 0, 0, 0, change.utcOffset);\n      } else {\n        Timezone.adjust_change(change, 0, 0, 0,\n                                        change.prevUtcOffset);\n      }\n\n      let cmp = Timezone._compare_change_fn(tt_change, change);\n\n      if (cmp >= 0) {\n        change_num_to_use = change_num;\n      } else {\n        step = -1;\n      }\n\n      if (step == -1 && change_num_to_use != -1) {\n        break;\n      }\n\n      change_num += step;\n\n      if (change_num < 0) {\n        return 0;\n      }\n\n      if (change_num >= this.changes.length) {\n        break;\n      }\n    }\n\n    let zone_change = this.changes[change_num_to_use];\n    let utcOffset_change = zone_change.utcOffset - zone_change.prevUtcOffset;\n\n    if (utcOffset_change < 0 && change_num_to_use > 0) {\n      let tmp_change = clone(zone_change, true);\n      Timezone.adjust_change(tmp_change, 0, 0, 0, tmp_change.prevUtcOffset);\n\n      if (Timezone._compare_change_fn(tt_change, tmp_change) < 0) {\n        let prev_zone_change = this.changes[change_num_to_use - 1];\n\n        let want_daylight = false; // TODO\n\n        if (zone_change.is_daylight != want_daylight &&\n            prev_zone_change.is_daylight == want_daylight) {\n          zone_change = prev_zone_change;\n        }\n      }\n    }\n\n    // TODO return is_daylight?\n    return zone_change.utcOffset;\n  }\n\n  _findNearbyChange(change) {\n    // find the closest match\n    let idx = binsearchInsert(\n      this.changes,\n      change,\n      Timezone._compare_change_fn\n    );\n\n    if (idx >= this.changes.length) {\n      return this.changes.length - 1;\n    }\n\n    return idx;\n  }\n\n  _ensureCoverage(aYear) {\n    if (Timezone._minimumExpansionYear == -1) {\n      let today = Time.now();\n      Timezone._minimumExpansionYear = today.year;\n    }\n\n    let changesEndYear = aYear;\n    if (changesEndYear < Timezone._minimumExpansionYear) {\n      changesEndYear = Timezone._minimumExpansionYear;\n    }\n\n    changesEndYear += Timezone.EXTRA_COVERAGE;\n\n    if (!this.changes.length || this.expandedUntilYear < aYear) {\n      let subcomps = this.component.getAllSubcomponents();\n      let compLen = subcomps.length;\n      let compIdx = 0;\n\n      for (; compIdx < compLen; compIdx++) {\n        this._expandComponent(\n          subcomps[compIdx], changesEndYear, this.changes\n        );\n      }\n\n      this.changes.sort(Timezone._compare_change_fn);\n      this.expandedUntilYear = changesEndYear;\n    }\n  }\n\n  _expandComponent(aComponent, aYear, changes) {\n    if (!aComponent.hasProperty(\"dtstart\") ||\n        !aComponent.hasProperty(\"tzoffsetto\") ||\n        !aComponent.hasProperty(\"tzoffsetfrom\")) {\n      return null;\n    }\n\n    let dtstart = aComponent.getFirstProperty(\"dtstart\").getFirstValue();\n    let change;\n\n    function convert_tzoffset(offset) {\n      return offset.factor * (offset.hours * 3600 + offset.minutes * 60);\n    }\n\n    function init_changes() {\n      let changebase = {};\n      changebase.is_daylight = (aComponent.name == \"daylight\");\n      changebase.utcOffset = convert_tzoffset(\n        aComponent.getFirstProperty(\"tzoffsetto\").getFirstValue()\n      );\n\n      changebase.prevUtcOffset = convert_tzoffset(\n        aComponent.getFirstProperty(\"tzoffsetfrom\").getFirstValue()\n      );\n\n      return changebase;\n    }\n\n    if (!aComponent.hasProperty(\"rrule\") && !aComponent.hasProperty(\"rdate\")) {\n      change = init_changes();\n      change.year = dtstart.year;\n      change.month = dtstart.month;\n      change.day = dtstart.day;\n      change.hour = dtstart.hour;\n      change.minute = dtstart.minute;\n      change.second = dtstart.second;\n\n      Timezone.adjust_change(change, 0, 0, 0, -change.prevUtcOffset);\n      changes.push(change);\n    } else {\n      let props = aComponent.getAllProperties(\"rdate\");\n      for (let rdate of props) {\n        let time = rdate.getFirstValue();\n        change = init_changes();\n\n        change.year = time.year;\n        change.month = time.month;\n        change.day = time.day;\n\n        if (time.isDate) {\n          change.hour = dtstart.hour;\n          change.minute = dtstart.minute;\n          change.second = dtstart.second;\n\n          if (dtstart.zone != Timezone.utcTimezone) {\n            Timezone.adjust_change(change, 0, 0, 0, -change.prevUtcOffset);\n          }\n        } else {\n          change.hour = time.hour;\n          change.minute = time.minute;\n          change.second = time.second;\n\n          if (time.zone != Timezone.utcTimezone) {\n            Timezone.adjust_change(change, 0, 0, 0, -change.prevUtcOffset);\n          }\n        }\n\n        changes.push(change);\n      }\n\n      let rrule = aComponent.getFirstProperty(\"rrule\");\n\n      if (rrule) {\n        rrule = rrule.getFirstValue();\n        change = init_changes();\n\n        if (rrule.until && rrule.until.zone == Timezone.utcTimezone) {\n          rrule.until.adjust(0, 0, 0, change.prevUtcOffset);\n          rrule.until.zone = Timezone.localTimezone;\n        }\n\n        let iterator = rrule.iterator(dtstart);\n\n        let occ;\n        while ((occ = iterator.next())) {\n          change = init_changes();\n          if (occ.year > aYear || !occ) {\n            break;\n          }\n\n          change.year = occ.year;\n          change.month = occ.month;\n          change.day = occ.day;\n          change.hour = occ.hour;\n          change.minute = occ.minute;\n          change.second = occ.second;\n          change.isDate = occ.isDate;\n\n          Timezone.adjust_change(change, 0, 0, 0, -change.prevUtcOffset);\n          changes.push(change);\n        }\n      }\n    }\n\n    return changes;\n  }\n\n  /**\n   * The string representation of this timezone.\n   * @return {String}\n   */\n  toString() {\n    return (this.tznames ? this.tznames : this.tzid);\n  }\n}\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\nlet zones = null;\n\n/**\n * @classdesc\n * Singleton class to contain timezones.  Right now it is all manual registry in\n * the future we may use this class to download timezone information or handle\n * loading pre-expanded timezones.\n *\n * @exports module:ICAL.TimezoneService\n * @memberof ICAL\n */\nconst TimezoneService = {\n  get count() {\n    if (zones === null) {\n      return 0;\n    }\n\n    return Object.keys(zones).length;\n  },\n\n  reset: function() {\n    zones = Object.create(null);\n    let utc = Timezone.utcTimezone;\n\n    zones.Z = utc;\n    zones.UTC = utc;\n    zones.GMT = utc;\n  },\n  _hard_reset: function() {\n    zones = null;\n  },\n\n  /**\n   * Checks if timezone id has been registered.\n   *\n   * @param {String} tzid     Timezone identifier (e.g. America/Los_Angeles)\n   * @return {Boolean}        False, when not present\n   */\n  has: function(tzid) {\n    if (zones === null) {\n      return false;\n    }\n\n    return !!zones[tzid];\n  },\n\n  /**\n   * Returns a timezone by its tzid if present.\n   *\n   * @param {String} tzid               Timezone identifier (e.g. America/Los_Angeles)\n   * @return {Timezone | undefined}     The timezone, or undefined if not found\n   */\n  get: function(tzid) {\n    if (zones === null) {\n      this.reset();\n    }\n\n    return zones[tzid];\n  },\n\n  /**\n   * Registers a timezone object or component.\n   *\n   * @param {Component|Timezone} timezone\n   *        The initialized zone or vtimezone.\n   *\n   * @param {String=} name\n   *        The name of the timezone. Defaults to the component's TZID if not\n   *        passed.\n   */\n  register: function(timezone, name) {\n    if (zones === null) {\n      this.reset();\n    }\n\n    // This avoids a breaking change by the change of argument order\n    // TODO remove in v3\n    if (typeof timezone === \"string\" && name instanceof Timezone) {\n      [timezone, name] = [name, timezone];\n    }\n\n    if (!name) {\n      if (timezone instanceof Timezone) {\n        name = timezone.tzid;\n      } else {\n        if (timezone.name === 'vtimezone') {\n          timezone = new Timezone(timezone);\n          name = timezone.tzid;\n        }\n      }\n    }\n\n    if (!name) {\n      throw new TypeError(\"Neither a timezone nor a name was passed\");\n    }\n\n    if (timezone instanceof Timezone) {\n      zones[name] = timezone;\n    } else {\n      throw new TypeError('timezone must be ICAL.Timezone or ICAL.Component');\n    }\n  },\n\n  /**\n   * Removes a timezone by its tzid from the list.\n   *\n   * @param {String} tzid     Timezone identifier (e.g. America/Los_Angeles)\n   * @return {?Timezone}      The removed timezone, or null if not registered\n   */\n  remove: function(tzid) {\n    if (zones === null) {\n      return null;\n    }\n\n    return (delete zones[tzid]);\n  }\n};\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n/**\n * Helper functions used in various places within ical.js\n * @module ICAL.helpers\n */\n\n/**\n * Compiles a list of all referenced TZIDs in all subcomponents and\n * removes any extra VTIMEZONE subcomponents. In addition, if any TZIDs\n * are referenced by a component, but a VTIMEZONE does not exist,\n * an attempt will be made to generate a VTIMEZONE using ICAL.TimezoneService.\n *\n * @param {Component} vcal     The top-level VCALENDAR component.\n * @return {Component}         The ICAL.Component that was passed in.\n */\nfunction updateTimezones(vcal) {\n  let allsubs, properties, vtimezones, reqTzid, i;\n\n  if (!vcal || vcal.name !== \"vcalendar\") {\n    //not a top-level vcalendar component\n    return vcal;\n  }\n\n  //Store vtimezone subcomponents in an object reference by tzid.\n  //Store properties from everything else in another array\n  allsubs = vcal.getAllSubcomponents();\n  properties = [];\n  vtimezones = {};\n  for (i = 0; i < allsubs.length; i++) {\n    if (allsubs[i].name === \"vtimezone\") {\n      let tzid = allsubs[i].getFirstProperty(\"tzid\").getFirstValue();\n      vtimezones[tzid] = allsubs[i];\n    } else {\n      properties = properties.concat(allsubs[i].getAllProperties());\n    }\n  }\n\n  //create an object with one entry for each required tz\n  reqTzid = {};\n  for (i = 0; i < properties.length; i++) {\n    let tzid = properties[i].getParameter(\"tzid\");\n    if (tzid) {\n      reqTzid[tzid] = true;\n    }\n  }\n\n  //delete any vtimezones that are not on the reqTzid list.\n  for (let [tzid, comp] of Object.entries(vtimezones)) {\n    if (!reqTzid[tzid]) {\n      vcal.removeSubcomponent(comp);\n    }\n  }\n\n  //create any missing, but registered timezones\n  for (let tzid of Object.keys(reqTzid)) {\n    if (!vtimezones[tzid] && TimezoneService.has(tzid)) {\n      vcal.addSubcomponent(TimezoneService.get(tzid).component);\n    }\n  }\n\n  return vcal;\n}\n\n/**\n * Checks if the given type is of the number type and also NaN.\n *\n * @param {Number} number     The number to check\n * @return {Boolean}          True, if the number is strictly NaN\n */\nfunction isStrictlyNaN(number) {\n  return typeof(number) === 'number' && isNaN(number);\n}\n\n/**\n * Parses a string value that is expected to be an integer, when the valid is\n * not an integer throws a decoration error.\n *\n * @param {String} string     Raw string input\n * @return {Number}           Parsed integer\n */\nfunction strictParseInt(string) {\n  let result = parseInt(string, 10);\n\n  if (isStrictlyNaN(result)) {\n    throw new Error(\n      'Could not extract integer from \"' + string + '\"'\n    );\n  }\n\n  return result;\n}\n\n/**\n * Creates or returns a class instance of a given type with the initialization\n * data if the data is not already an instance of the given type.\n *\n * @example\n * var time = new ICAL.Time(...);\n * var result = ICAL.helpers.formatClassType(time, ICAL.Time);\n *\n * (result instanceof ICAL.Time)\n * // => true\n *\n * result = ICAL.helpers.formatClassType({}, ICAL.Time);\n * (result isntanceof ICAL.Time)\n * // => true\n *\n *\n * @param {Object} data       object initialization data\n * @param {Object} type       object type (like ICAL.Time)\n * @return {?}                An instance of the found type.\n */\nfunction formatClassType(data, type) {\n  if (typeof(data) === 'undefined') {\n    return undefined;\n  }\n\n  if (data instanceof type) {\n    return data;\n  }\n  return new type(data);\n}\n\n/**\n * Identical to indexOf but will only match values when they are not preceded\n * by a backslash character.\n *\n * @param {String} buffer         String to search\n * @param {String} search         Value to look for\n * @param {Number} pos            Start position\n * @return {Number}               The position, or -1 if not found\n */\nfunction unescapedIndexOf(buffer, search, pos) {\n  while ((pos = buffer.indexOf(search, pos)) !== -1) {\n    if (pos > 0 && buffer[pos - 1] === '\\\\') {\n      pos += 1;\n    } else {\n      return pos;\n    }\n  }\n  return -1;\n}\n\n/**\n * Find the index for insertion using binary search.\n *\n * @param {Array} list            The list to search\n * @param {?} seekVal             The value to insert\n * @param {function(?,?)} cmpfunc The comparison func, that can\n *                                  compare two seekVals\n * @return {Number}               The insert position\n */\nfunction binsearchInsert(list, seekVal, cmpfunc) {\n  if (!list.length)\n    return 0;\n\n  let low = 0, high = list.length - 1,\n      mid, cmpval;\n\n  while (low <= high) {\n    mid = low + Math.floor((high - low) / 2);\n    cmpval = cmpfunc(seekVal, list[mid]);\n\n    if (cmpval < 0)\n      high = mid - 1;\n    else if (cmpval > 0)\n      low = mid + 1;\n    else\n      break;\n  }\n\n  if (cmpval < 0)\n    return mid; // insertion is displacing, so use mid outright.\n  else if (cmpval > 0)\n    return mid + 1;\n  else\n    return mid;\n}\n\n/**\n * Clone the passed object or primitive. By default a shallow clone will be\n * executed.\n *\n * @param {*} aSrc            The thing to clone\n * @param {Boolean=} aDeep    If true, a deep clone will be performed\n * @return {*}                The copy of the thing\n */\nfunction clone(aSrc, aDeep) {\n  if (!aSrc || typeof aSrc != \"object\") {\n    return aSrc;\n  } else if (aSrc instanceof Date) {\n    return new Date(aSrc.getTime());\n  } else if (\"clone\" in aSrc) {\n    return aSrc.clone();\n  } else if (Array.isArray(aSrc)) {\n    let arr = [];\n    for (let i = 0; i < aSrc.length; i++) {\n      arr.push(aDeep ? clone(aSrc[i], true) : aSrc[i]);\n    }\n    return arr;\n  } else {\n    let obj = {};\n    for (let [name, value] of Object.entries(aSrc)) {\n      if (aDeep) {\n        obj[name] = clone(value, true);\n      } else {\n        obj[name] = value;\n      }\n    }\n    return obj;\n  }\n}\n\n/**\n * Performs iCalendar line folding. A line ending character is inserted and\n * the next line begins with a whitespace.\n *\n * @example\n * SUMMARY:This line will be fold\n *  ed right in the middle of a word.\n *\n * @param {String} aLine      The line to fold\n * @return {String}           The folded line\n */\nfunction foldline(aLine) {\n  let result = \"\";\n  let line = aLine || \"\", pos = 0, line_length = 0;\n  //pos counts position in line for the UTF-16 presentation\n  //line_length counts the bytes for the UTF-8 presentation\n  while (line.length) {\n    let cp = line.codePointAt(pos);\n    if (cp < 128) ++line_length;\n    else if (cp < 2048) line_length += 2;//needs 2 UTF-8 bytes\n    else if (cp < 65536) line_length += 3;\n    else line_length += 4; //cp is less than 1114112\n    if (line_length < ICALmodule.foldLength + 1)\n      pos += cp > 65535 ? 2 : 1;\n    else {\n      result += ICALmodule.newLineChar + \" \" + line.slice(0, Math.max(0, pos));\n      line = line.slice(Math.max(0, pos));\n      pos = line_length = 0;\n    }\n  }\n  return result.slice(ICALmodule.newLineChar.length + 1);\n}\n\n/**\n * Pads the given string or number with zeros so it will have at least two\n * characters.\n *\n * @param {String|Number} data    The string or number to pad\n * @return {String}               The number padded as a string\n */\nfunction pad2(data) {\n  if (typeof(data) !== 'string') {\n    // handle fractions.\n    if (typeof(data) === 'number') {\n      data = parseInt(data);\n    }\n    data = String(data);\n  }\n\n  let len = data.length;\n\n  switch (len) {\n    case 0:\n      return '00';\n    case 1:\n      return '0' + data;\n    default:\n      return data;\n  }\n}\n\n/**\n * Truncates the given number, correctly handling negative numbers.\n *\n * @param {Number} number     The number to truncate\n * @return {Number}           The truncated number\n */\nfunction trunc(number) {\n  return (number < 0 ? Math.ceil(number) : Math.floor(number));\n}\n\n/**\n * Poor-man's cross-browser object extension. Doesn't support all the\n * features, but enough for our usage. Note that the target's properties are\n * not overwritten with the source properties.\n *\n * @example\n * var child = ICAL.helpers.extend(parent, {\n *   \"bar\": 123\n * });\n *\n * @param {Object} source     The object to extend\n * @param {Object} target     The object to extend with\n * @return {Object}           Returns the target.\n */\nfunction extend(source, target) {\n  for (let key in source) {\n    let descr = Object.getOwnPropertyDescriptor(source, key);\n    if (descr && !Object.getOwnPropertyDescriptor(target, key)) {\n      Object.defineProperty(target, key, descr);\n    }\n  }\n  return target;\n}\n\nvar helpers = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  updateTimezones: updateTimezones,\n  isStrictlyNaN: isStrictlyNaN,\n  strictParseInt: strictParseInt,\n  formatClassType: formatClassType,\n  unescapedIndexOf: unescapedIndexOf,\n  binsearchInsert: binsearchInsert,\n  clone: clone,\n  foldline: foldline,\n  pad2: pad2,\n  trunc: trunc,\n  extend: extend\n});\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n/**\n * This class represents the \"utc-offset\" value type, with various calculation and manipulation\n * methods.\n *\n * @memberof ICAL\n */\nclass UtcOffset {\n  /**\n   * Creates a new {@link ICAL.UtcOffset} instance from the passed string.\n   *\n   * @param {String} aString    The string to parse\n   * @return {Duration}         The created utc-offset instance\n   */\n  static fromString(aString) {\n    // -05:00\n    let options = {};\n    //TODO: support seconds per rfc5545 ?\n    options.factor = (aString[0] === '+') ? 1 : -1;\n    options.hours = strictParseInt(aString.slice(1, 3));\n    options.minutes = strictParseInt(aString.slice(4, 6));\n\n    return new UtcOffset(options);\n  }\n\n  /**\n   * Creates a new {@link ICAL.UtcOffset} instance from the passed seconds\n   * value.\n   *\n   * @param {Number} aSeconds       The number of seconds to convert\n   */\n  static fromSeconds(aSeconds) {\n    let instance = new UtcOffset();\n    instance.fromSeconds(aSeconds);\n    return instance;\n  }\n\n  /**\n   * Creates a new ICAL.UtcOffset instance.\n   *\n   * @param {Object} aData          An object with members of the utc offset\n   * @param {Number=} aData.hours   The hours for the utc offset\n   * @param {Number=} aData.minutes The minutes in the utc offset\n   * @param {Number=} aData.factor  The factor for the utc-offset, either -1 or 1\n   */\n  constructor(aData) {\n    this.fromData(aData);\n  }\n\n  /**\n   * The hours in the utc-offset\n   * @type {Number}\n   */\n  hours = 0;\n\n  /**\n   * The minutes in the utc-offset\n   * @type {Number}\n   */\n  minutes = 0;\n\n  /**\n   * The sign of the utc offset, 1 for positive offset, -1 for negative\n   * offsets.\n   * @type {Number}\n   */\n  factor = 1;\n\n  /**\n   * The type name, to be used in the jCal object.\n   * @constant\n   * @type {String}\n   * @default \"utc-offset\"\n   */\n  icaltype = \"utc-offset\";\n\n  /**\n   * Returns a clone of the utc offset object.\n   *\n   * @return {UtcOffset}     The cloned object\n   */\n  clone() {\n    return UtcOffset.fromSeconds(this.toSeconds());\n  }\n\n  /**\n   * Sets up the current instance using members from the passed data object.\n   *\n   * @param {Object} aData          An object with members of the utc offset\n   * @param {Number=} aData.hours   The hours for the utc offset\n   * @param {Number=} aData.minutes The minutes in the utc offset\n   * @param {Number=} aData.factor  The factor for the utc-offset, either -1 or 1\n   */\n  fromData(aData) {\n    if (aData) {\n      for (let [key, value] of Object.entries(aData)) {\n        this[key] = value;\n      }\n    }\n    this._normalize();\n  }\n\n  /**\n   * Sets up the current instance from the given seconds value. The seconds\n   * value is truncated to the minute. Offsets are wrapped when the world\n   * ends, the hour after UTC+14:00 is UTC-12:00.\n   *\n   * @param {Number} aSeconds         The seconds to convert into an offset\n   */\n  fromSeconds(aSeconds) {\n    let secs = Math.abs(aSeconds);\n\n    this.factor = aSeconds < 0 ? -1 : 1;\n    this.hours = trunc(secs / 3600);\n\n    secs -= (this.hours * 3600);\n    this.minutes = trunc(secs / 60);\n    return this;\n  }\n\n  /**\n   * Convert the current offset to a value in seconds\n   *\n   * @return {Number}                 The offset in seconds\n   */\n  toSeconds() {\n    return this.factor * (60 * this.minutes + 3600 * this.hours);\n  }\n\n  /**\n   * Compare this utc offset with another one.\n   *\n   * @param {UtcOffset} other             The other offset to compare with\n   * @return {Number}                     -1, 0 or 1 for less/equal/greater\n   */\n  compare(other) {\n    let a = this.toSeconds();\n    let b = other.toSeconds();\n    return (a > b) - (b > a);\n  }\n\n  _normalize() {\n    // Range: 97200 seconds (with 1 hour inbetween)\n    let secs = this.toSeconds();\n    let factor = this.factor;\n    while (secs < -43200) { // = UTC-12:00\n      secs += 97200;\n    }\n    while (secs > 50400) { // = UTC+14:00\n      secs -= 97200;\n    }\n\n    this.fromSeconds(secs);\n\n    // Avoid changing the factor when on zero seconds\n    if (secs == 0) {\n      this.factor = factor;\n    }\n  }\n\n  /**\n   * The iCalendar string representation of this utc-offset.\n   * @return {String}\n   */\n  toICALString() {\n    return design$1.icalendar.value['utc-offset'].toICAL(this.toString());\n  }\n\n  /**\n   * The string representation of this utc-offset.\n   * @return {String}\n   */\n  toString() {\n    return (this.factor == 1 ? \"+\" : \"-\") + pad2(this.hours) + ':' + pad2(this.minutes);\n  }\n}\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n/**\n * Describes a vCard time, which has slight differences to the ICAL.Time.\n * Properties can be null if not specified, for example for dates with\n * reduced accuracy or truncation.\n *\n * Note that currently not all methods are correctly re-implemented for\n * VCardTime. For example, comparison will have undefined results when some\n * members are null.\n *\n * Also, normalization is not yet implemented for this class!\n *\n * @memberof ICAL\n * @extends {ICAL.Time}\n */\nclass VCardTime extends Time {\n  /**\n   * Returns a new ICAL.VCardTime instance from a date and/or time string.\n   *\n   * @param {String} aValue     The string to create from\n   * @param {String} aIcalType  The type for this instance, e.g. date-and-or-time\n   * @return {VCardTime}        The date/time instance\n   */\n  static fromDateAndOrTimeString(aValue, aIcalType) {\n    function part(v, s, e) {\n      return v ? strictParseInt(v.slice(s, s + e)) : null;\n    }\n    let parts = aValue.split('T');\n    let dt = parts[0], tmz = parts[1];\n    let splitzone = tmz ? design$1.vcard.value.time._splitZone(tmz) : [];\n    let zone = splitzone[0], tm = splitzone[1];\n\n    let dtlen = dt ? dt.length : 0;\n    let tmlen = tm ? tm.length : 0;\n\n    let hasDashDate = dt && dt[0] == '-' && dt[1] == '-';\n    let hasDashTime = tm && tm[0] == '-';\n\n    let o = {\n      year: hasDashDate ? null : part(dt, 0, 4),\n      month: hasDashDate && (dtlen == 4 || dtlen == 7) ? part(dt, 2, 2) : dtlen == 7 ? part(dt, 5, 2) : dtlen == 10 ? part(dt, 5, 2) : null,\n      day: dtlen == 5 ? part(dt, 3, 2) : dtlen == 7 && hasDashDate ? part(dt, 5, 2) : dtlen == 10 ? part(dt, 8, 2) : null,\n\n      hour: hasDashTime ? null : part(tm, 0, 2),\n      minute: hasDashTime && tmlen == 3 ? part(tm, 1, 2) : tmlen > 4 ? hasDashTime ? part(tm, 1, 2) : part(tm, 3, 2) : null,\n      second: tmlen == 4 ? part(tm, 2, 2) : tmlen == 6 ? part(tm, 4, 2) : tmlen == 8 ? part(tm, 6, 2) : null\n    };\n\n    if (zone == 'Z') {\n      zone = Timezone.utcTimezone;\n    } else if (zone && zone[3] == ':') {\n      zone = UtcOffset.fromString(zone);\n    } else {\n      zone = null;\n    }\n\n    return new VCardTime(o, zone, aIcalType);\n  }\n\n\n  /**\n   * Creates a new ICAL.VCardTime instance.\n   *\n   * @param {Object} data                           The data for the time instance\n   * @param {Number=} data.year                     The year for this date\n   * @param {Number=} data.month                    The month for this date\n   * @param {Number=} data.day                      The day for this date\n   * @param {Number=} data.hour                     The hour for this date\n   * @param {Number=} data.minute                   The minute for this date\n   * @param {Number=} data.second                   The second for this date\n   * @param {Timezone|UtcOffset} zone               The timezone to use\n   * @param {String} icaltype                       The type for this date/time object\n   */\n  constructor(data, zone, icaltype) {\n    super(data, zone);\n    this.icaltype = icaltype || \"date-and-or-time\";\n  }\n\n  /**\n   * The class identifier.\n   * @constant\n   * @type {String}\n   * @default \"vcardtime\"\n   */\n  icalclass = \"vcardtime\";\n\n  /**\n   * The type name, to be used in the jCal object.\n   * @type {String}\n   * @default \"date-and-or-time\"\n   */\n  icaltype = \"date-and-or-time\";\n\n  /**\n   * Returns a clone of the vcard date/time object.\n   *\n   * @return {VCardTime}     The cloned object\n   */\n  clone() {\n    return new VCardTime(this._time, this.zone, this.icaltype);\n  }\n\n  _normalize() {\n    return this;\n  }\n\n  /**\n   * @inheritdoc\n   */\n  utcOffset() {\n    if (this.zone instanceof UtcOffset) {\n      return this.zone.toSeconds();\n    } else {\n      return Time.prototype.utcOffset.apply(this, arguments);\n    }\n  }\n\n  /**\n   * Returns an RFC 6350 compliant representation of this object.\n   *\n   * @return {String}         vcard date/time string\n   */\n  toICALString() {\n    return design$1.vcard.value[this.icaltype].toICAL(this.toString());\n  }\n\n  /**\n   * The string representation of this date/time, in jCard form\n   * (including : and - separators).\n   * @return {String}\n   */\n  toString() {\n    let y = this.year, m = this.month, d = this.day;\n    let h = this.hour, mm = this.minute, s = this.second;\n\n    let hasYear = y !== null, hasMonth = m !== null, hasDay = d !== null;\n    let hasHour = h !== null, hasMinute = mm !== null, hasSecond = s !== null;\n\n    let datepart = (hasYear ? pad2(y) + (hasMonth || hasDay ? '-' : '') : (hasMonth || hasDay ? '--' : '')) +\n                   (hasMonth ? pad2(m) : '') +\n                   (hasDay ? '-' + pad2(d) : '');\n    let timepart = (hasHour ? pad2(h) : '-') + (hasHour && hasMinute ? ':' : '') +\n                   (hasMinute ? pad2(mm) : '') + (!hasHour && !hasMinute ? '-' : '') +\n                   (hasMinute && hasSecond ? ':' : '') +\n                   (hasSecond ? pad2(s) : '');\n\n    let zone;\n    if (this.zone === Timezone.utcTimezone) {\n      zone = 'Z';\n    } else if (this.zone instanceof UtcOffset) {\n      zone = this.zone.toString();\n    } else if (this.zone === Timezone.localTimezone) {\n      zone = '';\n    } else if (this.zone instanceof Timezone) {\n      let offset = UtcOffset.fromSeconds(this.zone.utcOffset(this));\n      zone = offset.toString();\n    } else {\n      zone = '';\n    }\n\n    switch (this.icaltype) {\n      case \"time\":\n        return timepart + zone;\n      case \"date-and-or-time\":\n      case \"date-time\":\n        return datepart + (timepart == '--' ? '' : 'T' + timepart + zone);\n      case \"date\":\n        return datepart;\n    }\n    return null;\n  }\n}\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n/**\n * This lets typescript resolve our custom types in the\n * generated d.ts files (jsdoc typedefs are converted to typescript types).\n * Ignore prevents the typedefs from being documented more than once.\n *\n * @ignore\n * @typedef {import(\"./types.js\").weekDay} weekDay\n * Imports the 'weekDay' type from the \"types.js\" module\n */\n\n/**\n * An iterator for a single recurrence rule. This class usually doesn't have to be instanciated\n * directly, the convenience method {@link ICAL.Recur#iterator} can be used.\n *\n * @memberof ICAL\n */\nclass RecurIterator {\n  static _indexMap = {\n    \"BYSECOND\": 0,\n    \"BYMINUTE\": 1,\n    \"BYHOUR\": 2,\n    \"BYDAY\": 3,\n    \"BYMONTHDAY\": 4,\n    \"BYYEARDAY\": 5,\n    \"BYWEEKNO\": 6,\n    \"BYMONTH\": 7,\n    \"BYSETPOS\": 8\n  };\n\n  static _expandMap = {\n    \"SECONDLY\": [1, 1, 1, 1, 1, 1, 1, 1],\n    \"MINUTELY\": [2, 1, 1, 1, 1, 1, 1, 1],\n    \"HOURLY\": [2, 2, 1, 1, 1, 1, 1, 1],\n    \"DAILY\": [2, 2, 2, 1, 1, 1, 1, 1],\n    \"WEEKLY\": [2, 2, 2, 2, 3, 3, 1, 1],\n    \"MONTHLY\": [2, 2, 2, 2, 2, 3, 3, 1],\n    \"YEARLY\": [2, 2, 2, 2, 2, 2, 2, 2]\n  };\n\n  static UNKNOWN = 0;\n  static CONTRACT = 1;\n  static EXPAND = 2;\n  static ILLEGAL = 3;\n\n  /**\n   * Creates a new ICAL.RecurIterator instance. The options object may contain additional members\n   * when resuming iteration from a previous run.\n   *\n   * @param {Object} options                The iterator options\n   * @param {Recur} options.rule            The rule to iterate.\n   * @param {Time} options.dtstart          The start date of the event.\n   * @param {Boolean=} options.initialized  When true, assume that options are\n   *        from a previously constructed iterator. Initialization will not be\n   *        repeated.\n   */\n  constructor(options) {\n    this.fromData(options);\n  }\n\n  /**\n   * True when iteration is finished.\n   * @type {Boolean}\n   */\n  completed = false;\n\n  /**\n   * The rule that is being iterated\n   * @type {Recur}\n   */\n  rule = null;\n\n  /**\n   * The start date of the event being iterated.\n   * @type {Time}\n   */\n  dtstart = null;\n\n  /**\n   * The last occurrence that was returned from the\n   * {@link RecurIterator#next} method.\n   * @type {Time}\n   */\n  last = null;\n\n  /**\n   * The sequence number from the occurrence\n   * @type {Number}\n   */\n  occurrence_number = 0;\n\n  /**\n   * The indices used for the {@link ICAL.RecurIterator#by_data} object.\n   * @type {Object}\n   * @private\n   */\n  by_indices = null;\n\n  /**\n   * If true, the iterator has already been initialized\n   * @type {Boolean}\n   * @private\n   */\n  initialized = false;\n\n  /**\n   * The initializd by-data.\n   * @type {Object}\n   * @private\n   */\n  by_data = null;\n\n  /**\n   * The expanded yeardays\n   * @type {Array}\n   * @private\n   */\n  days = null;\n\n  /**\n   * The index in the {@link ICAL.RecurIterator#days} array.\n   * @type {Number}\n   * @private\n   */\n  days_index = 0;\n\n  /**\n   * Initialize the recurrence iterator from the passed data object. This\n   * method is usually not called directly, you can initialize the iterator\n   * through the constructor.\n   *\n   * @param {Object} options                The iterator options\n   * @param {Recur} options.rule            The rule to iterate.\n   * @param {Time} options.dtstart          The start date of the event.\n   * @param {Boolean=} options.initialized  When true, assume that options are\n   *        from a previously constructed iterator. Initialization will not be\n   *        repeated.\n   */\n  fromData(options) {\n    this.rule = formatClassType(options.rule, Recur);\n\n    if (!this.rule) {\n      throw new Error('iterator requires a (ICAL.Recur) rule');\n    }\n\n    this.dtstart = formatClassType(options.dtstart, Time);\n\n    if (!this.dtstart) {\n      throw new Error('iterator requires a (ICAL.Time) dtstart');\n    }\n\n    if (options.by_data) {\n      this.by_data = options.by_data;\n    } else {\n      this.by_data = clone(this.rule.parts, true);\n    }\n\n    if (options.occurrence_number)\n      this.occurrence_number = options.occurrence_number;\n\n    this.days = options.days || [];\n    if (options.last) {\n      this.last = formatClassType(options.last, Time);\n    }\n\n    this.by_indices = options.by_indices;\n\n    if (!this.by_indices) {\n      this.by_indices = {\n        \"BYSECOND\": 0,\n        \"BYMINUTE\": 0,\n        \"BYHOUR\": 0,\n        \"BYDAY\": 0,\n        \"BYMONTH\": 0,\n        \"BYWEEKNO\": 0,\n        \"BYMONTHDAY\": 0\n      };\n    }\n\n    this.initialized = options.initialized || false;\n\n    if (!this.initialized) {\n      try {\n        this.init();\n      } catch (e) {\n        if (e instanceof InvalidRecurrenceRuleError) {\n          // Init may error if there are no possible recurrence instances from\n          // the rule, but we don't want to bubble this error up. Instead, we\n          // create an empty iterator.\n          this.completed = true;\n        } else {\n          // Propagate other errors to consumers.\n          throw e;\n        }\n      }\n    }\n  }\n\n  /**\n   * Initialize the iterator\n   * @private\n   */\n  init() {\n    this.initialized = true;\n    this.last = this.dtstart.clone();\n    let parts = this.by_data;\n\n    if (\"BYDAY\" in parts) {\n      // libical does this earlier when the rule is loaded, but we postpone to\n      // now so we can preserve the original order.\n      this.sort_byday_rules(parts.BYDAY);\n    }\n\n    // If the BYYEARDAY appares, no other date rule part may appear\n    if (\"BYYEARDAY\" in parts) {\n      if (\"BYMONTH\" in parts || \"BYWEEKNO\" in parts ||\n          \"BYMONTHDAY\" in parts || \"BYDAY\" in parts) {\n        throw new Error(\"Invalid BYYEARDAY rule\");\n      }\n    }\n\n    // BYWEEKNO and BYMONTHDAY rule parts may not both appear\n    if (\"BYWEEKNO\" in parts && \"BYMONTHDAY\" in parts) {\n      throw new Error(\"BYWEEKNO does not fit to BYMONTHDAY\");\n    }\n\n    // For MONTHLY recurrences (FREQ=MONTHLY) neither BYYEARDAY nor\n    // BYWEEKNO may appear.\n    if (this.rule.freq == \"MONTHLY\" &&\n        (\"BYYEARDAY\" in parts || \"BYWEEKNO\" in parts)) {\n      throw new Error(\"For MONTHLY recurrences neither BYYEARDAY nor BYWEEKNO may appear\");\n    }\n\n    // For WEEKLY recurrences (FREQ=WEEKLY) neither BYMONTHDAY nor\n    // BYYEARDAY may appear.\n    if (this.rule.freq == \"WEEKLY\" &&\n        (\"BYYEARDAY\" in parts || \"BYMONTHDAY\" in parts)) {\n      throw new Error(\"For WEEKLY recurrences neither BYMONTHDAY nor BYYEARDAY may appear\");\n    }\n\n    // BYYEARDAY may only appear in YEARLY rules\n    if (this.rule.freq != \"YEARLY\" && \"BYYEARDAY\" in parts) {\n      throw new Error(\"BYYEARDAY may only appear in YEARLY rules\");\n    }\n\n    this.last.second = this.setup_defaults(\"BYSECOND\", \"SECONDLY\", this.dtstart.second);\n    this.last.minute = this.setup_defaults(\"BYMINUTE\", \"MINUTELY\", this.dtstart.minute);\n    this.last.hour = this.setup_defaults(\"BYHOUR\", \"HOURLY\", this.dtstart.hour);\n    this.last.day = this.setup_defaults(\"BYMONTHDAY\", \"DAILY\", this.dtstart.day);\n    this.last.month = this.setup_defaults(\"BYMONTH\", \"MONTHLY\", this.dtstart.month);\n\n    if (this.rule.freq == \"WEEKLY\") {\n      if (\"BYDAY\" in parts) {\n        let [, dow] = this.ruleDayOfWeek(parts.BYDAY[0], this.rule.wkst);\n        let wkdy = dow - this.last.dayOfWeek(this.rule.wkst);\n        if ((this.last.dayOfWeek(this.rule.wkst) < dow && wkdy >= 0) || wkdy < 0) {\n          // Initial time is after first day of BYDAY data\n          this.last.day += wkdy;\n        }\n      } else {\n        let dayName = Recur.numericDayToIcalDay(this.dtstart.dayOfWeek());\n        parts.BYDAY = [dayName];\n      }\n    }\n\n    if (this.rule.freq == \"YEARLY\") {\n      // Some yearly recurrence rules may be specific enough to not actually\n      // occur on a yearly basis, e.g. the 29th day of February or the fifth\n      // Monday of a given month. The standard isn't clear on the intended\n      // behavior in these cases, but `libical` at least will iterate until it\n      // finds a matching year.\n      // CAREFUL: Some rules may specify an occurrence that can never happen,\n      // e.g. the first Monday of April so long as it falls on the 15th\n      // through the 21st. Detecting these is non-trivial, so ensure that we\n      // stop iterating at some point.\n      const untilYear = this.rule.until ? this.rule.until.year : 20000;\n      while (this.last.year <= untilYear) {\n        this.expand_year_days(this.last.year);\n        if (this.days.length > 0) {\n          break;\n        }\n        this.increment_year(this.rule.interval);\n      }\n\n      if (this.days.length == 0) {\n        throw new InvalidRecurrenceRuleError();\n      }\n\n      this._nextByYearDay();\n    }\n\n    if (this.rule.freq == \"MONTHLY\") {\n      if (this.has_by_data(\"BYDAY\")) {\n        let tempLast = null;\n        let initLast = this.last.clone();\n        let daysInMonth = Time.daysInMonth(this.last.month, this.last.year);\n\n        // Check every weekday in BYDAY with relative dow and pos.\n        for (let bydow of this.by_data.BYDAY) {\n          this.last = initLast.clone();\n          let [pos, dow] = this.ruleDayOfWeek(bydow);\n          let dayOfMonth = this.last.nthWeekDay(dow, pos);\n\n          // If |pos| >= 6, the byday is invalid for a monthly rule.\n          if (pos >= 6 || pos <= -6) {\n            throw new Error(\"Malformed values in BYDAY part\");\n          }\n\n          // If a Byday with pos=+/-5 is not in the current month it\n          // must be searched in the next months.\n          if (dayOfMonth > daysInMonth || dayOfMonth <= 0) {\n            // Skip if we have already found a \"last\" in this month.\n            if (tempLast && tempLast.month == initLast.month) {\n              continue;\n            }\n            while (dayOfMonth > daysInMonth || dayOfMonth <= 0) {\n              this.increment_month();\n              daysInMonth = Time.daysInMonth(this.last.month, this.last.year);\n              dayOfMonth = this.last.nthWeekDay(dow, pos);\n            }\n          }\n\n          this.last.day = dayOfMonth;\n          if (!tempLast || this.last.compare(tempLast) < 0) {\n            tempLast = this.last.clone();\n          }\n        }\n        this.last = tempLast.clone();\n\n        //XXX: This feels like a hack, but we need to initialize\n        //     the BYMONTHDAY case correctly and byDayAndMonthDay handles\n        //     this case. It accepts a special flag which will avoid incrementing\n        //     the initial value without the flag days that match the start time\n        //     would be missed.\n        if (this.has_by_data('BYMONTHDAY')) {\n          this._byDayAndMonthDay(true);\n        }\n\n        if (this.last.day > daysInMonth || this.last.day == 0) {\n          throw new Error(\"Malformed values in BYDAY part\");\n        }\n      } else if (this.has_by_data(\"BYMONTHDAY\")) {\n        // Change the day value so that normalisation won't change the month.\n        this.last.day = 1;\n\n        // Get a sorted list of days in the starting month that match the rule.\n        let normalized = this.normalizeByMonthDayRules(\n          this.last.year,\n          this.last.month,\n          this.rule.parts.BYMONTHDAY\n        ).filter(d => d >= this.last.day);\n\n        if (normalized.length) {\n          // There's at least one valid day, use it.\n          this.last.day = normalized[0];\n          this.by_data.BYMONTHDAY = normalized;\n        } else {\n          // There's no occurrence in this month, find the next valid month.\n          // The longest possible sequence of skipped months is February-April-June,\n          // so we might need to call next_month up to three times.\n          if (!this.next_month() && !this.next_month() && !this.next_month()) {\n            throw new Error(\"No possible occurrences\");\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Retrieve the next occurrence from the iterator.\n   * @return {Time}\n   */\n  next(again = false) {\n    let before = (this.last ? this.last.clone() : null);\n\n    if ((this.rule.count && this.occurrence_number >= this.rule.count) ||\n        (this.rule.until && this.last.compare(this.rule.until) > 0)) {\n      this.completed = true;\n    }\n\n    if (this.completed) {\n      return null;\n    }\n\n    if (this.occurrence_number == 0 && this.last.compare(this.dtstart) >= 0) {\n      // First of all, give the instance that was initialized\n      this.occurrence_number++;\n      return this.last;\n    }\n\n    let valid;\n    do {\n      valid = 1;\n\n      switch (this.rule.freq) {\n      case \"SECONDLY\":\n        this.next_second();\n        break;\n      case \"MINUTELY\":\n        this.next_minute();\n        break;\n      case \"HOURLY\":\n        this.next_hour();\n        break;\n      case \"DAILY\":\n        this.next_day();\n        break;\n      case \"WEEKLY\":\n        this.next_week();\n        break;\n      case \"MONTHLY\":\n        valid = this.next_month();\n        break;\n      case \"YEARLY\":\n        this.next_year();\n        break;\n\n      default:\n        return null;\n      }\n    } while (!this.check_contracting_rules() ||\n             this.last.compare(this.dtstart) < 0 ||\n             !valid);\n\n    if (this.last.compare(before) == 0) {\n      if (again) {\n        throw new Error(\"Same occurrence found twice, protecting you from death by recursion\");\n      }\n      this.next(true);\n    }\n\n    if (this.rule.until && this.last.compare(this.rule.until) > 0) {\n      this.completed = true;\n      return null;\n    } else {\n      this.occurrence_number++;\n      return this.last;\n    }\n  }\n\n  next_second() {\n    return this.next_generic(\"BYSECOND\", \"SECONDLY\", \"second\", \"minute\");\n  }\n\n  increment_second(inc) {\n    return this.increment_generic(inc, \"second\", 60, \"minute\");\n  }\n\n  next_minute() {\n    return this.next_generic(\"BYMINUTE\", \"MINUTELY\",\n                             \"minute\", \"hour\", \"next_second\");\n  }\n\n  increment_minute(inc) {\n    return this.increment_generic(inc, \"minute\", 60, \"hour\");\n  }\n\n  next_hour() {\n    return this.next_generic(\"BYHOUR\", \"HOURLY\", \"hour\",\n                             \"monthday\", \"next_minute\");\n  }\n\n  increment_hour(inc) {\n    this.increment_generic(inc, \"hour\", 24, \"monthday\");\n  }\n\n  next_day() {\n    let this_freq = (this.rule.freq == \"DAILY\");\n\n    if (this.next_hour() == 0) {\n      return 0;\n    }\n\n    if (this_freq) {\n      this.increment_monthday(this.rule.interval);\n    } else {\n      this.increment_monthday(1);\n    }\n\n    return 0;\n  }\n\n  next_week() {\n    let end_of_data = 0;\n\n    if (this.next_weekday_by_week() == 0) {\n      return end_of_data;\n    }\n\n    if (this.has_by_data(\"BYWEEKNO\")) {\n      this.by_indices.BYWEEKNO++;\n\n      if (this.by_indices.BYWEEKNO == this.by_data.BYWEEKNO.length) {\n        this.by_indices.BYWEEKNO = 0;\n        end_of_data = 1;\n      }\n\n      // HACK should be first month of the year\n      this.last.month = 1;\n      this.last.day = 1;\n\n      let week_no = this.by_data.BYWEEKNO[this.by_indices.BYWEEKNO];\n\n      this.last.day += 7 * week_no;\n\n      if (end_of_data) {\n        this.increment_year(1);\n      }\n    } else {\n      // Jump to the next week\n      this.increment_monthday(7 * this.rule.interval);\n    }\n\n    return end_of_data;\n  }\n\n  /**\n   * Normalize each by day rule for a given year/month.\n   * Takes into account ordering and negative rules\n   *\n   * @private\n   * @param {Number} year         Current year.\n   * @param {Number} month        Current month.\n   * @param {Array}  rules        Array of rules.\n   *\n   * @return {Array} sorted and normalized rules.\n   *                 Negative rules will be expanded to their\n   *                 correct positive values for easier processing.\n   */\n  normalizeByMonthDayRules(year, month, rules) {\n    let daysInMonth = Time.daysInMonth(month, year);\n\n    // XXX: This is probably bad for performance to allocate\n    //      a new array for each month we scan, if possible\n    //      we should try to optimize this...\n    let newRules = [];\n\n    let ruleIdx = 0;\n    let len = rules.length;\n    let rule;\n\n    for (; ruleIdx < len; ruleIdx++) {\n      rule = parseInt(rules[ruleIdx], 10);\n      if (isNaN(rule)) {\n        throw new Error('Invalid BYMONTHDAY value');\n      }\n\n      // if this rule falls outside of given\n      // month discard it.\n      if (Math.abs(rule) > daysInMonth) {\n        continue;\n      }\n\n      // negative case\n      if (rule < 0) {\n        // we add (not subtract it is a negative number)\n        // one from the rule because 1 === last day of month\n        rule = daysInMonth + (rule + 1);\n      } else if (rule === 0) {\n        // skip zero: it is invalid.\n        continue;\n      }\n\n      // only add unique items...\n      if (newRules.indexOf(rule) === -1) {\n        newRules.push(rule);\n      }\n\n    }\n\n    // unique and sort\n    return newRules.sort(function(a, b) { return a - b; });\n  }\n\n  /**\n   * NOTES:\n   * We are given a list of dates in the month (BYMONTHDAY) (23, etc..)\n   * Also we are given a list of days (BYDAY) (MO, 2SU, etc..) when\n   * both conditions match a given date (this.last.day) iteration stops.\n   *\n   * @private\n   * @param {Boolean=} isInit     When given true will not increment the\n   *                                current day (this.last).\n   */\n  _byDayAndMonthDay(isInit) {\n    let byMonthDay; // setup in initMonth\n    let byDay = this.by_data.BYDAY;\n\n    let date;\n    let dateIdx = 0;\n    let dateLen; // setup in initMonth\n    let dayLen = byDay.length;\n\n    // we are not valid by default\n    let dataIsValid = 0;\n\n    let daysInMonth;\n    let self = this;\n    // we need a copy of this, because a DateTime gets normalized\n    // automatically if the day is out of range. At some points we\n    // set the last day to 0 to start counting.\n    let lastDay = this.last.day;\n\n    function initMonth() {\n      daysInMonth = Time.daysInMonth(\n        self.last.month, self.last.year\n      );\n\n      byMonthDay = self.normalizeByMonthDayRules(\n        self.last.year,\n        self.last.month,\n        self.by_data.BYMONTHDAY\n      );\n\n      dateLen = byMonthDay.length;\n\n      // For the case of more than one occurrence in one month\n      // we have to be sure to start searching after the last\n      // found date or at the last BYMONTHDAY, unless we are\n      // initializing the iterator because in this case we have\n      // to consider the last found date too.\n      while (byMonthDay[dateIdx] <= lastDay &&\n             !(isInit && byMonthDay[dateIdx] == lastDay) &&\n             dateIdx < dateLen - 1) {\n        dateIdx++;\n      }\n    }\n\n    function nextMonth() {\n      // since the day is incremented at the start\n      // of the loop below, we need to start at 0\n      lastDay = 0;\n      self.increment_month();\n      dateIdx = 0;\n      initMonth();\n    }\n\n    initMonth();\n\n    // should come after initMonth\n    if (isInit) {\n      lastDay -= 1;\n    }\n\n    // Use a counter to avoid an infinite loop with malformed rules.\n    // Stop checking after 4 years so we consider also a leap year.\n    let monthsCounter = 48;\n\n    while (!dataIsValid && monthsCounter) {\n      monthsCounter--;\n      // increment the current date. This is really\n      // important otherwise we may fall into the infinite\n      // loop trap. The initial date takes care of the case\n      // where the current date is the date we are looking\n      // for.\n      date = lastDay + 1;\n\n      if (date > daysInMonth) {\n        nextMonth();\n        continue;\n      }\n\n      // find next date\n      let next = byMonthDay[dateIdx++];\n\n      // this logic is dependent on the BYMONTHDAYS\n      // being in order (which is done by #normalizeByMonthDayRules)\n      if (next >= date) {\n        // if the next month day is in the future jump to it.\n        lastDay = next;\n      } else {\n        // in this case the 'next' monthday has past\n        // we must move to the month.\n        nextMonth();\n        continue;\n      }\n\n      // Now we can loop through the day rules to see\n      // if one matches the current month date.\n      for (let dayIdx = 0; dayIdx < dayLen; dayIdx++) {\n        let parts = this.ruleDayOfWeek(byDay[dayIdx]);\n        let pos = parts[0];\n        let dow = parts[1];\n\n        this.last.day = lastDay;\n        if (this.last.isNthWeekDay(dow, pos)) {\n          // when we find the valid one we can mark\n          // the conditions as met and break the loop.\n          // (Because we have this condition above\n          //  it will also break the parent loop).\n          dataIsValid = 1;\n          break;\n        }\n      }\n\n      // It is completely possible that the combination\n      // cannot be matched in the current month.\n      // When we reach the end of possible combinations\n      // in the current month we iterate to the next one.\n      // since dateIdx is incremented right after getting\n      // \"next\", we don't need dateLen -1 here.\n      if (!dataIsValid && dateIdx === dateLen) {\n        nextMonth();\n        continue;\n      }\n    }\n\n    if (monthsCounter <= 0) {\n      // Checked 4 years without finding a Byday that matches\n      // a Bymonthday. Maybe the rule is not correct.\n      throw new Error(\"Malformed values in BYDAY combined with BYMONTHDAY parts\");\n    }\n\n\n    return dataIsValid;\n  }\n\n  next_month() {\n    let data_valid = 1;\n\n    if (this.next_hour() == 0) {\n      return data_valid;\n    }\n\n    if (this.has_by_data(\"BYDAY\") && this.has_by_data(\"BYMONTHDAY\")) {\n      data_valid = this._byDayAndMonthDay();\n    } else if (this.has_by_data(\"BYDAY\")) {\n      let daysInMonth = Time.daysInMonth(this.last.month, this.last.year);\n      let setpos = 0;\n      let setpos_total = 0;\n\n      if (this.has_by_data(\"BYSETPOS\")) {\n        let last_day = this.last.day;\n        for (let day = 1; day <= daysInMonth; day++) {\n          this.last.day = day;\n          if (this.is_day_in_byday(this.last)) {\n            setpos_total++;\n            if (day <= last_day) {\n              setpos++;\n            }\n          }\n        }\n        this.last.day = last_day;\n      }\n\n      data_valid = 0;\n      let day;\n      for (day = this.last.day + 1; day <= daysInMonth; day++) {\n        this.last.day = day;\n\n        if (this.is_day_in_byday(this.last)) {\n          if (!this.has_by_data(\"BYSETPOS\") ||\n              this.check_set_position(++setpos) ||\n              this.check_set_position(setpos - setpos_total - 1)) {\n\n            data_valid = 1;\n            break;\n          }\n        }\n      }\n\n      if (day > daysInMonth) {\n        this.last.day = 1;\n        this.increment_month();\n\n        if (this.is_day_in_byday(this.last)) {\n          if (!this.has_by_data(\"BYSETPOS\") || this.check_set_position(1)) {\n            data_valid = 1;\n          }\n        } else {\n          data_valid = 0;\n        }\n      }\n    } else if (this.has_by_data(\"BYMONTHDAY\")) {\n      this.by_indices.BYMONTHDAY++;\n\n      if (this.by_indices.BYMONTHDAY >= this.by_data.BYMONTHDAY.length) {\n        this.by_indices.BYMONTHDAY = 0;\n        this.increment_month();\n        if (this.by_indices.BYMONTHDAY >= this.by_data.BYMONTHDAY.length) {\n          return 0;\n        }\n      }\n\n      let daysInMonth = Time.daysInMonth(this.last.month, this.last.year);\n      let day = this.by_data.BYMONTHDAY[this.by_indices.BYMONTHDAY];\n\n      if (day < 0) {\n        day = daysInMonth + day + 1;\n      }\n\n      if (day > daysInMonth) {\n        this.last.day = 1;\n        data_valid = this.is_day_in_byday(this.last);\n      } else {\n        this.last.day = day;\n      }\n    } else {\n      this.increment_month();\n      let daysInMonth = Time.daysInMonth(this.last.month, this.last.year);\n      if (this.by_data.BYMONTHDAY[0] > daysInMonth) {\n        data_valid = 0;\n      } else {\n        this.last.day = this.by_data.BYMONTHDAY[0];\n      }\n    }\n\n    return data_valid;\n  }\n\n  next_weekday_by_week() {\n    let end_of_data = 0;\n\n    if (this.next_hour() == 0) {\n      return end_of_data;\n    }\n\n    if (!this.has_by_data(\"BYDAY\")) {\n      return 1;\n    }\n\n    for (;;) {\n      let tt = new Time();\n      this.by_indices.BYDAY++;\n\n      if (this.by_indices.BYDAY == Object.keys(this.by_data.BYDAY).length) {\n        this.by_indices.BYDAY = 0;\n        end_of_data = 1;\n      }\n\n      let coded_day = this.by_data.BYDAY[this.by_indices.BYDAY];\n      let parts = this.ruleDayOfWeek(coded_day);\n      let dow = parts[1];\n\n      dow -= this.rule.wkst;\n\n      if (dow < 0) {\n        dow += 7;\n      }\n\n      tt.year = this.last.year;\n      tt.month = this.last.month;\n      tt.day = this.last.day;\n\n      let startOfWeek = tt.startDoyWeek(this.rule.wkst);\n\n      if (dow + startOfWeek < 1) {\n        // The selected date is in the previous year\n        if (!end_of_data) {\n          continue;\n        }\n      }\n\n      let next = Time.fromDayOfYear(startOfWeek + dow, this.last.year);\n\n      /**\n       * The normalization horrors below are due to\n       * the fact that when the year/month/day changes\n       * it can effect the other operations that come after.\n       */\n      this.last.year = next.year;\n      this.last.month = next.month;\n      this.last.day = next.day;\n\n      return end_of_data;\n    }\n  }\n\n  next_year() {\n    if (this.next_hour() == 0) {\n      return 0;\n    }\n\n    if (++this.days_index == this.days.length) {\n      this.days_index = 0;\n      do {\n        this.increment_year(this.rule.interval);\n        if (this.has_by_data(\"BYMONTHDAY\")) {\n          this.by_data.BYMONTHDAY = this.normalizeByMonthDayRules(\n            this.last.year,\n            this.last.month,\n            this.rule.parts.BYMONTHDAY\n          );\n        }\n        this.expand_year_days(this.last.year);\n      } while (this.days.length == 0);\n    }\n\n    this._nextByYearDay();\n\n    return 1;\n  }\n\n  _nextByYearDay() {\n    let doy = this.days[this.days_index];\n    let year = this.last.year;\n    if (doy < 1) {\n        // Time.fromDayOfYear(doy, year) indexes relative to the\n        // start of the given year. That is different from the\n        // semantics of BYYEARDAY where negative indexes are an\n        // offset from the end of the given year.\n        doy += 1;\n        year += 1;\n    }\n    let next = Time.fromDayOfYear(doy, year);\n    this.last.day = next.day;\n    this.last.month = next.month;\n  }\n\n  /**\n   * @param dow (eg: '1TU', '-1MO')\n   * @param {weekDay=} aWeekStart The week start weekday\n   * @return [pos, numericDow] (eg: [1, 3]) numericDow is relative to aWeekStart\n   */\n  ruleDayOfWeek(dow, aWeekStart) {\n    let matches = dow.match(/([+-]?[0-9])?(MO|TU|WE|TH|FR|SA|SU)/);\n    if (matches) {\n      let pos = parseInt(matches[1] || 0, 10);\n      dow = Recur.icalDayToNumericDay(matches[2], aWeekStart);\n      return [pos, dow];\n    } else {\n      return [0, 0];\n    }\n  }\n\n  next_generic(aRuleType, aInterval, aDateAttr, aFollowingAttr, aPreviousIncr) {\n    let has_by_rule = (aRuleType in this.by_data);\n    let this_freq = (this.rule.freq == aInterval);\n    let end_of_data = 0;\n\n    if (aPreviousIncr && this[aPreviousIncr]() == 0) {\n      return end_of_data;\n    }\n\n    if (has_by_rule) {\n      this.by_indices[aRuleType]++;\n      let dta = this.by_data[aRuleType];\n\n      if (this.by_indices[aRuleType] == dta.length) {\n        this.by_indices[aRuleType] = 0;\n        end_of_data = 1;\n      }\n      this.last[aDateAttr] = dta[this.by_indices[aRuleType]];\n    } else if (this_freq) {\n      this[\"increment_\" + aDateAttr](this.rule.interval);\n    }\n\n    if (has_by_rule && end_of_data && this_freq) {\n      this[\"increment_\" + aFollowingAttr](1);\n    }\n\n    return end_of_data;\n  }\n\n  increment_monthday(inc) {\n    for (let i = 0; i < inc; i++) {\n      let daysInMonth = Time.daysInMonth(this.last.month, this.last.year);\n      this.last.day++;\n\n      if (this.last.day > daysInMonth) {\n        this.last.day -= daysInMonth;\n        this.increment_month();\n      }\n    }\n  }\n\n  increment_month() {\n    this.last.day = 1;\n    if (this.has_by_data(\"BYMONTH\")) {\n      this.by_indices.BYMONTH++;\n\n      if (this.by_indices.BYMONTH == this.by_data.BYMONTH.length) {\n        this.by_indices.BYMONTH = 0;\n        this.increment_year(1);\n      }\n\n      this.last.month = this.by_data.BYMONTH[this.by_indices.BYMONTH];\n    } else {\n      if (this.rule.freq == \"MONTHLY\") {\n        this.last.month += this.rule.interval;\n      } else {\n        this.last.month++;\n      }\n\n      this.last.month--;\n      let years = trunc(this.last.month / 12);\n      this.last.month %= 12;\n      this.last.month++;\n\n      if (years != 0) {\n        this.increment_year(years);\n      }\n    }\n\n    if (this.has_by_data(\"BYMONTHDAY\")) {\n      this.by_data.BYMONTHDAY = this.normalizeByMonthDayRules(\n        this.last.year,\n        this.last.month,\n        this.rule.parts.BYMONTHDAY\n      );\n    }\n  }\n\n  increment_year(inc) {\n    // Don't jump into the next month if this.last is Feb 29.\n    this.last.day = 1;\n    this.last.year += inc;\n  }\n\n  increment_generic(inc, aDateAttr, aFactor, aNextIncrement) {\n    this.last[aDateAttr] += inc;\n    let nextunit = trunc(this.last[aDateAttr] / aFactor);\n    this.last[aDateAttr] %= aFactor;\n    if (nextunit != 0) {\n      this[\"increment_\" + aNextIncrement](nextunit);\n    }\n  }\n\n  has_by_data(aRuleType) {\n    return (aRuleType in this.rule.parts);\n  }\n\n  expand_year_days(aYear) {\n    let t = new Time();\n    this.days = [];\n\n    // We need our own copy with a few keys set\n    let parts = {};\n    let rules = [\"BYDAY\", \"BYWEEKNO\", \"BYMONTHDAY\", \"BYMONTH\", \"BYYEARDAY\"];\n    for (let part of rules) {\n      if (part in this.rule.parts) {\n        parts[part] = this.rule.parts[part];\n      }\n    }\n\n    if (\"BYMONTH\" in parts && \"BYWEEKNO\" in parts) {\n      let valid = 1;\n      let validWeeks = {};\n      t.year = aYear;\n      t.isDate = true;\n\n      for (let monthIdx = 0; monthIdx < this.by_data.BYMONTH.length; monthIdx++) {\n        let month = this.by_data.BYMONTH[monthIdx];\n        t.month = month;\n        t.day = 1;\n        let first_week = t.weekNumber(this.rule.wkst);\n        t.day = Time.daysInMonth(month, aYear);\n        let last_week = t.weekNumber(this.rule.wkst);\n        for (monthIdx = first_week; monthIdx < last_week; monthIdx++) {\n          validWeeks[monthIdx] = 1;\n        }\n      }\n\n      for (let weekIdx = 0; weekIdx < this.by_data.BYWEEKNO.length && valid; weekIdx++) {\n        let weekno = this.by_data.BYWEEKNO[weekIdx];\n        if (weekno < 52) {\n          valid &= validWeeks[weekIdx];\n        } else {\n          valid = 0;\n        }\n      }\n\n      if (valid) {\n        delete parts.BYMONTH;\n      } else {\n        delete parts.BYWEEKNO;\n      }\n    }\n\n    let partCount = Object.keys(parts).length;\n\n    if (partCount == 0) {\n      let t1 = this.dtstart.clone();\n      t1.year = this.last.year;\n      this.days.push(t1.dayOfYear());\n    } else if (partCount == 1 && \"BYMONTH\" in parts) {\n      for (let month of this.by_data.BYMONTH) {\n        let t2 = this.dtstart.clone();\n        t2.year = aYear;\n        t2.month = month;\n        t2.isDate = true;\n        this.days.push(t2.dayOfYear());\n      }\n    } else if (partCount == 1 && \"BYMONTHDAY\" in parts) {\n      for (let monthday of this.by_data.BYMONTHDAY) {\n        let t3 = this.dtstart.clone();\n        if (monthday < 0) {\n          let daysInMonth = Time.daysInMonth(t3.month, aYear);\n          monthday = monthday + daysInMonth + 1;\n        }\n        t3.day = monthday;\n        t3.year = aYear;\n        t3.isDate = true;\n        this.days.push(t3.dayOfYear());\n      }\n    } else if (partCount == 2 &&\n               \"BYMONTHDAY\" in parts &&\n               \"BYMONTH\" in parts) {\n      for (let month of this.by_data.BYMONTH) {\n        let daysInMonth = Time.daysInMonth(month, aYear);\n        for (let monthday of this.by_data.BYMONTHDAY) {\n          if (monthday < 0) {\n            monthday = monthday + daysInMonth + 1;\n          }\n          t.day = monthday;\n          t.month = month;\n          t.year = aYear;\n          t.isDate = true;\n\n          this.days.push(t.dayOfYear());\n        }\n      }\n    } else if (partCount == 1 && \"BYWEEKNO\" in parts) ; else if (partCount == 2 &&\n               \"BYWEEKNO\" in parts &&\n               \"BYMONTHDAY\" in parts) ; else if (partCount == 1 && \"BYDAY\" in parts) {\n      this.days = this.days.concat(this.expand_by_day(aYear));\n    } else if (partCount == 2 && \"BYDAY\" in parts && \"BYMONTH\" in parts) {\n      for (let month of this.by_data.BYMONTH) {\n        let daysInMonth = Time.daysInMonth(month, aYear);\n\n        t.year = aYear;\n        t.month = month;\n        t.day = 1;\n        t.isDate = true;\n\n        let first_dow = t.dayOfWeek();\n        let doy_offset = t.dayOfYear() - 1;\n\n        t.day = daysInMonth;\n        let last_dow = t.dayOfWeek();\n\n        if (this.has_by_data(\"BYSETPOS\")) {\n          let by_month_day = [];\n          for (let day = 1; day <= daysInMonth; day++) {\n            t.day = day;\n            if (this.is_day_in_byday(t)) {\n              by_month_day.push(day);\n            }\n          }\n\n          for (let spIndex = 0; spIndex < by_month_day.length; spIndex++) {\n            if (this.check_set_position(spIndex + 1) ||\n                this.check_set_position(spIndex - by_month_day.length)) {\n              this.days.push(doy_offset + by_month_day[spIndex]);\n            }\n          }\n        } else {\n          for (let coded_day of this.by_data.BYDAY) {\n            let bydayParts = this.ruleDayOfWeek(coded_day);\n            let pos = bydayParts[0];\n            let dow = bydayParts[1];\n            let month_day;\n\n            let first_matching_day = ((dow + 7 - first_dow) % 7) + 1;\n            let last_matching_day = daysInMonth - ((last_dow + 7 - dow) % 7);\n\n            if (pos == 0) {\n              for (let day = first_matching_day; day <= daysInMonth; day += 7) {\n                this.days.push(doy_offset + day);\n              }\n            } else if (pos > 0) {\n              month_day = first_matching_day + (pos - 1) * 7;\n\n              if (month_day <= daysInMonth) {\n                this.days.push(doy_offset + month_day);\n              }\n            } else {\n              month_day = last_matching_day + (pos + 1) * 7;\n\n              if (month_day > 0) {\n                this.days.push(doy_offset + month_day);\n              }\n            }\n          }\n        }\n      }\n      // Return dates in order of occurrence (1,2,3,...) instead\n      // of by groups of weekdays (1,8,15,...,2,9,16,...).\n      this.days.sort(function(a, b) { return a - b; }); // Comparator function allows to sort numbers.\n    } else if (partCount == 2 && \"BYDAY\" in parts && \"BYMONTHDAY\" in parts) {\n      let expandedDays = this.expand_by_day(aYear);\n\n      for (let day of expandedDays) {\n        let tt = Time.fromDayOfYear(day, aYear);\n        if (this.by_data.BYMONTHDAY.indexOf(tt.day) >= 0) {\n          this.days.push(day);\n        }\n      }\n    } else if (partCount == 3 &&\n               \"BYDAY\" in parts &&\n               \"BYMONTHDAY\" in parts &&\n               \"BYMONTH\" in parts) {\n      let expandedDays = this.expand_by_day(aYear);\n\n      for (let day of expandedDays) {\n        let tt = Time.fromDayOfYear(day, aYear);\n\n        if (this.by_data.BYMONTH.indexOf(tt.month) >= 0 &&\n            this.by_data.BYMONTHDAY.indexOf(tt.day) >= 0) {\n          this.days.push(day);\n        }\n      }\n    } else if (partCount == 2 && \"BYDAY\" in parts && \"BYWEEKNO\" in parts) {\n      let expandedDays = this.expand_by_day(aYear);\n\n      for (let day of expandedDays) {\n        let tt = Time.fromDayOfYear(day, aYear);\n        let weekno = tt.weekNumber(this.rule.wkst);\n\n        if (this.by_data.BYWEEKNO.indexOf(weekno)) {\n          this.days.push(day);\n        }\n      }\n    } else if (partCount == 3 &&\n               \"BYDAY\" in parts &&\n               \"BYWEEKNO\" in parts &&\n               \"BYMONTHDAY\" in parts) ; else if (partCount == 1 && \"BYYEARDAY\" in parts) {\n      this.days = this.days.concat(this.by_data.BYYEARDAY);\n    } else {\n      this.days = [];\n    }\n\n    let daysInYear = Time.isLeapYear(aYear) ? 366 : 365;\n    this.days.sort((a, b) => {\n      if (a < 0) a += daysInYear + 1;\n      if (b < 0) b += daysInYear + 1;\n      return a - b;\n    });\n\n    return 0;\n  }\n\n  expand_by_day(aYear) {\n\n    let days_list = [];\n    let tmp = this.last.clone();\n\n    tmp.year = aYear;\n    tmp.month = 1;\n    tmp.day = 1;\n    tmp.isDate = true;\n\n    let start_dow = tmp.dayOfWeek();\n\n    tmp.month = 12;\n    tmp.day = 31;\n    tmp.isDate = true;\n\n    let end_dow = tmp.dayOfWeek();\n    let end_year_day = tmp.dayOfYear();\n\n    for (let day of this.by_data.BYDAY) {\n      let parts = this.ruleDayOfWeek(day);\n      let pos = parts[0];\n      let dow = parts[1];\n\n      if (pos == 0) {\n        let tmp_start_doy = ((dow + 7 - start_dow) % 7) + 1;\n\n        for (let doy = tmp_start_doy; doy <= end_year_day; doy += 7) {\n          days_list.push(doy);\n        }\n\n      } else if (pos > 0) {\n        let first;\n        if (dow >= start_dow) {\n          first = dow - start_dow + 1;\n        } else {\n          first = dow - start_dow + 8;\n        }\n\n        days_list.push(first + (pos - 1) * 7);\n      } else {\n        let last;\n        pos = -pos;\n\n        if (dow <= end_dow) {\n          last = end_year_day - end_dow + dow;\n        } else {\n          last = end_year_day - end_dow + dow - 7;\n        }\n\n        days_list.push(last - (pos - 1) * 7);\n      }\n    }\n    return days_list;\n  }\n\n  is_day_in_byday(tt) {\n    if (this.by_data.BYDAY) {\n      for (let day of this.by_data.BYDAY) {\n        let parts = this.ruleDayOfWeek(day);\n        let pos = parts[0];\n        let dow = parts[1];\n        let this_dow = tt.dayOfWeek();\n\n        if ((pos == 0 && dow == this_dow) ||\n            (tt.nthWeekDay(dow, pos) == tt.day)) {\n          return 1;\n        }\n      }\n    }\n\n    return 0;\n  }\n\n  /**\n   * Checks if given value is in BYSETPOS.\n   *\n   * @private\n   * @param {Numeric} aPos position to check for.\n   * @return {Boolean} false unless BYSETPOS rules exist\n   *                   and the given value is present in rules.\n   */\n  check_set_position(aPos) {\n    if (this.has_by_data('BYSETPOS')) {\n      let idx = this.by_data.BYSETPOS.indexOf(aPos);\n      // negative numbers are not false-y\n      return idx !== -1;\n    }\n    return false;\n  }\n\n  sort_byday_rules(aRules) {\n    for (let i = 0; i < aRules.length; i++) {\n      for (let j = 0; j < i; j++) {\n        let one = this.ruleDayOfWeek(aRules[j], this.rule.wkst)[1];\n        let two = this.ruleDayOfWeek(aRules[i], this.rule.wkst)[1];\n\n        if (one > two) {\n          let tmp = aRules[i];\n          aRules[i] = aRules[j];\n          aRules[j] = tmp;\n        }\n      }\n    }\n  }\n\n  check_contract_restriction(aRuleType, v) {\n    let indexMapValue = RecurIterator._indexMap[aRuleType];\n    let ruleMapValue = RecurIterator._expandMap[this.rule.freq][indexMapValue];\n    let pass = false;\n\n    if (aRuleType in this.by_data &&\n        ruleMapValue == RecurIterator.CONTRACT) {\n\n      let ruleType = this.by_data[aRuleType];\n\n      for (let bydata of ruleType) {\n        if (bydata == v) {\n          pass = true;\n          break;\n        }\n      }\n    } else {\n      // Not a contracting byrule or has no data, test passes\n      pass = true;\n    }\n    return pass;\n  }\n\n  check_contracting_rules() {\n    let dow = this.last.dayOfWeek();\n    let weekNo = this.last.weekNumber(this.rule.wkst);\n    let doy = this.last.dayOfYear();\n\n    return (this.check_contract_restriction(\"BYSECOND\", this.last.second) &&\n            this.check_contract_restriction(\"BYMINUTE\", this.last.minute) &&\n            this.check_contract_restriction(\"BYHOUR\", this.last.hour) &&\n            this.check_contract_restriction(\"BYDAY\", Recur.numericDayToIcalDay(dow)) &&\n            this.check_contract_restriction(\"BYWEEKNO\", weekNo) &&\n            this.check_contract_restriction(\"BYMONTHDAY\", this.last.day) &&\n            this.check_contract_restriction(\"BYMONTH\", this.last.month) &&\n            this.check_contract_restriction(\"BYYEARDAY\", doy));\n  }\n\n  setup_defaults(aRuleType, req, deftime) {\n    let indexMapValue = RecurIterator._indexMap[aRuleType];\n    let ruleMapValue = RecurIterator._expandMap[this.rule.freq][indexMapValue];\n\n    if (ruleMapValue != RecurIterator.CONTRACT) {\n      if (!(aRuleType in this.by_data)) {\n        this.by_data[aRuleType] = [deftime];\n      }\n      if (this.rule.freq != req) {\n        return this.by_data[aRuleType][0];\n      }\n    }\n    return deftime;\n  }\n\n  /**\n   * Convert iterator into a serialize-able object.  Will preserve current\n   * iteration sequence to ensure the seamless continuation of the recurrence\n   * rule.\n   * @return {Object}\n   */\n  toJSON() {\n    let result = Object.create(null);\n\n    result.initialized = this.initialized;\n    result.rule = this.rule.toJSON();\n    result.dtstart = this.dtstart.toJSON();\n    result.by_data = this.by_data;\n    result.days = this.days;\n    result.last = this.last.toJSON();\n    result.by_indices = this.by_indices;\n    result.occurrence_number = this.occurrence_number;\n\n    return result;\n  }\n}\n\n/**\n * An error indicating that a recurrence rule is invalid and produces no\n * occurrences.\n *\n * @extends {Error}\n * @class\n */\nclass InvalidRecurrenceRuleError extends Error {\n  constructor() {\n    super(\"Recurrence rule has no valid occurrences\");\n  }\n}\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n/**\n * This lets typescript resolve our custom types in the\n * generated d.ts files (jsdoc typedefs are converted to typescript types).\n * Ignore prevents the typedefs from being documented more than once.\n *\n * @ignore\n * @typedef {import(\"./types.js\").weekDay} weekDay\n * Imports the 'weekDay' type from the \"types.js\" module\n * @typedef {import(\"./types.js\").frequencyValues} frequencyValues\n * Imports the 'frequencyValues' type from the \"types.js\" module\n */\n\nconst VALID_DAY_NAMES = /^(SU|MO|TU|WE|TH|FR|SA)$/;\nconst VALID_BYDAY_PART = /^([+-])?(5[0-3]|[1-4][0-9]|[1-9])?(SU|MO|TU|WE|TH|FR|SA)$/;\nconst DOW_MAP = {\n  SU: Time.SUNDAY,\n  MO: Time.MONDAY,\n  TU: Time.TUESDAY,\n  WE: Time.WEDNESDAY,\n  TH: Time.THURSDAY,\n  FR: Time.FRIDAY,\n  SA: Time.SATURDAY\n};\n\nconst REVERSE_DOW_MAP = Object.fromEntries(Object.entries(DOW_MAP).map(entry => entry.reverse()));\n\nconst ALLOWED_FREQ = ['SECONDLY', 'MINUTELY', 'HOURLY',\n                      'DAILY', 'WEEKLY', 'MONTHLY', 'YEARLY'];\n\n/**\n * This class represents the \"recur\" value type, used for example by RRULE. It provides methods to\n * calculate occurrences among others.\n *\n * @memberof ICAL\n */\nclass Recur {\n  /**\n   * Creates a new {@link ICAL.Recur} instance from the passed string.\n   *\n   * @param {String} string         The string to parse\n   * @return {Recur}                The created recurrence instance\n   */\n  static fromString(string) {\n    let data = this._stringToData(string, false);\n    return new Recur(data);\n  }\n\n  /**\n   * Creates a new {@link ICAL.Recur} instance using members from the passed\n   * data object.\n   *\n   * @param {Object} aData                              An object with members of the recurrence\n   * @param {frequencyValues=} aData.freq               The frequency value\n   * @param {Number=} aData.interval                    The INTERVAL value\n   * @param {weekDay=} aData.wkst                       The week start value\n   * @param {Time=} aData.until                         The end of the recurrence set\n   * @param {Number=} aData.count                       The number of occurrences\n   * @param {Array.<Number>=} aData.bysecond            The seconds for the BYSECOND part\n   * @param {Array.<Number>=} aData.byminute            The minutes for the BYMINUTE part\n   * @param {Array.<Number>=} aData.byhour              The hours for the BYHOUR part\n   * @param {Array.<String>=} aData.byday               The BYDAY values\n   * @param {Array.<Number>=} aData.bymonthday          The days for the BYMONTHDAY part\n   * @param {Array.<Number>=} aData.byyearday           The days for the BYYEARDAY part\n   * @param {Array.<Number>=} aData.byweekno            The weeks for the BYWEEKNO part\n   * @param {Array.<Number>=} aData.bymonth             The month for the BYMONTH part\n   * @param {Array.<Number>=} aData.bysetpos            The positionals for the BYSETPOS part\n   */\n  static fromData(aData) {\n    return new Recur(aData);\n  }\n\n  /**\n   * Converts a recurrence string to a data object, suitable for the fromData\n   * method.\n   *\n   * @private\n   * @param {String} string     The string to parse\n   * @param {Boolean} fmtIcal   If true, the string is considered to be an\n   *                              iCalendar string\n   * @return {Recur}            The recurrence instance\n   */\n  static _stringToData(string, fmtIcal) {\n    let dict = Object.create(null);\n\n    // split is slower in FF but fast enough.\n    // v8 however this is faster then manual split?\n    let values = string.split(';');\n    let len = values.length;\n\n    for (let i = 0; i < len; i++) {\n      let parts = values[i].split('=');\n      let ucname = parts[0].toUpperCase();\n      let lcname = parts[0].toLowerCase();\n      let name = (fmtIcal ? lcname : ucname);\n      let value = parts[1];\n\n      if (ucname in partDesign) {\n        let partArr = value.split(',');\n        let partSet = new Set();\n\n        for (let part of partArr) {\n          partSet.add(partDesign[ucname](part));\n        }\n        partArr = [...partSet];\n\n        dict[name] = (partArr.length == 1 ? partArr[0] : partArr);\n      } else if (ucname in optionDesign) {\n        optionDesign[ucname](value, dict, fmtIcal);\n      } else {\n        // Don't swallow unknown values. Just set them as they are.\n        dict[lcname] = value;\n      }\n    }\n\n    return dict;\n  }\n\n  /**\n   * Convert an ical representation of a day (SU, MO, etc..)\n   * into a numeric value of that day.\n   *\n   * @param {String} string     The iCalendar day name\n   * @param {weekDay=} aWeekStart\n   *        The week start weekday, defaults to SUNDAY\n   * @return {Number}           Numeric value of given day\n   */\n  static icalDayToNumericDay(string, aWeekStart) {\n    //XXX: this is here so we can deal\n    //     with possibly invalid string values.\n    let firstDow = aWeekStart || Time.SUNDAY;\n    return ((DOW_MAP[string] - firstDow + 7) % 7) + 1;\n  }\n\n  /**\n   * Convert a numeric day value into its ical representation (SU, MO, etc..)\n   *\n   * @param {Number} num        Numeric value of given day\n   * @param {weekDay=} aWeekStart\n   *        The week start weekday, defaults to SUNDAY\n   * @return {String}           The ICAL day value, e.g SU,MO,...\n   */\n  static numericDayToIcalDay(num, aWeekStart) {\n    //XXX: this is here so we can deal with possibly invalid number values.\n    //     Also, this allows consistent mapping between day numbers and day\n    //     names for external users.\n    let firstDow = aWeekStart || Time.SUNDAY;\n    let dow = (num + firstDow - Time.SUNDAY);\n    if (dow > 7) {\n      dow -= 7;\n    }\n    return REVERSE_DOW_MAP[dow];\n  }\n\n  /**\n   * Create a new instance of the Recur class.\n   *\n   * @param {Object} data                               An object with members of the recurrence\n   * @param {frequencyValues=} data.freq                The frequency value\n   * @param {Number=} data.interval                     The INTERVAL value\n   * @param {weekDay=} data.wkst                        The week start value\n   * @param {Time=} data.until                          The end of the recurrence set\n   * @param {Number=} data.count                        The number of occurrences\n   * @param {Array.<Number>=} data.bysecond             The seconds for the BYSECOND part\n   * @param {Array.<Number>=} data.byminute             The minutes for the BYMINUTE part\n   * @param {Array.<Number>=} data.byhour               The hours for the BYHOUR part\n   * @param {Array.<String>=} data.byday                The BYDAY values\n   * @param {Array.<Number>=} data.bymonthday           The days for the BYMONTHDAY part\n   * @param {Array.<Number>=} data.byyearday            The days for the BYYEARDAY part\n   * @param {Array.<Number>=} data.byweekno             The weeks for the BYWEEKNO part\n   * @param {Array.<Number>=} data.bymonth              The month for the BYMONTH part\n   * @param {Array.<Number>=} data.bysetpos             The positionals for the BYSETPOS part\n   */\n  constructor(data) {\n    this.wrappedJSObject = this;\n    this.parts = {};\n\n    if (data && typeof(data) === 'object') {\n      this.fromData(data);\n    }\n  }\n\n  /**\n   * An object holding the BY-parts of the recurrence rule\n   * @memberof ICAL.Recur\n   * @typedef {Object} byParts\n   * @property {Array.<Number>=} BYSECOND            The seconds for the BYSECOND part\n   * @property {Array.<Number>=} BYMINUTE            The minutes for the BYMINUTE part\n   * @property {Array.<Number>=} BYHOUR              The hours for the BYHOUR part\n   * @property {Array.<String>=} BYDAY               The BYDAY values\n   * @property {Array.<Number>=} BYMONTHDAY          The days for the BYMONTHDAY part\n   * @property {Array.<Number>=} BYYEARDAY           The days for the BYYEARDAY part\n   * @property {Array.<Number>=} BYWEEKNO            The weeks for the BYWEEKNO part\n   * @property {Array.<Number>=} BYMONTH             The month for the BYMONTH part\n   * @property {Array.<Number>=} BYSETPOS            The positionals for the BYSETPOS part\n   */\n\n  /**\n   * An object holding the BY-parts of the recurrence rule\n   * @type {byParts}\n   */\n  parts = null;\n\n  /**\n   * The interval value for the recurrence rule.\n   * @type {Number}\n   */\n  interval = 1;\n\n  /**\n   * The week start day\n   *\n   * @type {weekDay}\n   * @default ICAL.Time.MONDAY\n   */\n  wkst = Time.MONDAY;\n\n  /**\n   * The end of the recurrence\n   * @type {?Time}\n   */\n  until = null;\n\n  /**\n   * The maximum number of occurrences\n   * @type {?Number}\n   */\n  count = null;\n\n  /**\n   * The frequency value.\n   * @type {frequencyValues}\n   */\n  freq = null;\n\n  /**\n   * The class identifier.\n   * @constant\n   * @type {String}\n   * @default \"icalrecur\"\n   */\n  icalclass = \"icalrecur\";\n\n  /**\n   * The type name, to be used in the jCal object.\n   * @constant\n   * @type {String}\n   * @default \"recur\"\n   */\n  icaltype = \"recur\";\n\n  /**\n   * Create a new iterator for this recurrence rule. The passed start date\n   * must be the start date of the event, not the start of the range to\n   * search in.\n   *\n   * @example\n   * let recur = comp.getFirstPropertyValue('rrule');\n   * let dtstart = comp.getFirstPropertyValue('dtstart');\n   * let iter = recur.iterator(dtstart);\n   * for (let next = iter.next(); next; next = iter.next()) {\n   *   if (next.compare(rangeStart) < 0) {\n   *     continue;\n   *   }\n   *   console.log(next.toString());\n   * }\n   *\n   * @param {Time} aStart        The item's start date\n   * @return {RecurIterator}     The recurrence iterator\n   */\n  iterator(aStart) {\n    return new RecurIterator({\n      rule: this,\n      dtstart: aStart\n    });\n  }\n\n  /**\n   * Returns a clone of the recurrence object.\n   *\n   * @return {Recur}      The cloned object\n   */\n  clone() {\n    return new Recur(this.toJSON());\n  }\n\n  /**\n   * Checks if the current rule is finite, i.e. has a count or until part.\n   *\n   * @return {Boolean}        True, if the rule is finite\n   */\n  isFinite() {\n    return !!(this.count || this.until);\n  }\n\n  /**\n   * Checks if the current rule has a count part, and not limited by an until\n   * part.\n   *\n   * @return {Boolean}        True, if the rule is by count\n   */\n  isByCount() {\n    return !!(this.count && !this.until);\n  }\n\n  /**\n   * Adds a component (part) to the recurrence rule. This is not a component\n   * in the sense of {@link ICAL.Component}, but a part of the recurrence\n   * rule, i.e. BYMONTH.\n   *\n   * @param {String} aType            The name of the component part\n   * @param {Array|String} aValue     The component value\n   */\n  addComponent(aType, aValue) {\n    let ucname = aType.toUpperCase();\n    if (ucname in this.parts) {\n      this.parts[ucname].push(aValue);\n    } else {\n      this.parts[ucname] = [aValue];\n    }\n  }\n\n  /**\n   * Sets the component value for the given by-part.\n   *\n   * @param {String} aType        The component part name\n   * @param {Array} aValues       The component values\n   */\n  setComponent(aType, aValues) {\n    this.parts[aType.toUpperCase()] = aValues.slice();\n  }\n\n  /**\n   * Gets (a copy) of the requested component value.\n   *\n   * @param {String} aType        The component part name\n   * @return {Array}              The component part value\n   */\n  getComponent(aType) {\n    let ucname = aType.toUpperCase();\n    return (ucname in this.parts ? this.parts[ucname].slice() : []);\n  }\n\n  /**\n   * Retrieves the next occurrence after the given recurrence id. See the\n   * guide on {@tutorial terminology} for more details.\n   *\n   * NOTE: Currently, this method iterates all occurrences from the start\n   * date. It should not be called in a loop for performance reasons. If you\n   * would like to get more than one occurrence, you can iterate the\n   * occurrences manually, see the example on the\n   * {@link ICAL.Recur#iterator iterator} method.\n   *\n   * @param {Time} aStartTime        The start of the event series\n   * @param {Time} aRecurrenceId     The date of the last occurrence\n   * @return {Time}                  The next occurrence after\n   */\n  getNextOccurrence(aStartTime, aRecurrenceId) {\n    let iter = this.iterator(aStartTime);\n    let next;\n\n    do {\n      next = iter.next();\n    } while (next && next.compare(aRecurrenceId) <= 0);\n\n    if (next && aRecurrenceId.zone) {\n      next.zone = aRecurrenceId.zone;\n    }\n\n    return next;\n  }\n\n  /**\n   * Sets up the current instance using members from the passed data object.\n   *\n   * @param {Object} data                               An object with members of the recurrence\n   * @param {frequencyValues=} data.freq                The frequency value\n   * @param {Number=} data.interval                     The INTERVAL value\n   * @param {weekDay=} data.wkst                        The week start value\n   * @param {Time=} data.until                          The end of the recurrence set\n   * @param {Number=} data.count                        The number of occurrences\n   * @param {Array.<Number>=} data.bysecond             The seconds for the BYSECOND part\n   * @param {Array.<Number>=} data.byminute             The minutes for the BYMINUTE part\n   * @param {Array.<Number>=} data.byhour               The hours for the BYHOUR part\n   * @param {Array.<String>=} data.byday                The BYDAY values\n   * @param {Array.<Number>=} data.bymonthday           The days for the BYMONTHDAY part\n   * @param {Array.<Number>=} data.byyearday            The days for the BYYEARDAY part\n   * @param {Array.<Number>=} data.byweekno             The weeks for the BYWEEKNO part\n   * @param {Array.<Number>=} data.bymonth              The month for the BYMONTH part\n   * @param {Array.<Number>=} data.bysetpos             The positionals for the BYSETPOS part\n   */\n  fromData(data) {\n    for (let key in data) {\n      let uckey = key.toUpperCase();\n\n      if (uckey in partDesign) {\n        if (Array.isArray(data[key])) {\n          this.parts[uckey] = data[key];\n        } else {\n          this.parts[uckey] = [data[key]];\n        }\n      } else {\n        this[key] = data[key];\n      }\n    }\n\n    if (this.interval && typeof this.interval != \"number\") {\n      optionDesign.INTERVAL(this.interval, this);\n    }\n\n    if (this.wkst && typeof this.wkst != \"number\") {\n      this.wkst = Recur.icalDayToNumericDay(this.wkst);\n    }\n\n    if (this.until && !(this.until instanceof Time)) {\n      this.until = Time.fromString(this.until);\n    }\n  }\n\n  /**\n   * The jCal representation of this recurrence type.\n   * @return {Object}\n   */\n  toJSON() {\n    let res = Object.create(null);\n    res.freq = this.freq;\n\n    if (this.count) {\n      res.count = this.count;\n    }\n\n    if (this.interval > 1) {\n      res.interval = this.interval;\n    }\n\n    for (let [k, kparts] of Object.entries(this.parts)) {\n      if (Array.isArray(kparts) && kparts.length == 1) {\n        res[k.toLowerCase()] = kparts[0];\n      } else {\n        res[k.toLowerCase()] = clone(kparts);\n      }\n    }\n\n    if (this.until) {\n      res.until = this.until.toString();\n    }\n    if ('wkst' in this && this.wkst !== Time.DEFAULT_WEEK_START) {\n      res.wkst = Recur.numericDayToIcalDay(this.wkst);\n    }\n    return res;\n  }\n\n  /**\n   * The string representation of this recurrence rule.\n   * @return {String}\n   */\n  toString() {\n    // TODO retain order\n    let str = \"FREQ=\" + this.freq;\n    if (this.count) {\n      str += \";COUNT=\" + this.count;\n    }\n    if (this.interval > 1) {\n      str += \";INTERVAL=\" + this.interval;\n    }\n    for (let [k, v] of Object.entries(this.parts)) {\n      str += \";\" + k + \"=\" + v;\n    }\n    if (this.until) {\n      str += ';UNTIL=' + this.until.toICALString();\n    }\n    if ('wkst' in this && this.wkst !== Time.DEFAULT_WEEK_START) {\n      str += ';WKST=' + Recur.numericDayToIcalDay(this.wkst);\n    }\n    return str;\n  }\n}\n\nfunction parseNumericValue(type, min, max, value) {\n  let result = value;\n\n  if (value[0] === '+') {\n    result = value.slice(1);\n  }\n\n  result = strictParseInt(result);\n\n  if (min !== undefined && value < min) {\n    throw new Error(\n      type + ': invalid value \"' + value + '\" must be > ' + min\n    );\n  }\n\n  if (max !== undefined && value > max) {\n    throw new Error(\n      type + ': invalid value \"' + value + '\" must be < ' + min\n    );\n  }\n\n  return result;\n}\n\nconst optionDesign = {\n  FREQ: function(value, dict, fmtIcal) {\n    // yes this is actually equal or faster then regex.\n    // upside here is we can enumerate the valid values.\n    if (ALLOWED_FREQ.indexOf(value) !== -1) {\n      dict.freq = value;\n    } else {\n      throw new Error(\n        'invalid frequency \"' + value + '\" expected: \"' +\n        ALLOWED_FREQ.join(', ') + '\"'\n      );\n    }\n  },\n\n  COUNT: function(value, dict, fmtIcal) {\n    dict.count = strictParseInt(value);\n  },\n\n  INTERVAL: function(value, dict, fmtIcal) {\n    dict.interval = strictParseInt(value);\n    if (dict.interval < 1) {\n      // 0 or negative values are not allowed, some engines seem to generate\n      // it though. Assume 1 instead.\n      dict.interval = 1;\n    }\n  },\n\n  UNTIL: function(value, dict, fmtIcal) {\n    if (value.length > 10) {\n      dict.until = design$1.icalendar.value['date-time'].fromICAL(value);\n    } else {\n      dict.until = design$1.icalendar.value.date.fromICAL(value);\n    }\n    if (!fmtIcal) {\n      dict.until = Time.fromString(dict.until);\n    }\n  },\n\n  WKST: function(value, dict, fmtIcal) {\n    if (VALID_DAY_NAMES.test(value)) {\n      dict.wkst = Recur.icalDayToNumericDay(value);\n    } else {\n      throw new Error('invalid WKST value \"' + value + '\"');\n    }\n  }\n};\n\nconst partDesign = {\n  BYSECOND: parseNumericValue.bind(undefined, 'BYSECOND', 0, 60),\n  BYMINUTE: parseNumericValue.bind(undefined, 'BYMINUTE', 0, 59),\n  BYHOUR: parseNumericValue.bind(undefined, 'BYHOUR', 0, 23),\n  BYDAY: function(value) {\n    if (VALID_BYDAY_PART.test(value)) {\n      return value;\n    } else {\n      throw new Error('invalid BYDAY value \"' + value + '\"');\n    }\n  },\n  BYMONTHDAY: parseNumericValue.bind(undefined, 'BYMONTHDAY', -31, 31),\n  BYYEARDAY: parseNumericValue.bind(undefined, 'BYYEARDAY', -366, 366),\n  BYWEEKNO: parseNumericValue.bind(undefined, 'BYWEEKNO', -53, 53),\n  BYMONTH: parseNumericValue.bind(undefined, 'BYMONTH', 1, 12),\n  BYSETPOS: parseNumericValue.bind(undefined, 'BYSETPOS', -366, 366)\n};\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n/**\n * This lets typescript resolve our custom types in the\n * generated d.ts files (jsdoc typedefs are converted to typescript types).\n * Ignore prevents the typedefs from being documented more than once.\n * @ignore\n * @typedef {import(\"./types.js\").jCalComponent} jCalComponent\n * Imports the 'occurrenceDetails' type from the \"types.js\" module\n */\n\n/**\n * This class represents the \"period\" value type, with various calculation and manipulation methods.\n *\n * @memberof ICAL\n */\nclass Period {\n  /**\n   * Creates a new {@link ICAL.Period} instance from the passed string.\n   *\n   * @param {String} str            The string to parse\n   * @param {Property} prop         The property this period will be on\n   * @return {Period}               The created period instance\n   */\n  static fromString(str, prop) {\n    let parts = str.split('/');\n\n    if (parts.length !== 2) {\n      throw new Error(\n        'Invalid string value: \"' + str + '\" must contain a \"/\" char.'\n      );\n    }\n\n    let options = {\n      start: Time.fromDateTimeString(parts[0], prop)\n    };\n\n    let end = parts[1];\n\n    if (Duration.isValueString(end)) {\n      options.duration = Duration.fromString(end);\n    } else {\n      options.end = Time.fromDateTimeString(end, prop);\n    }\n\n    return new Period(options);\n  }\n\n  /**\n   * Creates a new {@link ICAL.Period} instance from the given data object.\n   * The passed data object cannot contain both and end date and a duration.\n   *\n   * @param {Object} aData                  An object with members of the period\n   * @param {Time=} aData.start             The start of the period\n   * @param {Time=} aData.end               The end of the period\n   * @param {Duration=} aData.duration      The duration of the period\n   * @return {Period}                       The period instance\n   */\n  static fromData(aData) {\n    return new Period(aData);\n  }\n\n  /**\n   * Returns a new period instance from the given jCal data array. The first\n   * member is always the start date string, the second member is either a\n   * duration or end date string.\n   *\n   * @param {jCalComponent} aData           The jCal data array\n   * @param {Property} aProp                The property this jCal data is on\n   * @param {Boolean} aLenient              If true, data value can be both date and date-time\n   * @return {Period}                       The period instance\n   */\n  static fromJSON(aData, aProp, aLenient) {\n    function fromDateOrDateTimeString(aValue, dateProp) {\n      if (aLenient) {\n        return Time.fromString(aValue, dateProp);\n      } else {\n        return Time.fromDateTimeString(aValue, dateProp);\n      }\n    }\n\n    if (Duration.isValueString(aData[1])) {\n      return Period.fromData({\n        start: fromDateOrDateTimeString(aData[0], aProp),\n        duration: Duration.fromString(aData[1])\n      });\n    } else {\n      return Period.fromData({\n        start: fromDateOrDateTimeString(aData[0], aProp),\n        end: fromDateOrDateTimeString(aData[1], aProp)\n      });\n    }\n  }\n\n  /**\n   * Creates a new ICAL.Period instance. The passed data object cannot contain both and end date and\n   * a duration.\n   *\n   * @param {Object} aData                  An object with members of the period\n   * @param {Time=} aData.start             The start of the period\n   * @param {Time=} aData.end               The end of the period\n   * @param {Duration=} aData.duration      The duration of the period\n   */\n  constructor(aData) {\n    this.wrappedJSObject = this;\n\n    if (aData && 'start' in aData) {\n      if (aData.start && !(aData.start instanceof Time)) {\n        throw new TypeError('.start must be an instance of ICAL.Time');\n      }\n      this.start = aData.start;\n    }\n\n    if (aData && aData.end && aData.duration) {\n      throw new Error('cannot accept both end and duration');\n    }\n\n    if (aData && 'end' in aData) {\n      if (aData.end && !(aData.end instanceof Time)) {\n        throw new TypeError('.end must be an instance of ICAL.Time');\n      }\n      this.end = aData.end;\n    }\n\n    if (aData && 'duration' in aData) {\n      if (aData.duration && !(aData.duration instanceof Duration)) {\n        throw new TypeError('.duration must be an instance of ICAL.Duration');\n      }\n      this.duration = aData.duration;\n    }\n  }\n\n\n  /**\n   * The start of the period\n   * @type {Time}\n   */\n  start = null;\n\n  /**\n   * The end of the period\n   * @type {Time}\n   */\n  end = null;\n\n  /**\n   * The duration of the period\n   * @type {Duration}\n   */\n  duration = null;\n\n  /**\n   * The class identifier.\n   * @constant\n   * @type {String}\n   * @default \"icalperiod\"\n   */\n  icalclass = \"icalperiod\";\n\n  /**\n   * The type name, to be used in the jCal object.\n   * @constant\n   * @type {String}\n   * @default \"period\"\n   */\n  icaltype = \"period\";\n\n  /**\n   * Returns a clone of the duration object.\n   *\n   * @return {Period}      The cloned object\n   */\n  clone() {\n    return Period.fromData({\n      start: this.start ? this.start.clone() : null,\n      end: this.end ? this.end.clone() : null,\n      duration: this.duration ? this.duration.clone() : null\n    });\n  }\n\n  /**\n   * Calculates the duration of the period, either directly or by subtracting\n   * start from end date.\n   *\n   * @return {Duration}      The calculated duration\n   */\n  getDuration() {\n    if (this.duration) {\n      return this.duration;\n    } else {\n      return this.end.subtractDate(this.start);\n    }\n  }\n\n  /**\n   * Calculates the end date of the period, either directly or by adding\n   * duration to start date.\n   *\n   * @return {Time}          The calculated end date\n   */\n  getEnd() {\n    if (this.end) {\n      return this.end;\n    } else {\n      let end = this.start.clone();\n      end.addDuration(this.duration);\n      return end;\n    }\n  }\n\n  /**\n   * The string representation of this period.\n   * @return {String}\n   */\n  toString() {\n    return this.start + \"/\" + (this.end || this.duration);\n  }\n\n  /**\n   * The jCal representation of this period type.\n   * @return {Object}\n   */\n  toJSON() {\n    return [this.start.toString(), (this.end || this.duration).toString()];\n  }\n\n  /**\n   * The iCalendar string representation of this period.\n   * @return {String}\n   */\n  toICALString() {\n    return this.start.toICALString() + \"/\" +\n           (this.end || this.duration).toICALString();\n  }\n}\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n/**\n * This lets typescript resolve our custom types in the\n * generated d.ts files (jsdoc typedefs are converted to typescript types).\n * Ignore prevents the typedefs from being documented more than once.\n * @ignore\n * @typedef {import(\"./types.js\").designSet} designSet\n * Imports the 'designSet' type from the \"types.js\" module\n */\n\n/** @module ICAL.design */\n\nconst FROM_ICAL_NEWLINE = /\\\\\\\\|\\\\;|\\\\,|\\\\[Nn]/g;\nconst TO_ICAL_NEWLINE = /\\\\|;|,|\\n/g;\nconst FROM_VCARD_NEWLINE = /\\\\\\\\|\\\\,|\\\\[Nn]/g;\nconst TO_VCARD_NEWLINE = /\\\\|,|\\n/g;\n\nfunction createTextType(fromNewline, toNewline) {\n  let result = {\n    matches: /.*/,\n\n    fromICAL: function(aValue, structuredEscape) {\n      return replaceNewline(aValue, fromNewline, structuredEscape);\n    },\n\n    toICAL: function(aValue, structuredEscape) {\n      let regEx = toNewline;\n      if (structuredEscape)\n         regEx = new RegExp(regEx.source + '|' + structuredEscape, regEx.flags);\n      return aValue.replace(regEx, function(str) {\n        switch (str) {\n        case \"\\\\\":\n          return \"\\\\\\\\\";\n        case \";\":\n          return \"\\\\;\";\n        case \",\":\n          return \"\\\\,\";\n        case \"\\n\":\n          return \"\\\\n\";\n        /* c8 ignore next 2 */\n        default:\n          return str;\n        }\n      });\n    }\n  };\n  return result;\n}\n\n// default types used multiple times\nconst DEFAULT_TYPE_TEXT = { defaultType: \"text\" };\nconst DEFAULT_TYPE_TEXT_MULTI = { defaultType: \"text\", multiValue: \",\" };\nconst DEFAULT_TYPE_TEXT_STRUCTURED = { defaultType: \"text\", structuredValue: \";\" };\nconst DEFAULT_TYPE_INTEGER = { defaultType: \"integer\" };\nconst DEFAULT_TYPE_DATETIME_DATE = { defaultType: \"date-time\", allowedTypes: [\"date-time\", \"date\"] };\nconst DEFAULT_TYPE_DATETIME = { defaultType: \"date-time\" };\nconst DEFAULT_TYPE_URI = { defaultType: \"uri\" };\nconst DEFAULT_TYPE_UTCOFFSET = { defaultType: \"utc-offset\" };\nconst DEFAULT_TYPE_RECUR = { defaultType: \"recur\" };\nconst DEFAULT_TYPE_DATE_ANDOR_TIME = { defaultType: \"date-and-or-time\", allowedTypes: [\"date-time\", \"date\", \"text\"] };\n\nfunction replaceNewlineReplace(string) {\n  switch (string) {\n    case \"\\\\\\\\\":\n      return \"\\\\\";\n    case \"\\\\;\":\n      return \";\";\n    case \"\\\\,\":\n      return \",\";\n    case \"\\\\n\":\n    case \"\\\\N\":\n      return \"\\n\";\n    /* c8 ignore next 2 */\n    default:\n      return string;\n  }\n}\n\nfunction replaceNewline(value, newline, structuredEscape) {\n  // avoid regex when possible.\n  if (value.indexOf('\\\\') === -1) {\n    return value;\n  }\n  if (structuredEscape)\n     newline = new RegExp(newline.source + '|\\\\\\\\' + structuredEscape, newline.flags);\n  return value.replace(newline, replaceNewlineReplace);\n}\n\nlet commonProperties = {\n  \"categories\": DEFAULT_TYPE_TEXT_MULTI,\n  \"url\": DEFAULT_TYPE_URI,\n  \"version\": DEFAULT_TYPE_TEXT,\n  \"uid\": DEFAULT_TYPE_TEXT\n};\n\nlet commonValues = {\n  \"boolean\": {\n    values: [\"TRUE\", \"FALSE\"],\n\n    fromICAL: function(aValue) {\n      switch (aValue) {\n        case 'TRUE':\n          return true;\n        case 'FALSE':\n          return false;\n        default:\n          //TODO: parser warning\n          return false;\n      }\n    },\n\n    toICAL: function(aValue) {\n      if (aValue) {\n        return 'TRUE';\n      }\n      return 'FALSE';\n    }\n\n  },\n  float: {\n    matches: /^[+-]?\\d+\\.\\d+$/,\n\n    fromICAL: function(aValue) {\n      let parsed = parseFloat(aValue);\n      if (isStrictlyNaN(parsed)) {\n        // TODO: parser warning\n        return 0.0;\n      }\n      return parsed;\n    },\n\n    toICAL: function(aValue) {\n      return String(aValue);\n    }\n  },\n  integer: {\n    fromICAL: function(aValue) {\n      let parsed = parseInt(aValue);\n      if (isStrictlyNaN(parsed)) {\n        return 0;\n      }\n      return parsed;\n    },\n\n    toICAL: function(aValue) {\n      return String(aValue);\n    }\n  },\n  \"utc-offset\": {\n    toICAL: function(aValue) {\n      if (aValue.length < 7) {\n        // no seconds\n        // -0500\n        return aValue.slice(0, 3) +\n               aValue.slice(4, 6);\n      } else {\n        // seconds\n        // -050000\n        return aValue.slice(0, 3) +\n               aValue.slice(4, 6) +\n               aValue.slice(7, 9);\n      }\n    },\n\n    fromICAL: function(aValue) {\n      if (aValue.length < 6) {\n        // no seconds\n        // -05:00\n        return aValue.slice(0, 3) + ':' +\n               aValue.slice(3, 5);\n      } else {\n        // seconds\n        // -05:00:00\n        return aValue.slice(0, 3) + ':' +\n               aValue.slice(3, 5) + ':' +\n               aValue.slice(5, 7);\n      }\n    },\n\n    decorate: function(aValue) {\n      return UtcOffset.fromString(aValue);\n    },\n\n    undecorate: function(aValue) {\n      return aValue.toString();\n    }\n  }\n};\n\nlet icalParams = {\n  // Although the syntax is DQUOTE uri DQUOTE, I don't think we should\n  // enforce anything aside from it being a valid content line.\n  //\n  // At least some params require - if multi values are used - DQUOTEs\n  // for each of its values - e.g. delegated-from=\"uri1\",\"uri2\"\n  // To indicate this, I introduced the new k/v pair\n  // multiValueSeparateDQuote: true\n  //\n  // \"ALTREP\": { ... },\n\n  // CN just wants a param-value\n  // \"CN\": { ... }\n\n  \"cutype\": {\n    values: [\"INDIVIDUAL\", \"GROUP\", \"RESOURCE\", \"ROOM\", \"UNKNOWN\"],\n    allowXName: true,\n    allowIanaToken: true\n  },\n\n  \"delegated-from\": {\n    valueType: \"cal-address\",\n    multiValue: \",\",\n    multiValueSeparateDQuote: true\n  },\n  \"delegated-to\": {\n    valueType: \"cal-address\",\n    multiValue: \",\",\n    multiValueSeparateDQuote: true\n  },\n  // \"DIR\": { ... }, // See ALTREP\n  \"encoding\": {\n    values: [\"8BIT\", \"BASE64\"]\n  },\n  // \"FMTTYPE\": { ... }, // See ALTREP\n  \"fbtype\": {\n    values: [\"FREE\", \"BUSY\", \"BUSY-UNAVAILABLE\", \"BUSY-TENTATIVE\"],\n    allowXName: true,\n    allowIanaToken: true\n  },\n  // \"LANGUAGE\": { ... }, // See ALTREP\n  \"member\": {\n    valueType: \"cal-address\",\n    multiValue: \",\",\n    multiValueSeparateDQuote: true\n  },\n  \"partstat\": {\n    // TODO These values are actually different per-component\n    values: [\"NEEDS-ACTION\", \"ACCEPTED\", \"DECLINED\", \"TENTATIVE\",\n             \"DELEGATED\", \"COMPLETED\", \"IN-PROCESS\"],\n    allowXName: true,\n    allowIanaToken: true\n  },\n  \"range\": {\n    values: [\"THISANDFUTURE\"]\n  },\n  \"related\": {\n    values: [\"START\", \"END\"]\n  },\n  \"reltype\": {\n    values: [\"PARENT\", \"CHILD\", \"SIBLING\"],\n    allowXName: true,\n    allowIanaToken: true\n  },\n  \"role\": {\n    values: [\"REQ-PARTICIPANT\", \"CHAIR\",\n             \"OPT-PARTICIPANT\", \"NON-PARTICIPANT\"],\n    allowXName: true,\n    allowIanaToken: true\n  },\n  \"rsvp\": {\n    values: [\"TRUE\", \"FALSE\"]\n  },\n  \"sent-by\": {\n    valueType: \"cal-address\"\n  },\n  \"tzid\": {\n    matches: /^\\//\n  },\n  \"value\": {\n    // since the value here is a 'type' lowercase is used.\n    values: [\"binary\", \"boolean\", \"cal-address\", \"date\", \"date-time\",\n             \"duration\", \"float\", \"integer\", \"period\", \"recur\", \"text\",\n             \"time\", \"uri\", \"utc-offset\"],\n    allowXName: true,\n    allowIanaToken: true\n  }\n};\n\n// When adding a value here, be sure to add it to the parameter types!\nconst icalValues = extend(commonValues, {\n  text: createTextType(FROM_ICAL_NEWLINE, TO_ICAL_NEWLINE),\n\n  uri: {\n    // TODO\n    /* ... */\n  },\n\n  \"binary\": {\n    decorate: function(aString) {\n      return Binary.fromString(aString);\n    },\n\n    undecorate: function(aBinary) {\n      return aBinary.toString();\n    }\n  },\n  \"cal-address\": {\n    // needs to be an uri\n  },\n  \"date\": {\n    decorate: function(aValue, aProp) {\n      if (design.strict) {\n        return Time.fromDateString(aValue, aProp);\n      } else {\n        return Time.fromString(aValue, aProp);\n      }\n    },\n\n    /**\n     * undecorates a time object.\n     */\n    undecorate: function(aValue) {\n      return aValue.toString();\n    },\n\n    fromICAL: function(aValue) {\n      // from: 20120901\n      // to: 2012-09-01\n      if (!design.strict && aValue.length >= 15) {\n        // This is probably a date-time, e.g. 20120901T130000Z\n        return icalValues[\"date-time\"].fromICAL(aValue);\n      } else {\n        return aValue.slice(0, 4) + '-' +\n               aValue.slice(4, 6) + '-' +\n               aValue.slice(6, 8);\n      }\n    },\n\n    toICAL: function(aValue) {\n      // from: 2012-09-01\n      // to: 20120901\n      let len = aValue.length;\n\n      if (len == 10) {\n        return aValue.slice(0, 4) +\n               aValue.slice(5, 7) +\n               aValue.slice(8, 10);\n      } else if (len >= 19) {\n        return icalValues[\"date-time\"].toICAL(aValue);\n      } else {\n        //TODO: serialize warning?\n        return aValue;\n      }\n\n    }\n  },\n  \"date-time\": {\n    fromICAL: function(aValue) {\n      // from: 20120901T130000\n      // to: 2012-09-01T13:00:00\n      if (!design.strict && aValue.length == 8) {\n        // This is probably a date, e.g. 20120901\n        return icalValues.date.fromICAL(aValue);\n      } else {\n        let result = aValue.slice(0, 4) + '-' +\n                     aValue.slice(4, 6) + '-' +\n                     aValue.slice(6, 8) + 'T' +\n                     aValue.slice(9, 11) + ':' +\n                     aValue.slice(11, 13) + ':' +\n                     aValue.slice(13, 15);\n\n        if (aValue[15] && aValue[15] === 'Z') {\n          result += 'Z';\n        }\n\n        return result;\n      }\n    },\n\n    toICAL: function(aValue) {\n      // from: 2012-09-01T13:00:00\n      // to: 20120901T130000\n      let len = aValue.length;\n\n      if (len == 10 && !design.strict) {\n        return icalValues.date.toICAL(aValue);\n      } else if (len >= 19) {\n        let result = aValue.slice(0, 4) +\n                     aValue.slice(5, 7) +\n                     // grab the (DDTHH) segment\n                     aValue.slice(8, 13) +\n                     // MM\n                     aValue.slice(14, 16) +\n                     // SS\n                     aValue.slice(17, 19);\n\n        if (aValue[19] && aValue[19] === 'Z') {\n          result += 'Z';\n        }\n        return result;\n      } else {\n        // TODO: error\n        return aValue;\n      }\n    },\n\n    decorate: function(aValue, aProp) {\n      if (design.strict) {\n        return Time.fromDateTimeString(aValue, aProp);\n      } else {\n        return Time.fromString(aValue, aProp);\n      }\n    },\n\n    undecorate: function(aValue) {\n      return aValue.toString();\n    }\n  },\n  duration: {\n    decorate: function(aValue) {\n      return Duration.fromString(aValue);\n    },\n    undecorate: function(aValue) {\n      return aValue.toString();\n    }\n  },\n  period: {\n    fromICAL: function(string) {\n      let parts = string.split('/');\n      parts[0] = icalValues['date-time'].fromICAL(parts[0]);\n\n      if (!Duration.isValueString(parts[1])) {\n        parts[1] = icalValues['date-time'].fromICAL(parts[1]);\n      }\n\n      return parts;\n    },\n\n    toICAL: function(parts) {\n      parts = parts.slice();\n      if (!design.strict && parts[0].length == 10) {\n        parts[0] = icalValues.date.toICAL(parts[0]);\n      } else {\n        parts[0] = icalValues['date-time'].toICAL(parts[0]);\n      }\n\n      if (!Duration.isValueString(parts[1])) {\n        if (!design.strict && parts[1].length == 10) {\n          parts[1] = icalValues.date.toICAL(parts[1]);\n        } else {\n          parts[1] = icalValues['date-time'].toICAL(parts[1]);\n        }\n      }\n\n      return parts.join(\"/\");\n    },\n\n    decorate: function(aValue, aProp) {\n      return Period.fromJSON(aValue, aProp, !design.strict);\n    },\n\n    undecorate: function(aValue) {\n      return aValue.toJSON();\n    }\n  },\n  recur: {\n    fromICAL: function(string) {\n      return Recur._stringToData(string, true);\n    },\n\n    toICAL: function(data) {\n      let str = \"\";\n      for (let [k, val] of Object.entries(data)) {\n        if (k == \"until\") {\n          if (val.length > 10) {\n            val = icalValues['date-time'].toICAL(val);\n          } else {\n            val = icalValues.date.toICAL(val);\n          }\n        } else if (k == \"wkst\") {\n          if (typeof val === 'number') {\n            val = Recur.numericDayToIcalDay(val);\n          }\n        } else if (Array.isArray(val)) {\n          val = val.join(\",\");\n        }\n        str += k.toUpperCase() + \"=\" + val + \";\";\n      }\n      return str.slice(0, Math.max(0, str.length - 1));\n    },\n\n    decorate: function decorate(aValue) {\n      return Recur.fromData(aValue);\n    },\n\n    undecorate: function(aRecur) {\n      return aRecur.toJSON();\n    }\n  },\n\n  time: {\n    fromICAL: function(aValue) {\n      // from: MMHHSS(Z)?\n      // to: HH:MM:SS(Z)?\n      if (aValue.length < 6) {\n        // TODO: parser exception?\n        return aValue;\n      }\n\n      // HH::MM::SSZ?\n      let result = aValue.slice(0, 2) + ':' +\n                   aValue.slice(2, 4) + ':' +\n                   aValue.slice(4, 6);\n\n      if (aValue[6] === 'Z') {\n        result += 'Z';\n      }\n\n      return result;\n    },\n\n    toICAL: function(aValue) {\n      // from: HH:MM:SS(Z)?\n      // to: MMHHSS(Z)?\n      if (aValue.length < 8) {\n        //TODO: error\n        return aValue;\n      }\n\n      let result = aValue.slice(0, 2) +\n                   aValue.slice(3, 5) +\n                   aValue.slice(6, 8);\n\n      if (aValue[8] === 'Z') {\n        result += 'Z';\n      }\n\n      return result;\n    }\n  }\n});\n\nlet icalProperties = extend(commonProperties, {\n\n  \"action\": DEFAULT_TYPE_TEXT,\n  \"attach\": { defaultType: \"uri\" },\n  \"attendee\": { defaultType: \"cal-address\" },\n  \"calscale\": DEFAULT_TYPE_TEXT,\n  \"class\": DEFAULT_TYPE_TEXT,\n  \"comment\": DEFAULT_TYPE_TEXT,\n  \"completed\": DEFAULT_TYPE_DATETIME,\n  \"contact\": DEFAULT_TYPE_TEXT,\n  \"created\": DEFAULT_TYPE_DATETIME,\n  \"description\": DEFAULT_TYPE_TEXT,\n  \"dtend\": DEFAULT_TYPE_DATETIME_DATE,\n  \"dtstamp\": DEFAULT_TYPE_DATETIME,\n  \"dtstart\": DEFAULT_TYPE_DATETIME_DATE,\n  \"due\": DEFAULT_TYPE_DATETIME_DATE,\n  \"duration\": { defaultType: \"duration\" },\n  \"exdate\": {\n    defaultType: \"date-time\",\n    allowedTypes: [\"date-time\", \"date\"],\n    multiValue: ','\n  },\n  \"exrule\": DEFAULT_TYPE_RECUR,\n  \"freebusy\": { defaultType: \"period\", multiValue: \",\" },\n  \"geo\": { defaultType: \"float\", structuredValue: \";\" },\n  \"last-modified\": DEFAULT_TYPE_DATETIME,\n  \"location\": DEFAULT_TYPE_TEXT,\n  \"method\": DEFAULT_TYPE_TEXT,\n  \"organizer\": { defaultType: \"cal-address\" },\n  \"percent-complete\": DEFAULT_TYPE_INTEGER,\n  \"priority\": DEFAULT_TYPE_INTEGER,\n  \"prodid\": DEFAULT_TYPE_TEXT,\n  \"related-to\": DEFAULT_TYPE_TEXT,\n  \"repeat\": DEFAULT_TYPE_INTEGER,\n  \"rdate\": {\n    defaultType: \"date-time\",\n    allowedTypes: [\"date-time\", \"date\", \"period\"],\n    multiValue: ',',\n    detectType: function(string) {\n      if (string.indexOf('/') !== -1) {\n        return 'period';\n      }\n      return (string.indexOf('T') === -1) ? 'date' : 'date-time';\n    }\n  },\n  \"recurrence-id\": DEFAULT_TYPE_DATETIME_DATE,\n  \"resources\": DEFAULT_TYPE_TEXT_MULTI,\n  \"request-status\": DEFAULT_TYPE_TEXT_STRUCTURED,\n  \"rrule\": DEFAULT_TYPE_RECUR,\n  \"sequence\": DEFAULT_TYPE_INTEGER,\n  \"status\": DEFAULT_TYPE_TEXT,\n  \"summary\": DEFAULT_TYPE_TEXT,\n  \"transp\": DEFAULT_TYPE_TEXT,\n  \"trigger\": { defaultType: \"duration\", allowedTypes: [\"duration\", \"date-time\"] },\n  \"tzoffsetfrom\": DEFAULT_TYPE_UTCOFFSET,\n  \"tzoffsetto\": DEFAULT_TYPE_UTCOFFSET,\n  \"tzurl\": DEFAULT_TYPE_URI,\n  \"tzid\": DEFAULT_TYPE_TEXT,\n  \"tzname\": DEFAULT_TYPE_TEXT\n});\n\n// When adding a value here, be sure to add it to the parameter types!\nconst vcardValues = extend(commonValues, {\n  text: createTextType(FROM_VCARD_NEWLINE, TO_VCARD_NEWLINE),\n  uri: createTextType(FROM_VCARD_NEWLINE, TO_VCARD_NEWLINE),\n\n  date: {\n    decorate: function(aValue) {\n      return VCardTime.fromDateAndOrTimeString(aValue, \"date\");\n    },\n    undecorate: function(aValue) {\n      return aValue.toString();\n    },\n    fromICAL: function(aValue) {\n      if (aValue.length == 8) {\n        return icalValues.date.fromICAL(aValue);\n      } else if (aValue[0] == '-' && aValue.length == 6) {\n        return aValue.slice(0, 4) + '-' + aValue.slice(4);\n      } else {\n        return aValue;\n      }\n    },\n    toICAL: function(aValue) {\n      if (aValue.length == 10) {\n        return icalValues.date.toICAL(aValue);\n      } else if (aValue[0] == '-' && aValue.length == 7) {\n        return aValue.slice(0, 4) + aValue.slice(5);\n      } else {\n        return aValue;\n      }\n    }\n  },\n\n  time: {\n    decorate: function(aValue) {\n      return VCardTime.fromDateAndOrTimeString(\"T\" + aValue, \"time\");\n    },\n    undecorate: function(aValue) {\n      return aValue.toString();\n    },\n    fromICAL: function(aValue) {\n      let splitzone = vcardValues.time._splitZone(aValue, true);\n      let zone = splitzone[0], value = splitzone[1];\n\n      //console.log(\"SPLIT: \",splitzone);\n\n      if (value.length == 6) {\n        value = value.slice(0, 2) + ':' +\n                value.slice(2, 4) + ':' +\n                value.slice(4, 6);\n      } else if (value.length == 4 && value[0] != '-') {\n        value = value.slice(0, 2) + ':' + value.slice(2, 4);\n      } else if (value.length == 5) {\n        value = value.slice(0, 3) + ':' + value.slice(3, 5);\n      }\n\n      if (zone.length == 5 && (zone[0] == '-' || zone[0] == '+')) {\n        zone = zone.slice(0, 3) + ':' + zone.slice(3);\n      }\n\n      return value + zone;\n    },\n\n    toICAL: function(aValue) {\n      let splitzone = vcardValues.time._splitZone(aValue);\n      let zone = splitzone[0], value = splitzone[1];\n\n      if (value.length == 8) {\n        value = value.slice(0, 2) +\n                value.slice(3, 5) +\n                value.slice(6, 8);\n      } else if (value.length == 5 && value[0] != '-') {\n        value = value.slice(0, 2) + value.slice(3, 5);\n      } else if (value.length == 6) {\n        value = value.slice(0, 3) + value.slice(4, 6);\n      }\n\n      if (zone.length == 6 && (zone[0] == '-' || zone[0] == '+')) {\n        zone = zone.slice(0, 3) + zone.slice(4);\n      }\n\n      return value + zone;\n    },\n\n    _splitZone: function(aValue, isFromIcal) {\n      let lastChar = aValue.length - 1;\n      let signChar = aValue.length - (isFromIcal ? 5 : 6);\n      let sign = aValue[signChar];\n      let zone, value;\n\n      if (aValue[lastChar] == 'Z') {\n        zone = aValue[lastChar];\n        value = aValue.slice(0, Math.max(0, lastChar));\n      } else if (aValue.length > 6 && (sign == '-' || sign == '+')) {\n        zone = aValue.slice(signChar);\n        value = aValue.slice(0, Math.max(0, signChar));\n      } else {\n        zone = \"\";\n        value = aValue;\n      }\n\n      return [zone, value];\n    }\n  },\n\n  \"date-time\": {\n    decorate: function(aValue) {\n      return VCardTime.fromDateAndOrTimeString(aValue, \"date-time\");\n    },\n\n    undecorate: function(aValue) {\n      return aValue.toString();\n    },\n\n    fromICAL: function(aValue) {\n      return vcardValues['date-and-or-time'].fromICAL(aValue);\n    },\n\n    toICAL: function(aValue) {\n      return vcardValues['date-and-or-time'].toICAL(aValue);\n    }\n  },\n\n  \"date-and-or-time\": {\n    decorate: function(aValue) {\n      return VCardTime.fromDateAndOrTimeString(aValue, \"date-and-or-time\");\n    },\n\n    undecorate: function(aValue) {\n      return aValue.toString();\n    },\n\n    fromICAL: function(aValue) {\n      let parts = aValue.split('T');\n      return (parts[0] ? vcardValues.date.fromICAL(parts[0]) : '') +\n             (parts[1] ? 'T' + vcardValues.time.fromICAL(parts[1]) : '');\n    },\n\n    toICAL: function(aValue) {\n      let parts = aValue.split('T');\n      return vcardValues.date.toICAL(parts[0]) +\n             (parts[1] ? 'T' + vcardValues.time.toICAL(parts[1]) : '');\n\n    }\n  },\n  timestamp: icalValues['date-time'],\n  \"language-tag\": {\n    matches: /^[a-zA-Z0-9-]+$/ // Could go with a more strict regex here\n  },\n  \"phone-number\": {\n    fromICAL: function(aValue) {\n      return Array.from(aValue).filter(function(c) {\n          return c === '\\\\' ? undefined : c;\n        }).join('');\n    },\n    toICAL: function(aValue) {\n      return Array.from(aValue).map(function(c) {\n        return c === ',' || c === \";\" ? '\\\\' + c : c;\n      }).join('');\n    }\n  }\n});\n\nlet vcardParams = {\n  \"type\": {\n    valueType: \"text\",\n    multiValue: \",\"\n  },\n  \"value\": {\n    // since the value here is a 'type' lowercase is used.\n    values: [\"text\", \"uri\", \"date\", \"time\", \"date-time\", \"date-and-or-time\",\n             \"timestamp\", \"boolean\", \"integer\", \"float\", \"utc-offset\",\n             \"language-tag\"],\n    allowXName: true,\n    allowIanaToken: true\n  }\n};\n\nlet vcardProperties = extend(commonProperties, {\n  \"adr\": { defaultType: \"text\", structuredValue: \";\", multiValue: \",\" },\n  \"anniversary\": DEFAULT_TYPE_DATE_ANDOR_TIME,\n  \"bday\": DEFAULT_TYPE_DATE_ANDOR_TIME,\n  \"caladruri\": DEFAULT_TYPE_URI,\n  \"caluri\": DEFAULT_TYPE_URI,\n  \"clientpidmap\": DEFAULT_TYPE_TEXT_STRUCTURED,\n  \"email\": DEFAULT_TYPE_TEXT,\n  \"fburl\": DEFAULT_TYPE_URI,\n  \"fn\": DEFAULT_TYPE_TEXT,\n  \"gender\": DEFAULT_TYPE_TEXT_STRUCTURED,\n  \"geo\": DEFAULT_TYPE_URI,\n  \"impp\": DEFAULT_TYPE_URI,\n  \"key\": DEFAULT_TYPE_URI,\n  \"kind\": DEFAULT_TYPE_TEXT,\n  \"lang\": { defaultType: \"language-tag\" },\n  \"logo\": DEFAULT_TYPE_URI,\n  \"member\": DEFAULT_TYPE_URI,\n  \"n\": { defaultType: \"text\", structuredValue: \";\", multiValue: \",\" },\n  \"nickname\": DEFAULT_TYPE_TEXT_MULTI,\n  \"note\": DEFAULT_TYPE_TEXT,\n  \"org\": { defaultType: \"text\", structuredValue: \";\" },\n  \"photo\": DEFAULT_TYPE_URI,\n  \"related\": DEFAULT_TYPE_URI,\n  \"rev\": { defaultType: \"timestamp\" },\n  \"role\": DEFAULT_TYPE_TEXT,\n  \"sound\": DEFAULT_TYPE_URI,\n  \"source\": DEFAULT_TYPE_URI,\n  \"tel\": { defaultType: \"uri\", allowedTypes: [\"uri\", \"text\"] },\n  \"title\": DEFAULT_TYPE_TEXT,\n  \"tz\": { defaultType: \"text\", allowedTypes: [\"text\", \"utc-offset\", \"uri\"] },\n  \"xml\": DEFAULT_TYPE_TEXT\n});\n\nlet vcard3Values = extend(commonValues, {\n  binary: icalValues.binary,\n  date: vcardValues.date,\n  \"date-time\": vcardValues[\"date-time\"],\n  \"phone-number\": vcardValues[\"phone-number\"],\n  uri: icalValues.uri,\n  text: icalValues.text,\n  time: icalValues.time,\n  vcard: icalValues.text,\n  \"utc-offset\": {\n    toICAL: function(aValue) {\n      return aValue.slice(0, 7);\n    },\n\n    fromICAL: function(aValue) {\n      return aValue.slice(0, 7);\n    },\n\n    decorate: function(aValue) {\n      return UtcOffset.fromString(aValue);\n    },\n\n    undecorate: function(aValue) {\n      return aValue.toString();\n    }\n  }\n});\n\nlet vcard3Params = {\n  \"type\": {\n    valueType: \"text\",\n    multiValue: \",\"\n  },\n  \"value\": {\n    // since the value here is a 'type' lowercase is used.\n    values: [\"text\", \"uri\", \"date\", \"date-time\", \"phone-number\", \"time\",\n             \"boolean\", \"integer\", \"float\", \"utc-offset\", \"vcard\", \"binary\"],\n    allowXName: true,\n    allowIanaToken: true\n  }\n};\n\nlet vcard3Properties = extend(commonProperties, {\n  fn: DEFAULT_TYPE_TEXT,\n  n: { defaultType: \"text\", structuredValue: \";\", multiValue: \",\" },\n  nickname: DEFAULT_TYPE_TEXT_MULTI,\n  photo: { defaultType: \"binary\", allowedTypes: [\"binary\", \"uri\"] },\n  bday: {\n    defaultType: \"date-time\",\n    allowedTypes: [\"date-time\", \"date\"],\n    detectType: function(string) {\n      return (string.indexOf('T') === -1) ? 'date' : 'date-time';\n    }\n  },\n\n  adr: { defaultType: \"text\", structuredValue: \";\", multiValue: \",\" },\n  label: DEFAULT_TYPE_TEXT,\n\n  tel: { defaultType: \"phone-number\" },\n  email: DEFAULT_TYPE_TEXT,\n  mailer: DEFAULT_TYPE_TEXT,\n\n  tz: { defaultType: \"utc-offset\", allowedTypes: [\"utc-offset\", \"text\"] },\n  geo: { defaultType: \"float\", structuredValue: \";\" },\n\n  title: DEFAULT_TYPE_TEXT,\n  role: DEFAULT_TYPE_TEXT,\n  logo: { defaultType: \"binary\", allowedTypes: [\"binary\", \"uri\"] },\n  agent: { defaultType: \"vcard\", allowedTypes: [\"vcard\", \"text\", \"uri\"] },\n  org: DEFAULT_TYPE_TEXT_STRUCTURED,\n\n  note: DEFAULT_TYPE_TEXT_MULTI,\n  prodid: DEFAULT_TYPE_TEXT,\n  rev: {\n    defaultType: \"date-time\",\n    allowedTypes: [\"date-time\", \"date\"],\n    detectType: function(string) {\n      return (string.indexOf('T') === -1) ? 'date' : 'date-time';\n    }\n  },\n  \"sort-string\": DEFAULT_TYPE_TEXT,\n  sound: { defaultType: \"binary\", allowedTypes: [\"binary\", \"uri\"] },\n\n  class: DEFAULT_TYPE_TEXT,\n  key: { defaultType: \"binary\", allowedTypes: [\"binary\", \"text\"] }\n});\n\n/**\n * iCalendar design set\n * @type {designSet}\n */\nlet icalSet = {\n  value: icalValues,\n  param: icalParams,\n  property: icalProperties,\n  propertyGroups: false\n};\n\n/**\n * vCard 4.0 design set\n * @type {designSet}\n */\nlet vcardSet = {\n  value: vcardValues,\n  param: vcardParams,\n  property: vcardProperties,\n  propertyGroups: true\n};\n\n/**\n * vCard 3.0 design set\n * @type {designSet}\n */\nlet vcard3Set = {\n  value: vcard3Values,\n  param: vcard3Params,\n  property: vcard3Properties,\n  propertyGroups: true\n};\n\n/**\n * The design data, used by the parser to determine types for properties and\n * other metadata needed to produce correct jCard/jCal data.\n *\n * @alias ICAL.design\n * @exports module:ICAL.design\n */\nconst design = {\n  /**\n   * Can be set to false to make the parser more lenient.\n   */\n  strict: true,\n\n  /**\n   * The default set for new properties and components if none is specified.\n   * @type {designSet}\n   */\n  defaultSet: icalSet,\n\n  /**\n   * The default type for unknown properties\n   * @type {String}\n   */\n  defaultType: 'unknown',\n\n  /**\n   * Holds the design set for known top-level components\n   *\n   * @type {Object}\n   * @property {designSet} vcard       vCard VCARD\n   * @property {designSet} vevent      iCalendar VEVENT\n   * @property {designSet} vtodo       iCalendar VTODO\n   * @property {designSet} vjournal    iCalendar VJOURNAL\n   * @property {designSet} valarm      iCalendar VALARM\n   * @property {designSet} vtimezone   iCalendar VTIMEZONE\n   * @property {designSet} daylight    iCalendar DAYLIGHT\n   * @property {designSet} standard    iCalendar STANDARD\n   *\n   * @example\n   * let propertyName = 'fn';\n   * let componentDesign = ICAL.design.components.vcard;\n   * let propertyDetails = componentDesign.property[propertyName];\n   * if (propertyDetails.defaultType == 'text') {\n   *   // Yep, sure is...\n   * }\n   */\n  components: {\n    vcard: vcardSet,\n    vcard3: vcard3Set,\n    vevent: icalSet,\n    vtodo: icalSet,\n    vjournal: icalSet,\n    valarm: icalSet,\n    vtimezone: icalSet,\n    daylight: icalSet,\n    standard: icalSet\n  },\n\n\n  /**\n   * The design set for iCalendar (rfc5545/rfc7265) components.\n   * @type {designSet}\n   */\n  icalendar: icalSet,\n\n  /**\n   * The design set for vCard (rfc6350/rfc7095) components.\n   * @type {designSet}\n   */\n  vcard: vcardSet,\n\n  /**\n   * The design set for vCard (rfc2425/rfc2426/rfc7095) components.\n   * @type {designSet}\n   */\n  vcard3: vcard3Set,\n\n  /**\n   * Gets the design set for the given component name.\n   *\n   * @param {String} componentName        The name of the component\n   * @return {designSet}      The design set for the component\n   */\n  getDesignSet: function(componentName) {\n    let isInDesign = componentName && componentName in design.components;\n    return isInDesign ? design.components[componentName] : design.defaultSet;\n  }\n};\nvar design$1 = design;\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n/**\n * This lets typescript resolve our custom types in the\n * generated d.ts files (jsdoc typedefs are converted to typescript types).\n * Ignore prevents the typedefs from being documented more than once.\n *\n * @ignore\n * @typedef {import(\"./types.js\").designSet} designSet\n * Imports the 'designSet' type from the \"types.js\" module\n */\n\nconst LINE_ENDING = '\\r\\n';\nconst DEFAULT_VALUE_TYPE = 'unknown';\nconst RFC6868_REPLACE_MAP = { '\"': \"^'\", \"\\n\": \"^n\", \"^\": \"^^\" };\n\n/**\n * Convert a full jCal/jCard array into a iCalendar/vCard string.\n *\n * @function ICAL.stringify\n * @variation function\n * @param {Array} jCal    The jCal/jCard document\n * @return {String}       The stringified iCalendar/vCard document\n */\nfunction stringify(jCal) {\n  if (typeof jCal[0] == \"string\") {\n    // This is a single component\n    jCal = [jCal];\n  }\n\n  let i = 0;\n  let len = jCal.length;\n  let result = '';\n\n  for (; i < len; i++) {\n    result += stringify.component(jCal[i]) + LINE_ENDING;\n  }\n\n  return result;\n}\n\n/**\n * Converts an jCal component array into a ICAL string.\n * Recursive will resolve sub-components.\n *\n * Exact component/property order is not saved all\n * properties will come before subcomponents.\n *\n * @function ICAL.stringify.component\n * @param {Array} component\n *        jCal/jCard fragment of a component\n * @param {designSet} designSet\n *        The design data to use for this component\n * @return {String}       The iCalendar/vCard string\n */\nstringify.component = function(component, designSet) {\n  let name = component[0].toUpperCase();\n  let result = 'BEGIN:' + name + LINE_ENDING;\n\n  let props = component[1];\n  let propIdx = 0;\n  let propLen = props.length;\n\n  let designSetName = component[0];\n  // rfc6350 requires that in vCard 4.0 the first component is the VERSION\n  // component with as value 4.0, note that 3.0 does not have this requirement.\n  if (designSetName === 'vcard' && component[1].length > 0 &&\n          !(component[1][0][0] === \"version\" && component[1][0][3] === \"4.0\")) {\n    designSetName = \"vcard3\";\n  }\n  designSet = designSet || design$1.getDesignSet(designSetName);\n\n  for (; propIdx < propLen; propIdx++) {\n    result += stringify.property(props[propIdx], designSet) + LINE_ENDING;\n  }\n\n  // Ignore subcomponents if none exist, e.g. in vCard.\n  let comps = component[2] || [];\n  let compIdx = 0;\n  let compLen = comps.length;\n\n  for (; compIdx < compLen; compIdx++) {\n    result += stringify.component(comps[compIdx], designSet) + LINE_ENDING;\n  }\n\n  result += 'END:' + name;\n  return result;\n};\n\n/**\n * Converts a single jCal/jCard property to a iCalendar/vCard string.\n *\n * @function ICAL.stringify.property\n * @param {Array} property\n *        jCal/jCard property array\n * @param {designSet} designSet\n *        The design data to use for this property\n * @param {Boolean} noFold\n *        If true, the line is not folded\n * @return {String}       The iCalendar/vCard string\n */\nstringify.property = function(property, designSet, noFold) {\n  let name = property[0].toUpperCase();\n  let jsName = property[0];\n  let params = property[1];\n\n  if (!designSet) {\n    designSet = design$1.defaultSet;\n  }\n\n  let groupName = params.group;\n  let line;\n  if (designSet.propertyGroups && groupName) {\n    line = groupName.toUpperCase() + \".\" + name;\n  } else {\n    line = name;\n  }\n\n  for (let [paramName, value] of Object.entries(params)) {\n    if (designSet.propertyGroups && paramName == 'group') {\n      continue;\n    }\n\n    let paramDesign = designSet.param[paramName];\n    let multiValue = paramDesign && paramDesign.multiValue;\n    if (multiValue && Array.isArray(value)) {\n      value = value.map(function(val) {\n        val = stringify._rfc6868Unescape(val);\n        val = stringify.paramPropertyValue(val, paramDesign.multiValueSeparateDQuote);\n        return val;\n      });\n      value = stringify.multiValue(value, multiValue, \"unknown\", null, designSet);\n    } else {\n      value = stringify._rfc6868Unescape(value);\n      value = stringify.paramPropertyValue(value);\n    }\n\n    line += ';' + paramName.toUpperCase() + '=' + value;\n  }\n\n  if (property.length === 3) {\n    // If there are no values, we must assume a blank value\n    return line + ':';\n  }\n\n  let valueType = property[2];\n\n  let propDetails;\n  let multiValue = false;\n  let structuredValue = false;\n  let isDefault = false;\n\n  if (jsName in designSet.property) {\n    propDetails = designSet.property[jsName];\n\n    if ('multiValue' in propDetails) {\n      multiValue = propDetails.multiValue;\n    }\n\n    if (('structuredValue' in propDetails) && Array.isArray(property[3])) {\n      structuredValue = propDetails.structuredValue;\n    }\n\n    if ('defaultType' in propDetails) {\n      if (valueType === propDetails.defaultType) {\n        isDefault = true;\n      }\n    } else {\n      if (valueType === DEFAULT_VALUE_TYPE) {\n        isDefault = true;\n      }\n    }\n  } else {\n    if (valueType === DEFAULT_VALUE_TYPE) {\n      isDefault = true;\n    }\n  }\n\n  // push the VALUE property if type is not the default\n  // for the current property.\n  if (!isDefault) {\n    // value will never contain ;/:/, so we don't escape it here.\n    line += ';VALUE=' + valueType.toUpperCase();\n  }\n\n  line += ':';\n\n  if (multiValue && structuredValue) {\n    line += stringify.multiValue(\n      property[3], structuredValue, valueType, multiValue, designSet, structuredValue\n    );\n  } else if (multiValue) {\n    line += stringify.multiValue(\n      property.slice(3), multiValue, valueType, null, designSet, false\n    );\n  } else if (structuredValue) {\n    line += stringify.multiValue(\n      property[3], structuredValue, valueType, null, designSet, structuredValue\n    );\n  } else {\n    line += stringify.value(property[3], valueType, designSet, false);\n  }\n\n  return noFold ? line : foldline(line);\n};\n\n/**\n * Handles escaping of property values that may contain:\n *\n *    COLON (:), SEMICOLON (;), or COMMA (,)\n *\n * If any of the above are present the result is wrapped\n * in double quotes.\n *\n * @function ICAL.stringify.paramPropertyValue\n * @param {String} value      Raw property value\n * @param {boolean} force     If value should be escaped even when unnecessary\n * @return {String}           Given or escaped value when needed\n */\nstringify.paramPropertyValue = function(value, force) {\n  if (!force &&\n      (value.indexOf(',') === -1) &&\n      (value.indexOf(':') === -1) &&\n      (value.indexOf(';') === -1)) {\n\n    return value;\n  }\n\n  return '\"' + value + '\"';\n};\n\n/**\n * Converts an array of ical values into a single\n * string based on a type and a delimiter value (like \",\").\n *\n * @function ICAL.stringify.multiValue\n * @param {Array} values      List of values to convert\n * @param {String} delim      Used to join the values (\",\", \";\", \":\")\n * @param {String} type       Lowecase ical value type\n *        (like boolean, date-time, etc..)\n * @param {?String} innerMulti If set, each value will again be processed\n *        Used for structured values\n * @param {designSet} designSet\n *        The design data to use for this property\n *\n * @return {String}           iCalendar/vCard string for value\n */\nstringify.multiValue = function(values, delim, type, innerMulti, designSet, structuredValue) {\n  let result = '';\n  let len = values.length;\n  let i = 0;\n\n  for (; i < len; i++) {\n    if (innerMulti && Array.isArray(values[i])) {\n      result += stringify.multiValue(values[i], innerMulti, type, null, designSet, structuredValue);\n    } else {\n      result += stringify.value(values[i], type, designSet, structuredValue);\n    }\n\n    if (i !== (len - 1)) {\n      result += delim;\n    }\n  }\n\n  return result;\n};\n\n/**\n * Processes a single ical value runs the associated \"toICAL\" method from the\n * design value type if available to convert the value.\n *\n * @function ICAL.stringify.value\n * @param {String|Number} value       A formatted value\n * @param {String} type               Lowercase iCalendar/vCard value type\n *  (like boolean, date-time, etc..)\n * @return {String}                   iCalendar/vCard value for single value\n */\nstringify.value = function(value, type, designSet, structuredValue) {\n  if (type in designSet.value && 'toICAL' in designSet.value[type]) {\n    return designSet.value[type].toICAL(value, structuredValue);\n  }\n  return value;\n};\n\n/**\n * Internal helper for rfc6868. Exposing this on ICAL.stringify so that\n * hackers can disable the rfc6868 parsing if the really need to.\n *\n * @param {String} val        The value to unescape\n * @return {String}           The escaped value\n */\nstringify._rfc6868Unescape = function(val) {\n  return val.replace(/[\\n^\"]/g, function(x) {\n    return RFC6868_REPLACE_MAP[x];\n  });\n};\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\nconst NAME_INDEX$1 = 0;\nconst PROP_INDEX = 1;\nconst TYPE_INDEX = 2;\nconst VALUE_INDEX = 3;\n\n/**\n * This lets typescript resolve our custom types in the\n * generated d.ts files (jsdoc typedefs are converted to typescript types).\n * Ignore prevents the typedefs from being documented more than once.\n * @ignore\n * @typedef {import(\"./types.js\").designSet} designSet\n * Imports the 'designSet' type from the \"types.js\" module\n * @typedef {import(\"./types.js\").Geo} Geo\n * Imports the 'Geo' type from the \"types.js\" module\n */\n\n/**\n * Provides a layer on top of the raw jCal object for manipulating a single property, with its\n * parameters and value.\n *\n * @memberof ICAL\n */\nclass Property {\n  /**\n   * Create an {@link ICAL.Property} by parsing the passed iCalendar string.\n   *\n   * @param {String} str            The iCalendar string to parse\n   * @param {designSet=} designSet  The design data to use for this property\n   * @return {Property}             The created iCalendar property\n   */\n  static fromString(str, designSet) {\n    return new Property(parse.property(str, designSet));\n  }\n\n  /**\n   * Creates a new ICAL.Property instance.\n   *\n   * It is important to note that mutations done in the wrapper directly mutate the jCal object used\n   * to initialize.\n   *\n   * Can also be used to create new properties by passing the name of the property (as a String).\n   *\n   * @param {Array|String} jCal         Raw jCal representation OR the new name of the property\n   * @param {Component=} parent         Parent component\n   */\n  constructor(jCal, parent) {\n    this._parent = parent || null;\n\n    if (typeof(jCal) === 'string') {\n      // We are creating the property by name and need to detect the type\n      this.jCal = [jCal, {}, design$1.defaultType];\n      this.jCal[TYPE_INDEX] = this.getDefaultType();\n    } else {\n      this.jCal = jCal;\n    }\n    this._updateType();\n  }\n\n  /**\n   * The value type for this property\n   * @type {String}\n   */\n  get type() {\n    return this.jCal[TYPE_INDEX];\n  }\n\n  /**\n   * The name of this property, in lowercase.\n   * @type {String}\n   */\n  get name() {\n    return this.jCal[NAME_INDEX$1];\n  }\n\n  /**\n   * The parent component for this property.\n   * @type {Component}\n   */\n  get parent() {\n    return this._parent;\n  }\n\n  set parent(p) {\n    // Before setting the parent, check if the design set has changed. If it\n    // has, we later need to update the type if it was unknown before.\n    let designSetChanged = !this._parent || (p && p._designSet != this._parent._designSet);\n\n    this._parent = p;\n\n    if (this.type == design$1.defaultType && designSetChanged) {\n      this.jCal[TYPE_INDEX] = this.getDefaultType();\n      this._updateType();\n    }\n  }\n\n  /**\n   * The design set for this property, e.g. icalendar vs vcard\n   *\n   * @type {designSet}\n   * @private\n   */\n  get _designSet() {\n    return this.parent ? this.parent._designSet : design$1.defaultSet;\n  }\n\n  /**\n   * Updates the type metadata from the current jCal type and design set.\n   *\n   * @private\n   */\n  _updateType() {\n    let designSet = this._designSet;\n\n    if (this.type in designSet.value) {\n      if ('decorate' in designSet.value[this.type]) {\n        this.isDecorated = true;\n      } else {\n        this.isDecorated = false;\n      }\n\n      if (this.name in designSet.property) {\n        this.isMultiValue = ('multiValue' in designSet.property[this.name]);\n        this.isStructuredValue = ('structuredValue' in designSet.property[this.name]);\n      }\n    }\n  }\n\n  /**\n   * Hydrate a single value. The act of hydrating means turning the raw jCal\n   * value into a potentially wrapped object, for example {@link ICAL.Time}.\n   *\n   * @private\n   * @param {Number} index        The index of the value to hydrate\n   * @return {?Object}             The decorated value.\n   */\n  _hydrateValue(index) {\n    if (this._values && this._values[index]) {\n      return this._values[index];\n    }\n\n    // for the case where there is no value.\n    if (this.jCal.length <= (VALUE_INDEX + index)) {\n      return null;\n    }\n\n    if (this.isDecorated) {\n      if (!this._values) {\n        this._values = [];\n      }\n      return (this._values[index] = this._decorate(\n        this.jCal[VALUE_INDEX + index]\n      ));\n    } else {\n      return this.jCal[VALUE_INDEX + index];\n    }\n  }\n\n  /**\n   * Decorate a single value, returning its wrapped object. This is used by\n   * the hydrate function to actually wrap the value.\n   *\n   * @private\n   * @param {?} value         The value to decorate\n   * @return {Object}         The decorated value\n   */\n  _decorate(value) {\n    return this._designSet.value[this.type].decorate(value, this);\n  }\n\n  /**\n   * Undecorate a single value, returning its raw jCal data.\n   *\n   * @private\n   * @param {Object} value         The value to undecorate\n   * @return {?}                   The undecorated value\n   */\n  _undecorate(value) {\n    return this._designSet.value[this.type].undecorate(value, this);\n  }\n\n  /**\n   * Sets the value at the given index while also hydrating it. The passed\n   * value can either be a decorated or undecorated value.\n   *\n   * @private\n   * @param {?} value             The value to set\n   * @param {Number} index        The index to set it at\n   */\n  _setDecoratedValue(value, index) {\n    if (!this._values) {\n      this._values = [];\n    }\n\n    if (typeof(value) === 'object' && 'icaltype' in value) {\n      // decorated value\n      this.jCal[VALUE_INDEX + index] = this._undecorate(value);\n      this._values[index] = value;\n    } else {\n      // undecorated value\n      this.jCal[VALUE_INDEX + index] = value;\n      this._values[index] = this._decorate(value);\n    }\n  }\n\n  /**\n   * Gets a parameter on the property.\n   *\n   * @param {String}        name   Parameter name (lowercase)\n   * @return {Array|String}        Parameter value\n   */\n  getParameter(name) {\n    if (name in this.jCal[PROP_INDEX]) {\n      return this.jCal[PROP_INDEX][name];\n    } else {\n      return undefined;\n    }\n  }\n\n  /**\n   * Gets first parameter on the property.\n   *\n   * @param {String}        name   Parameter name (lowercase)\n   * @return {String}        Parameter value\n   */\n  getFirstParameter(name) {\n    let parameters = this.getParameter(name);\n\n    if (Array.isArray(parameters)) {\n      return parameters[0];\n    }\n\n    return parameters;\n  }\n\n  /**\n   * Sets a parameter on the property.\n   *\n   * @param {String}       name     The parameter name\n   * @param {Array|String} value    The parameter value\n   */\n  setParameter(name, value) {\n    let lcname = name.toLowerCase();\n    if (typeof value === \"string\" &&\n        lcname in this._designSet.param &&\n        'multiValue' in this._designSet.param[lcname]) {\n        value = [value];\n    }\n    this.jCal[PROP_INDEX][name] = value;\n  }\n\n  /**\n   * Removes a parameter\n   *\n   * @param {String} name     The parameter name\n   */\n  removeParameter(name) {\n    delete this.jCal[PROP_INDEX][name];\n  }\n\n  /**\n   * Get the default type based on this property's name.\n   *\n   * @return {String}     The default type for this property\n   */\n  getDefaultType() {\n    let name = this.jCal[NAME_INDEX$1];\n    let designSet = this._designSet;\n\n    if (name in designSet.property) {\n      let details = designSet.property[name];\n      if ('defaultType' in details) {\n        return details.defaultType;\n      }\n    }\n    return design$1.defaultType;\n  }\n\n  /**\n   * Sets type of property and clears out any existing values of the current\n   * type.\n   *\n   * @param {String} type     New iCAL type (see design.*.values)\n   */\n  resetType(type) {\n    this.removeAllValues();\n    this.jCal[TYPE_INDEX] = type;\n    this._updateType();\n  }\n\n  /**\n   * Finds the first property value.\n   *\n   * @return {Binary | Duration | Period |\n   * Recur | Time | UtcOffset | Geo | string | null}         First property value\n   */\n  getFirstValue() {\n    return this._hydrateValue(0);\n  }\n\n  /**\n   * Gets all values on the property.\n   *\n   * NOTE: this creates an array during each call.\n   *\n   * @return {Array}          List of values\n   */\n  getValues() {\n    let len = this.jCal.length - VALUE_INDEX;\n\n    if (len < 1) {\n      // it is possible for a property to have no value.\n      return [];\n    }\n\n    let i = 0;\n    let result = [];\n\n    for (; i < len; i++) {\n      result[i] = this._hydrateValue(i);\n    }\n\n    return result;\n  }\n\n  /**\n   * Removes all values from this property\n   */\n  removeAllValues() {\n    if (this._values) {\n      this._values.length = 0;\n    }\n    this.jCal.length = 3;\n  }\n\n  /**\n   * Sets the values of the property.  Will overwrite the existing values.\n   * This can only be used for multi-value properties.\n   *\n   * @param {Array} values    An array of values\n   */\n  setValues(values) {\n    if (!this.isMultiValue) {\n      throw new Error(\n        this.name + ': does not not support mulitValue.\\n' +\n        'override isMultiValue'\n      );\n    }\n\n    let len = values.length;\n    let i = 0;\n    this.removeAllValues();\n\n    if (len > 0 &&\n        typeof(values[0]) === 'object' &&\n        'icaltype' in values[0]) {\n      this.resetType(values[0].icaltype);\n    }\n\n    if (this.isDecorated) {\n      for (; i < len; i++) {\n        this._setDecoratedValue(values[i], i);\n      }\n    } else {\n      for (; i < len; i++) {\n        this.jCal[VALUE_INDEX + i] = values[i];\n      }\n    }\n  }\n\n  /**\n   * Sets the current value of the property. If this is a multi-value\n   * property, all other values will be removed.\n   *\n   * @param {String|Object} value     New property value.\n   */\n  setValue(value) {\n    this.removeAllValues();\n    if (typeof(value) === 'object' && 'icaltype' in value) {\n      this.resetType(value.icaltype);\n    }\n\n    if (this.isDecorated) {\n      this._setDecoratedValue(value, 0);\n    } else {\n      this.jCal[VALUE_INDEX] = value;\n    }\n  }\n\n  /**\n   * Returns the Object representation of this component. The returned object\n   * is a live jCal object and should be cloned if modified.\n   * @return {Object}\n   */\n  toJSON() {\n    return this.jCal;\n  }\n\n  /**\n   * The string representation of this component.\n   * @return {String}\n   */\n  toICALString() {\n    return stringify.property(\n      this.jCal, this._designSet, true\n    );\n  }\n}\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n/**\n * This lets typescript resolve our custom types in the\n * generated d.ts files (jsdoc typedefs are converted to typescript types).\n * Ignore prevents the typedefs from being documented more than once.\n * @ignore\n * @typedef {import(\"./types.js\").designSet} designSet\n * Imports the 'designSet' type from the \"types.js\" module\n * @typedef {import(\"./types.js\").Geo} Geo\n * Imports the 'Geo' type from the \"types.js\" module\n */\n\nconst NAME_INDEX = 0;\nconst PROPERTY_INDEX = 1;\nconst COMPONENT_INDEX = 2;\n\n/**\n * Wraps a jCal component, adding convenience methods to add, remove and update subcomponents and\n * properties.\n *\n * @memberof ICAL\n */\nclass Component {\n  /**\n   * Create an {@link ICAL.Component} by parsing the passed iCalendar string.\n   *\n   * @param {String} str        The iCalendar string to parse\n   */\n  static fromString(str) {\n    return new Component(parse.component(str));\n  }\n\n  /**\n   * Creates a new Component instance.\n   *\n   * @param {Array|String} jCal         Raw jCal component data OR name of new\n   *                                      component\n   * @param {Component=} parent     Parent component to associate\n   */\n  constructor(jCal, parent) {\n    if (typeof(jCal) === 'string') {\n      // jCal spec (name, properties, components)\n      jCal = [jCal, [], []];\n    }\n\n    // mostly for legacy reasons.\n    this.jCal = jCal;\n\n    this.parent = parent || null;\n\n    if (!this.parent && this.name === 'vcalendar') {\n      this._timezoneCache = new Map();\n    }\n  }\n\n  /**\n   * Hydrated properties are inserted into the _properties array at the same\n   * position as in the jCal array, so it is possible that the array contains\n   * undefined values for unhydrdated properties. To avoid iterating the\n   * array when checking if all properties have been hydrated, we save the\n   * count here.\n   *\n   * @type {Number}\n   * @private\n   */\n  _hydratedPropertyCount = 0;\n\n  /**\n   * The same count as for _hydratedPropertyCount, but for subcomponents\n   *\n   * @type {Number}\n   * @private\n   */\n  _hydratedComponentCount = 0;\n\n  /**\n   * A cache of hydrated time zone objects which may be used by consumers, keyed\n   * by time zone ID.\n   *\n   * @type {Map}\n   * @private\n   */\n  _timezoneCache = null;\n\n  /**\n   * @private\n   */\n  _components = null;\n\n  /**\n   * @private\n   */\n  _properties = null;\n\n  /**\n   * The name of this component\n   *\n   * @type {String}\n   */\n  get name() {\n    return this.jCal[NAME_INDEX];\n  }\n\n  /**\n   * The design set for this component, e.g. icalendar vs vcard\n   *\n   * @type {designSet}\n   * @private\n   */\n  get _designSet() {\n    let parentDesign = this.parent && this.parent._designSet;\n    return parentDesign || design$1.getDesignSet(this.name);\n  }\n\n  /**\n   * @private\n   */\n  _hydrateComponent(index) {\n    if (!this._components) {\n      this._components = [];\n      this._hydratedComponentCount = 0;\n    }\n\n    if (this._components[index]) {\n      return this._components[index];\n    }\n\n    let comp = new Component(\n      this.jCal[COMPONENT_INDEX][index],\n      this\n    );\n\n    this._hydratedComponentCount++;\n    return (this._components[index] = comp);\n  }\n\n  /**\n   * @private\n   */\n  _hydrateProperty(index) {\n    if (!this._properties) {\n      this._properties = [];\n      this._hydratedPropertyCount = 0;\n    }\n\n    if (this._properties[index]) {\n      return this._properties[index];\n    }\n\n    let prop = new Property(\n      this.jCal[PROPERTY_INDEX][index],\n      this\n    );\n\n    this._hydratedPropertyCount++;\n    return (this._properties[index] = prop);\n  }\n\n  /**\n   * Finds first sub component, optionally filtered by name.\n   *\n   * @param {String=} name        Optional name to filter by\n   * @return {?Component}     The found subcomponent\n   */\n  getFirstSubcomponent(name) {\n    if (name) {\n      let i = 0;\n      let comps = this.jCal[COMPONENT_INDEX];\n      let len = comps.length;\n\n      for (; i < len; i++) {\n        if (comps[i][NAME_INDEX] === name) {\n          let result = this._hydrateComponent(i);\n          return result;\n        }\n      }\n    } else {\n      if (this.jCal[COMPONENT_INDEX].length) {\n        return this._hydrateComponent(0);\n      }\n    }\n\n    // ensure we return a value (strict mode)\n    return null;\n  }\n\n  /**\n   * Finds all sub components, optionally filtering by name.\n   *\n   * @param {String=} name            Optional name to filter by\n   * @return {Component[]}       The found sub components\n   */\n  getAllSubcomponents(name) {\n    let jCalLen = this.jCal[COMPONENT_INDEX].length;\n    let i = 0;\n\n    if (name) {\n      let comps = this.jCal[COMPONENT_INDEX];\n      let result = [];\n\n      for (; i < jCalLen; i++) {\n        if (name === comps[i][NAME_INDEX]) {\n          result.push(\n            this._hydrateComponent(i)\n          );\n        }\n      }\n      return result;\n    } else {\n      if (!this._components ||\n          (this._hydratedComponentCount !== jCalLen)) {\n        for (; i < jCalLen; i++) {\n          this._hydrateComponent(i);\n        }\n      }\n\n      return this._components || [];\n    }\n  }\n\n  /**\n   * Returns true when a named property exists.\n   *\n   * @param {String} name     The property name\n   * @return {Boolean}        True, when property is found\n   */\n  hasProperty(name) {\n    let props = this.jCal[PROPERTY_INDEX];\n    let len = props.length;\n\n    let i = 0;\n    for (; i < len; i++) {\n      // 0 is property name\n      if (props[i][NAME_INDEX] === name) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Finds the first property, optionally with the given name.\n   *\n   * @param {String=} name        Lowercase property name\n   * @return {?Property}     The found property\n   */\n  getFirstProperty(name) {\n    if (name) {\n      let i = 0;\n      let props = this.jCal[PROPERTY_INDEX];\n      let len = props.length;\n\n      for (; i < len; i++) {\n        if (props[i][NAME_INDEX] === name) {\n          let result = this._hydrateProperty(i);\n          return result;\n        }\n      }\n    } else {\n      if (this.jCal[PROPERTY_INDEX].length) {\n        return this._hydrateProperty(0);\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Returns first property's value, if available.\n   *\n   * @param {String=} name                    Lowercase property name\n   * @return {Binary | Duration | Period |\n   * Recur | Time | UtcOffset | Geo | string | null}         The found property value.\n   */\n  getFirstPropertyValue(name) {\n    let prop = this.getFirstProperty(name);\n    if (prop) {\n      return prop.getFirstValue();\n    }\n\n    return null;\n  }\n\n  /**\n   * Get all properties in the component, optionally filtered by name.\n   *\n   * @param {String=} name        Lowercase property name\n   * @return {Property[]}    List of properties\n   */\n  getAllProperties(name) {\n    let jCalLen = this.jCal[PROPERTY_INDEX].length;\n    let i = 0;\n\n    if (name) {\n      let props = this.jCal[PROPERTY_INDEX];\n      let result = [];\n\n      for (; i < jCalLen; i++) {\n        if (name === props[i][NAME_INDEX]) {\n          result.push(\n            this._hydrateProperty(i)\n          );\n        }\n      }\n      return result;\n    } else {\n      if (!this._properties ||\n          (this._hydratedPropertyCount !== jCalLen)) {\n        for (; i < jCalLen; i++) {\n          this._hydrateProperty(i);\n        }\n      }\n\n      return this._properties || [];\n    }\n  }\n\n  /**\n   * @private\n   */\n  _removeObjectByIndex(jCalIndex, cache, index) {\n    cache = cache || [];\n    // remove cached version\n    if (cache[index]) {\n      let obj = cache[index];\n      if (\"parent\" in obj) {\n          obj.parent = null;\n      }\n    }\n\n    cache.splice(index, 1);\n\n    // remove it from the jCal\n    this.jCal[jCalIndex].splice(index, 1);\n  }\n\n  /**\n   * @private\n   */\n  _removeObject(jCalIndex, cache, nameOrObject) {\n    let i = 0;\n    let objects = this.jCal[jCalIndex];\n    let len = objects.length;\n    let cached = this[cache];\n\n    if (typeof(nameOrObject) === 'string') {\n      for (; i < len; i++) {\n        if (objects[i][NAME_INDEX] === nameOrObject) {\n          this._removeObjectByIndex(jCalIndex, cached, i);\n          return true;\n        }\n      }\n    } else if (cached) {\n      for (; i < len; i++) {\n        if (cached[i] && cached[i] === nameOrObject) {\n          this._removeObjectByIndex(jCalIndex, cached, i);\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @private\n   */\n  _removeAllObjects(jCalIndex, cache, name) {\n    let cached = this[cache];\n\n    // Unfortunately we have to run through all children to reset their\n    // parent property.\n    let objects = this.jCal[jCalIndex];\n    let i = objects.length - 1;\n\n    // descending search required because splice\n    // is used and will effect the indices.\n    for (; i >= 0; i--) {\n      if (!name || objects[i][NAME_INDEX] === name) {\n        this._removeObjectByIndex(jCalIndex, cached, i);\n      }\n    }\n  }\n\n  /**\n   * Adds a single sub component.\n   *\n   * @param {Component} component        The component to add\n   * @return {Component}                 The passed in component\n   */\n  addSubcomponent(component) {\n    if (!this._components) {\n      this._components = [];\n      this._hydratedComponentCount = 0;\n    }\n\n    if (component.parent) {\n      component.parent.removeSubcomponent(component);\n    }\n\n    let idx = this.jCal[COMPONENT_INDEX].push(component.jCal);\n    this._components[idx - 1] = component;\n    this._hydratedComponentCount++;\n    component.parent = this;\n    return component;\n  }\n\n  /**\n   * Removes a single component by name or the instance of a specific\n   * component.\n   *\n   * @param {Component|String} nameOrComp    Name of component, or component\n   * @return {Boolean}                            True when comp is removed\n   */\n  removeSubcomponent(nameOrComp) {\n    let removed = this._removeObject(COMPONENT_INDEX, '_components', nameOrComp);\n    if (removed) {\n      this._hydratedComponentCount--;\n    }\n    return removed;\n  }\n\n  /**\n   * Removes all components or (if given) all components by a particular\n   * name.\n   *\n   * @param {String=} name            Lowercase component name\n   */\n  removeAllSubcomponents(name) {\n    let removed = this._removeAllObjects(COMPONENT_INDEX, '_components', name);\n    this._hydratedComponentCount = 0;\n    return removed;\n  }\n\n  /**\n   * Adds an {@link ICAL.Property} to the component.\n   *\n   * @param {Property} property      The property to add\n   * @return {Property}              The passed in property\n   */\n  addProperty(property) {\n    if (!(property instanceof Property)) {\n      throw new TypeError('must be instance of ICAL.Property');\n    }\n\n    if (!this._properties) {\n      this._properties = [];\n      this._hydratedPropertyCount = 0;\n    }\n\n    if (property.parent) {\n      property.parent.removeProperty(property);\n    }\n\n    let idx = this.jCal[PROPERTY_INDEX].push(property.jCal);\n    this._properties[idx - 1] = property;\n    this._hydratedPropertyCount++;\n    property.parent = this;\n    return property;\n  }\n\n  /**\n   * Helper method to add a property with a value to the component.\n   *\n   * @param {String}               name         Property name to add\n   * @param {String|Number|Object} value        Property value\n   * @return {Property}                    The created property\n   */\n  addPropertyWithValue(name, value) {\n    let prop = new Property(name);\n    prop.setValue(value);\n\n    this.addProperty(prop);\n\n    return prop;\n  }\n\n  /**\n   * Helper method that will update or create a property of the given name\n   * and sets its value. If multiple properties with the given name exist,\n   * only the first is updated.\n   *\n   * @param {String}               name         Property name to update\n   * @param {String|Number|Object} value        Property value\n   * @return {Property}                    The created property\n   */\n  updatePropertyWithValue(name, value) {\n    let prop = this.getFirstProperty(name);\n\n    if (prop) {\n      prop.setValue(value);\n    } else {\n      prop = this.addPropertyWithValue(name, value);\n    }\n\n    return prop;\n  }\n\n  /**\n   * Removes a single property by name or the instance of the specific\n   * property.\n   *\n   * @param {String|Property} nameOrProp     Property name or instance to remove\n   * @return {Boolean}                            True, when deleted\n   */\n  removeProperty(nameOrProp) {\n    let removed = this._removeObject(PROPERTY_INDEX, '_properties', nameOrProp);\n    if (removed) {\n      this._hydratedPropertyCount--;\n    }\n    return removed;\n  }\n\n  /**\n   * Removes all properties associated with this component, optionally\n   * filtered by name.\n   *\n   * @param {String=} name        Lowercase property name\n   * @return {Boolean}            True, when deleted\n   */\n  removeAllProperties(name) {\n    let removed = this._removeAllObjects(PROPERTY_INDEX, '_properties', name);\n    this._hydratedPropertyCount = 0;\n    return removed;\n  }\n\n  /**\n   * Returns the Object representation of this component. The returned object\n   * is a live jCal object and should be cloned if modified.\n   * @return {Object}\n   */\n  toJSON() {\n    return this.jCal;\n  }\n\n  /**\n   * The string representation of this component.\n   * @return {String}\n   */\n  toString() {\n    return stringify.component(\n      this.jCal, this._designSet\n    );\n  }\n\n  /**\n   * Retrieve a time zone definition from the component tree, if any is present.\n   * If the tree contains no time zone definitions or the TZID cannot be\n   * matched, returns null.\n   *\n   * @param {String} tzid     The ID of the time zone to retrieve\n   * @return {Timezone}  The time zone corresponding to the ID, or null\n   */\n  getTimeZoneByID(tzid) {\n    // VTIMEZONE components can only appear as a child of the VCALENDAR\n    // component; walk the tree if we're not the root.\n    if (this.parent) {\n      return this.parent.getTimeZoneByID(tzid);\n    }\n\n    // If there is no time zone cache, we are probably parsing an incomplete\n    // file and will have no time zone definitions.\n    if (!this._timezoneCache) {\n      return null;\n    }\n\n    if (this._timezoneCache.has(tzid)) {\n      return this._timezoneCache.get(tzid);\n    }\n\n    // If the time zone is not already cached, hydrate it from the\n    // subcomponents.\n    const zones = this.getAllSubcomponents('vtimezone');\n    for (const zone of zones) {\n      if (zone.getFirstProperty('tzid').getFirstValue() === tzid) {\n        const hydratedZone = new Timezone({\n          component: zone,\n          tzid: tzid,\n        });\n\n        this._timezoneCache.set(tzid, hydratedZone);\n\n        return hydratedZone;\n      }\n    }\n\n    // Per the standard, we should always have a time zone defined in a file\n    // for any referenced TZID, but don't blow up if the file is invalid.\n    return null;\n  }\n}\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n/**\n * Primary class for expanding recurring rules.  Can take multiple rrules, rdates, exdate(s) and\n * iterate (in order) over each next occurrence.\n *\n * Once initialized this class can also be serialized saved and continue iteration from the last\n * point.\n *\n * NOTE: it is intended that this class is to be used with {@link ICAL.Event} which handles recurrence\n * exceptions.\n *\n * @example\n * // assuming event is a parsed ical component\n * var event;\n *\n * var expand = new ICAL.RecurExpansion({\n *   component: event,\n *   dtstart: event.getFirstPropertyValue('dtstart')\n * });\n *\n * // remember there are infinite rules so it is a good idea to limit the scope of the iterations\n * // then resume later on.\n *\n * // next is always an ICAL.Time or null\n * var next;\n *\n * while (someCondition && (next = expand.next())) {\n *   // do something with next\n * }\n *\n * // save instance for later\n * var json = JSON.stringify(expand);\n *\n * //...\n *\n * // NOTE: if the component's properties have changed you will need to rebuild the class and start\n * // over. This only works when the component's recurrence info is the same.\n * var expand = new ICAL.RecurExpansion(JSON.parse(json));\n *\n * @memberof ICAL\n */\nclass RecurExpansion {\n  /**\n   * Creates a new ICAL.RecurExpansion instance.\n   *\n   * The options object can be filled with the specified initial values. It can also contain\n   * additional members, as a result of serializing a previous expansion state, as shown in the\n   * example.\n   *\n   * @param {Object} options\n   *        Recurrence expansion options\n   * @param {Time} options.dtstart\n   *        Start time of the event\n   * @param {Component=} options.component\n   *        Component for expansion, required if not resuming.\n   */\n  constructor(options) {\n    this.ruleDates = [];\n    this.exDates = [];\n    this.fromData(options);\n  }\n\n  /**\n   * True when iteration is fully completed.\n   * @type {Boolean}\n   */\n  complete = false;\n\n  /**\n   * Array of rrule iterators.\n   *\n   * @type {RecurIterator[]}\n   * @private\n   */\n  ruleIterators = null;\n\n  /**\n   * Array of rdate instances.\n   *\n   * @type {Time[]}\n   * @private\n   */\n  ruleDates = null;\n\n  /**\n   * Array of exdate instances.\n   *\n   * @type {Time[]}\n   * @private\n   */\n  exDates = null;\n\n  /**\n   * Current position in ruleDates array.\n   * @type {Number}\n   * @private\n   */\n  ruleDateInc = 0;\n\n  /**\n   * Current position in exDates array\n   * @type {Number}\n   * @private\n   */\n  exDateInc = 0;\n\n  /**\n   * Current negative date.\n   *\n   * @type {Time}\n   * @private\n   */\n  exDate = null;\n\n  /**\n   * Current additional date.\n   *\n   * @type {Time}\n   * @private\n   */\n  ruleDate = null;\n\n  /**\n   * Start date of recurring rules.\n   *\n   * @type {Time}\n   */\n  dtstart = null;\n\n  /**\n   * Last expanded time\n   *\n   * @type {Time}\n   */\n  last = null;\n\n  /**\n   * Initialize the recurrence expansion from the data object. The options\n   * object may also contain additional members, see the\n   * {@link ICAL.RecurExpansion constructor} for more details.\n   *\n   * @param {Object} options\n   *        Recurrence expansion options\n   * @param {Time} options.dtstart\n   *        Start time of the event\n   * @param {Component=} options.component\n   *        Component for expansion, required if not resuming.\n   */\n  fromData(options) {\n    let start = formatClassType(options.dtstart, Time);\n\n    if (!start) {\n      throw new Error('.dtstart (ICAL.Time) must be given');\n    } else {\n      this.dtstart = start;\n    }\n\n    if (options.component) {\n      this._init(options.component);\n    } else {\n      this.last = formatClassType(options.last, Time) || start.clone();\n\n      if (!options.ruleIterators) {\n        throw new Error('.ruleIterators or .component must be given');\n      }\n\n      this.ruleIterators = options.ruleIterators.map(function(item) {\n        return formatClassType(item, RecurIterator);\n      });\n\n      this.ruleDateInc = options.ruleDateInc;\n      this.exDateInc = options.exDateInc;\n\n      if (options.ruleDates) {\n        this.ruleDates = options.ruleDates.map(item => formatClassType(item, Time));\n        this.ruleDate = this.ruleDates[this.ruleDateInc];\n      }\n\n      if (options.exDates) {\n        this.exDates = options.exDates.map(item => formatClassType(item, Time));\n        this.exDate = this.exDates[this.exDateInc];\n      }\n\n      if (typeof(options.complete) !== 'undefined') {\n        this.complete = options.complete;\n      }\n    }\n  }\n\n  /**\n   * Retrieve the next occurrence in the series.\n   * @return {Time}\n   */\n  next() {\n    let iter;\n    let next;\n    let compare;\n\n    let maxTries = 500;\n    let currentTry = 0;\n\n    while (true) {\n      if (currentTry++ > maxTries) {\n        throw new Error(\n          'max tries have occurred, rule may be impossible to fulfill.'\n        );\n      }\n\n      next = this.ruleDate;\n      iter = this._nextRecurrenceIter(this.last);\n\n      // no more matches\n      // because we increment the rule day or rule\n      // _after_ we choose a value this should be\n      // the only spot where we need to worry about the\n      // end of events.\n      if (!next && !iter) {\n        // there are no more iterators or rdates\n        this.complete = true;\n        break;\n      }\n\n      // no next rule day or recurrence rule is first.\n      if (!next || (iter && next.compare(iter.last) > 0)) {\n        // must be cloned, recur will reuse the time element.\n        next = iter.last.clone();\n        // move to next so we can continue\n        iter.next();\n      }\n\n      // if the ruleDate is still next increment it.\n      if (this.ruleDate === next) {\n        this._nextRuleDay();\n      }\n\n      this.last = next;\n\n      // check the negative rules\n      if (this.exDate) {\n        compare = this.exDate.compare(this.last);\n\n        if (compare < 0) {\n          this._nextExDay();\n        }\n\n        // if the current rule is excluded skip it.\n        if (compare === 0) {\n          this._nextExDay();\n          continue;\n        }\n      }\n\n      //XXX: The spec states that after we resolve the final\n      //     list of dates we execute exdate this seems somewhat counter\n      //     intuitive to what I have seen most servers do so for now\n      //     I exclude based on the original date not the one that may\n      //     have been modified by the exception.\n      return this.last;\n    }\n  }\n\n  /**\n   * Converts object into a serialize-able format. This format can be passed\n   * back into the expansion to resume iteration.\n   * @return {Object}\n   */\n  toJSON() {\n    function toJSON(item) {\n      return item.toJSON();\n    }\n\n    let result = Object.create(null);\n    result.ruleIterators = this.ruleIterators.map(toJSON);\n\n    if (this.ruleDates) {\n      result.ruleDates = this.ruleDates.map(toJSON);\n    }\n\n    if (this.exDates) {\n      result.exDates = this.exDates.map(toJSON);\n    }\n\n    result.ruleDateInc = this.ruleDateInc;\n    result.exDateInc = this.exDateInc;\n    result.last = this.last.toJSON();\n    result.dtstart = this.dtstart.toJSON();\n    result.complete = this.complete;\n\n    return result;\n  }\n\n  /**\n   * Extract all dates from the properties in the given component. The\n   * properties will be filtered by the property name.\n   *\n   * @private\n   * @param {Component} component             The component to search in\n   * @param {String} propertyName             The property name to search for\n   * @return {Time[]}                         The extracted dates.\n   */\n  _extractDates(component, propertyName) {\n    let result = [];\n    let props = component.getAllProperties(propertyName);\n\n    for (let i = 0, len = props.length; i < len; i++) {\n      for (let prop of props[i].getValues()) {\n        let idx = binsearchInsert(\n          result,\n          prop,\n          (a, b) => a.compare(b)\n        );\n\n        // ordered insert\n        result.splice(idx, 0, prop);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Initialize the recurrence expansion.\n   *\n   * @private\n   * @param {Component} component    The component to initialize from.\n   */\n  _init(component) {\n    this.ruleIterators = [];\n\n    this.last = this.dtstart.clone();\n\n    // to provide api consistency non-recurring\n    // events can also use the iterator though it will\n    // only return a single time.\n    if (!component.hasProperty('rdate') &&\n        !component.hasProperty('rrule') &&\n        !component.hasProperty('recurrence-id')) {\n      this.ruleDate = this.last.clone();\n      this.complete = true;\n      return;\n    }\n\n    if (component.hasProperty('rdate')) {\n      this.ruleDates = this._extractDates(component, 'rdate');\n\n      // special hack for cases where first rdate is prior\n      // to the start date. We only check for the first rdate.\n      // This is mostly for google's crazy recurring date logic\n      // (contacts birthdays).\n      if ((this.ruleDates[0]) &&\n          (this.ruleDates[0].compare(this.dtstart) < 0)) {\n\n        this.ruleDateInc = 0;\n        this.last = this.ruleDates[0].clone();\n      } else {\n        this.ruleDateInc = binsearchInsert(\n          this.ruleDates,\n          this.last,\n          (a, b) => a.compare(b)\n        );\n      }\n\n      this.ruleDate = this.ruleDates[this.ruleDateInc];\n    }\n\n    if (component.hasProperty('rrule')) {\n      let rules = component.getAllProperties('rrule');\n      let i = 0;\n      let len = rules.length;\n\n      let rule;\n      let iter;\n\n      for (; i < len; i++) {\n        rule = rules[i].getFirstValue();\n        iter = rule.iterator(this.dtstart);\n        this.ruleIterators.push(iter);\n\n        // increment to the next occurrence so future\n        // calls to next return times beyond the initial iteration.\n        // XXX: I find this suspicious might be a bug?\n        iter.next();\n      }\n    }\n\n    if (component.hasProperty('exdate')) {\n      this.exDates = this._extractDates(component, 'exdate');\n      // if we have a .last day we increment the index to beyond it.\n      this.exDateInc = binsearchInsert(\n        this.exDates,\n        this.last,\n        (a, b) => a.compare(b)\n      );\n\n      this.exDate = this.exDates[this.exDateInc];\n    }\n  }\n\n  /**\n   * Advance to the next exdate\n   * @private\n   */\n  _nextExDay() {\n    this.exDate = this.exDates[++this.exDateInc];\n  }\n\n  /**\n   * Advance to the next rule date\n   * @private\n   */\n  _nextRuleDay() {\n    this.ruleDate = this.ruleDates[++this.ruleDateInc];\n  }\n\n  /**\n   * Find and return the recurrence rule with the most recent event and\n   * return it.\n   *\n   * @private\n   * @return {?RecurIterator}    Found iterator.\n   */\n  _nextRecurrenceIter() {\n    let iters = this.ruleIterators;\n\n    if (iters.length === 0) {\n      return null;\n    }\n\n    let len = iters.length;\n    let iter;\n    let iterTime;\n    let iterIdx = 0;\n    let chosenIter;\n\n    // loop through each iterator\n    for (; iterIdx < len; iterIdx++) {\n      iter = iters[iterIdx];\n      iterTime = iter.last;\n\n      // if iteration is complete\n      // then we must exclude it from\n      // the search and remove it.\n      if (iter.completed) {\n        len--;\n        if (iterIdx !== 0) {\n          iterIdx--;\n        }\n        iters.splice(iterIdx, 1);\n        continue;\n      }\n\n      // find the most recent possible choice\n      if (!chosenIter || chosenIter.last.compare(iterTime) > 0) {\n        // that iterator is saved\n        chosenIter = iter;\n      }\n    }\n\n    // the chosen iterator is returned but not mutated\n    // this iterator contains the most recent event.\n    return chosenIter;\n  }\n}\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n/**\n * This lets typescript resolve our custom types in the\n * generated d.ts files (jsdoc typedefs are converted to typescript types).\n * Ignore prevents the typedefs from being documented more than once.\n * @ignore\n * @typedef {import(\"./types.js\").frequencyValues} frequencyValues\n * Imports the 'frequencyValues' type from the \"types.js\" module\n * @typedef {import(\"./types.js\").occurrenceDetails} occurrenceDetails\n * Imports the 'occurrenceDetails' type from the \"types.js\" module\n */\n\n/**\n * ICAL.js is organized into multiple layers. The bottom layer is a raw jCal\n * object, followed by the component/property layer. The highest level is the\n * event representation, which this class is part of. See the\n * {@tutorial layers} guide for more details.\n *\n * @memberof ICAL\n */\nclass Event {\n  /**\n   * Creates a new ICAL.Event instance.\n   *\n   * @param {Component=} component              The ICAL.Component to base this event on\n   * @param {Object} [options]                  Options for this event\n   * @param {Boolean=} options.strictExceptions  When true, will verify exceptions are related by\n   *                                              their UUID\n   * @param {Array<Component|Event>=} options.exceptions\n   *          Exceptions to this event, either as components or events. If not\n   *            specified exceptions will automatically be set in relation of\n   *            component's parent\n   */\n  constructor(component, options) {\n    if (!(component instanceof Component)) {\n      options = component;\n      component = null;\n    }\n\n    if (component) {\n      this.component = component;\n    } else {\n      this.component = new Component('vevent');\n    }\n\n    this._rangeExceptionCache = Object.create(null);\n    this.exceptions = Object.create(null);\n    this.rangeExceptions = [];\n\n    if (options && options.strictExceptions) {\n      this.strictExceptions = options.strictExceptions;\n    }\n\n    if (options && options.exceptions) {\n      options.exceptions.forEach(this.relateException, this);\n    } else if (this.component.parent && !this.isRecurrenceException()) {\n      this.component.parent.getAllSubcomponents('vevent').forEach(function(event) {\n        if (event.hasProperty('recurrence-id')) {\n          this.relateException(event);\n        }\n      }, this);\n    }\n  }\n\n\n  static THISANDFUTURE = 'THISANDFUTURE';\n\n  /**\n   * List of related event exceptions.\n   *\n   * @type {Event[]}\n   */\n  exceptions = null;\n\n  /**\n   * When true, will verify exceptions are related by their UUID.\n   *\n   * @type {Boolean}\n   */\n  strictExceptions = false;\n\n  /**\n   * Relates a given event exception to this object.  If the given component\n   * does not share the UID of this event it cannot be related and will throw\n   * an exception.\n   *\n   * If this component is an exception it cannot have other exceptions\n   * related to it.\n   *\n   * @param {Component|Event} obj       Component or event\n   */\n  relateException(obj) {\n    if (this.isRecurrenceException()) {\n      throw new Error('cannot relate exception to exceptions');\n    }\n\n    if (obj instanceof Component) {\n      obj = new Event(obj);\n    }\n\n    if (this.strictExceptions && obj.uid !== this.uid) {\n      throw new Error('attempted to relate unrelated exception');\n    }\n\n    let id = obj.recurrenceId.toString();\n\n    // we don't sort or manage exceptions directly\n    // here the recurrence expander handles that.\n    this.exceptions[id] = obj;\n\n    // index RANGE=THISANDFUTURE exceptions so we can\n    // look them up later in getOccurrenceDetails.\n    if (obj.modifiesFuture()) {\n      let item = [\n        obj.recurrenceId.toUnixTime(), id\n      ];\n\n      // we keep them sorted so we can find the nearest\n      // value later on...\n      let idx = binsearchInsert(\n        this.rangeExceptions,\n        item,\n        compareRangeException\n      );\n\n      this.rangeExceptions.splice(idx, 0, item);\n    }\n  }\n\n  /**\n   * Checks if this record is an exception and has the RANGE=THISANDFUTURE\n   * value.\n   *\n   * @return {Boolean}        True, when exception is within range\n   */\n  modifiesFuture() {\n    if (!this.component.hasProperty('recurrence-id')) {\n      return false;\n    }\n\n    let range = this.component.getFirstProperty('recurrence-id').getParameter('range');\n    return range === Event.THISANDFUTURE;\n  }\n\n  /**\n   * Finds the range exception nearest to the given date.\n   *\n   * @param {Time} time   usually an occurrence time of an event\n   * @return {?Event}     the related event/exception or null\n   */\n  findRangeException(time) {\n    if (!this.rangeExceptions.length) {\n      return null;\n    }\n\n    let utc = time.toUnixTime();\n    let idx = binsearchInsert(\n      this.rangeExceptions,\n      [utc],\n      compareRangeException\n    );\n\n    idx -= 1;\n\n    // occurs before\n    if (idx < 0) {\n      return null;\n    }\n\n    let rangeItem = this.rangeExceptions[idx];\n\n    /* c8 ignore next 4 */\n    if (utc < rangeItem[0]) {\n      // sanity check only\n      return null;\n    }\n\n    return rangeItem[1];\n  }\n\n  /**\n   * Returns the occurrence details based on its start time.  If the\n   * occurrence has an exception will return the details for that exception.\n   *\n   * NOTE: this method is intend to be used in conjunction\n   *       with the {@link ICAL.Event#iterator iterator} method.\n   *\n   * @param {Time} occurrence               time occurrence\n   * @return {occurrenceDetails}            Information about the occurrence\n   */\n  getOccurrenceDetails(occurrence) {\n    let id = occurrence.toString();\n    let utcId = occurrence.convertToZone(Timezone.utcTimezone).toString();\n    let item;\n    let result = {\n      //XXX: Clone?\n      recurrenceId: occurrence\n    };\n\n    if (id in this.exceptions) {\n      item = result.item = this.exceptions[id];\n      result.startDate = item.startDate;\n      result.endDate = item.endDate;\n      result.item = item;\n    } else if (utcId in this.exceptions) {\n      item = this.exceptions[utcId];\n      result.startDate = item.startDate;\n      result.endDate = item.endDate;\n      result.item = item;\n    } else {\n      // range exceptions (RANGE=THISANDFUTURE) have a\n      // lower priority then direct exceptions but\n      // must be accounted for first. Their item is\n      // always the first exception with the range prop.\n      let rangeExceptionId = this.findRangeException(\n        occurrence\n      );\n      let end;\n\n      if (rangeExceptionId) {\n        let exception = this.exceptions[rangeExceptionId];\n\n        // range exception must modify standard time\n        // by the difference (if any) in start/end times.\n        result.item = exception;\n\n        let startDiff = this._rangeExceptionCache[rangeExceptionId];\n\n        if (!startDiff) {\n          let original = exception.recurrenceId.clone();\n          let newStart = exception.startDate.clone();\n\n          // zones must be same otherwise subtract may be incorrect.\n          original.zone = newStart.zone;\n          startDiff = newStart.subtractDate(original);\n\n          this._rangeExceptionCache[rangeExceptionId] = startDiff;\n        }\n\n        let start = occurrence.clone();\n        start.zone = exception.startDate.zone;\n        start.addDuration(startDiff);\n\n        end = start.clone();\n        end.addDuration(exception.duration);\n\n        result.startDate = start;\n        result.endDate = end;\n      } else {\n        // no range exception standard expansion\n        end = occurrence.clone();\n        end.addDuration(this.duration);\n\n        result.endDate = end;\n        result.startDate = occurrence;\n        result.item = this;\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Builds a recur expansion instance for a specific point in time (defaults\n   * to startDate).\n   *\n   * @param {Time=} startTime     Starting point for expansion\n   * @return {RecurExpansion}    Expansion object\n   */\n  iterator(startTime) {\n    return new RecurExpansion({\n      component: this.component,\n      dtstart: startTime || this.startDate\n    });\n  }\n\n  /**\n   * Checks if the event is recurring\n   *\n   * @return {Boolean}        True, if event is recurring\n   */\n  isRecurring() {\n    let comp = this.component;\n    return comp.hasProperty('rrule') || comp.hasProperty('rdate');\n  }\n\n  /**\n   * Checks if the event describes a recurrence exception. See\n   * {@tutorial terminology} for details.\n   *\n   * @return {Boolean}    True, if the event describes a recurrence exception\n   */\n  isRecurrenceException() {\n    return this.component.hasProperty('recurrence-id');\n  }\n\n  /**\n   * Returns the types of recurrences this event may have.\n   *\n   * Returned as an object with the following possible keys:\n   *\n   *    - YEARLY\n   *    - MONTHLY\n   *    - WEEKLY\n   *    - DAILY\n   *    - MINUTELY\n   *    - SECONDLY\n   *\n   * @return {Object.<frequencyValues, Boolean>}\n   *          Object of recurrence flags\n   */\n  getRecurrenceTypes() {\n    let rules = this.component.getAllProperties('rrule');\n    let i = 0;\n    let len = rules.length;\n    let result = Object.create(null);\n\n    for (; i < len; i++) {\n      let value = rules[i].getFirstValue();\n      result[value.freq] = true;\n    }\n\n    return result;\n  }\n\n  /**\n   * The uid of this event\n   * @type {String}\n   */\n  get uid() {\n    return this._firstProp('uid');\n  }\n\n  set uid(value) {\n    this._setProp('uid', value);\n  }\n\n  /**\n   * The start date\n   * @type {Time}\n   */\n  get startDate() {\n    return this._firstProp('dtstart');\n  }\n\n  set startDate(value) {\n    this._setTime('dtstart', value);\n  }\n\n  /**\n   * The end date. This can be the result directly from the property, or the\n   * end date calculated from start date and duration. Setting the property\n   * will remove any duration properties.\n   * @type {Time}\n   */\n  get endDate() {\n    let endDate = this._firstProp('dtend');\n    if (!endDate) {\n        let duration = this._firstProp('duration');\n        endDate = this.startDate.clone();\n        if (duration) {\n            endDate.addDuration(duration);\n        } else if (endDate.isDate) {\n            endDate.day += 1;\n        }\n    }\n    return endDate;\n  }\n\n  set endDate(value) {\n    if (this.component.hasProperty('duration')) {\n      this.component.removeProperty('duration');\n    }\n    this._setTime('dtend', value);\n  }\n\n  /**\n   * The duration. This can be the result directly from the property, or the\n   * duration calculated from start date and end date. Setting the property\n   * will remove any `dtend` properties.\n   * @type {Duration}\n   */\n  get duration() {\n    let duration = this._firstProp('duration');\n    if (!duration) {\n      return this.endDate.subtractDateTz(this.startDate);\n    }\n    return duration;\n  }\n\n  set duration(value) {\n    if (this.component.hasProperty('dtend')) {\n      this.component.removeProperty('dtend');\n    }\n\n    this._setProp('duration', value);\n  }\n\n  /**\n   * The location of the event.\n   * @type {String}\n   */\n  get location() {\n    return this._firstProp('location');\n  }\n\n  set location(value) {\n    this._setProp('location', value);\n  }\n\n  /**\n   * The attendees in the event\n   * @type {Property[]}\n   */\n  get attendees() {\n    //XXX: This is way lame we should have a better\n    //     data structure for this later.\n    return this.component.getAllProperties('attendee');\n  }\n\n  /**\n   * The event summary\n   * @type {String}\n   */\n  get summary() {\n    return this._firstProp('summary');\n  }\n\n  set summary(value) {\n    this._setProp('summary', value);\n  }\n\n  /**\n   * The event description.\n   * @type {String}\n   */\n  get description() {\n    return this._firstProp('description');\n  }\n\n  set description(value) {\n    this._setProp('description', value);\n  }\n\n  /**\n   * The event color from [rfc7986](https://datatracker.ietf.org/doc/html/rfc7986)\n   * @type {String}\n   */\n  get color() {\n    return this._firstProp('color');\n  }\n\n  set color(value) {\n    this._setProp('color', value);\n  }\n\n  /**\n   * The organizer value as an uri. In most cases this is a mailto: uri, but\n   * it can also be something else, like urn:uuid:...\n   * @type {String}\n   */\n  get organizer() {\n    return this._firstProp('organizer');\n  }\n\n  set organizer(value) {\n    this._setProp('organizer', value);\n  }\n\n  /**\n   * The sequence value for this event. Used for scheduling\n   * see {@tutorial terminology}.\n   * @type {Number}\n   */\n  get sequence() {\n    return this._firstProp('sequence');\n  }\n\n  set sequence(value) {\n    this._setProp('sequence', value);\n  }\n\n  /**\n   * The recurrence id for this event. See {@tutorial terminology} for details.\n   * @type {Time}\n   */\n  get recurrenceId() {\n    return this._firstProp('recurrence-id');\n  }\n\n  set recurrenceId(value) {\n    this._setTime('recurrence-id', value);\n  }\n\n  /**\n   * Set/update a time property's value.\n   * This will also update the TZID of the property.\n   *\n   * TODO: this method handles the case where we are switching\n   * from a known timezone to an implied timezone (one without TZID).\n   * This does _not_ handle the case of moving between a known\n   *  (by TimezoneService) timezone to an unknown timezone...\n   *\n   * We will not add/remove/update the VTIMEZONE subcomponents\n   *  leading to invalid ICAL data...\n   * @private\n   * @param {String} propName     The property name\n   * @param {Time} time           The time to set\n   */\n  _setTime(propName, time) {\n    let prop = this.component.getFirstProperty(propName);\n\n    if (!prop) {\n      prop = new Property(propName);\n      this.component.addProperty(prop);\n    }\n\n    // utc and local don't get a tzid\n    if (\n      time.zone === Timezone.localTimezone ||\n      time.zone === Timezone.utcTimezone\n    ) {\n      // remove the tzid\n      prop.removeParameter('tzid');\n    } else {\n      prop.setParameter('tzid', time.zone.tzid);\n    }\n\n    prop.setValue(time);\n  }\n\n  _setProp(name, value) {\n    this.component.updatePropertyWithValue(name, value);\n  }\n\n  _firstProp(name) {\n    return this.component.getFirstPropertyValue(name);\n  }\n\n  /**\n   * The string representation of this event.\n   * @return {String}\n   */\n  toString() {\n    return this.component.toString();\n  }\n}\n\nfunction compareRangeException(a, b) {\n  if (a[0] > b[0]) return 1;\n  if (b[0] > a[0]) return -1;\n  return 0;\n}\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n/**\n * The ComponentParser is used to process a String or jCal Object,\n * firing callbacks for various found components, as well as completion.\n *\n * @example\n * var options = {\n *   // when false no events will be emitted for type\n *   parseEvent: true,\n *   parseTimezone: true\n * };\n *\n * var parser = new ICAL.ComponentParser(options);\n *\n * parser.onevent(eventComponent) {\n *   //...\n * }\n *\n * // ontimezone, etc...\n *\n * parser.oncomplete = function() {\n *\n * };\n *\n * parser.process(stringOrComponent);\n *\n * @memberof ICAL\n */\nclass ComponentParser {\n  /**\n   * Creates a new ICAL.ComponentParser instance.\n   *\n   * @param {Object=} options                   Component parser options\n   * @param {Boolean} options.parseEvent        Whether events should be parsed\n   * @param {Boolean} options.parseTimezeone    Whether timezones should be parsed\n   */\n  constructor(options) {\n    if (typeof(options) === 'undefined') {\n      options = {};\n    }\n\n    for (let [key, value] of Object.entries(options)) {\n      this[key] = value;\n    }\n  }\n\n  /**\n   * When true, parse events\n   *\n   * @type {Boolean}\n   */\n  parseEvent = true;\n\n  /**\n   * When true, parse timezones\n   *\n   * @type {Boolean}\n   */\n  parseTimezone = true;\n\n\n  /* SAX like events here for reference */\n\n  /**\n   * Fired when parsing is complete\n   * @callback\n   */\n  oncomplete = /* c8 ignore next */ function() {};\n\n  /**\n   * Fired if an error occurs during parsing.\n   *\n   * @callback\n   * @param {Error} err details of error\n   */\n  onerror = /* c8 ignore next */ function(err) {};\n\n  /**\n   * Fired when a top level component (VTIMEZONE) is found\n   *\n   * @callback\n   * @param {Timezone} component     Timezone object\n   */\n  ontimezone = /* c8 ignore next */ function(component) {};\n\n  /**\n   * Fired when a top level component (VEVENT) is found.\n   *\n   * @callback\n   * @param {Event} component    Top level component\n   */\n  onevent = /* c8 ignore next */ function(component) {};\n\n  /**\n   * Process a string or parse ical object.  This function itself will return\n   * nothing but will start the parsing process.\n   *\n   * Events must be registered prior to calling this method.\n   *\n   * @param {Component|String|Object} ical      The component to process,\n   *        either in its final form, as a jCal Object, or string representation\n   */\n  process(ical) {\n    //TODO: this is sync now in the future we will have a incremental parser.\n    if (typeof(ical) === 'string') {\n      ical = parse(ical);\n    }\n\n    if (!(ical instanceof Component)) {\n      ical = new Component(ical);\n    }\n\n    let components = ical.getAllSubcomponents();\n    let i = 0;\n    let len = components.length;\n    let component;\n\n    for (; i < len; i++) {\n      component = components[i];\n\n      switch (component.name) {\n        case 'vtimezone':\n          if (this.parseTimezone) {\n            let tzid = component.getFirstPropertyValue('tzid');\n            if (tzid) {\n              this.ontimezone(new Timezone({\n                tzid: tzid,\n                component: component\n              }));\n            }\n          }\n          break;\n        case 'vevent':\n          if (this.parseEvent) {\n            this.onevent(new Event(component));\n          }\n          break;\n        default:\n          continue;\n      }\n    }\n\n    //XXX: ideally we should do a \"nextTick\" here\n    //     so in all cases this is actually async.\n    this.oncomplete();\n  }\n}\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */\n\n/**\n * The main ICAL module. Provides access to everything else.\n *\n * @alias ICAL\n * @namespace ICAL\n * @property {ICAL.design} design\n * @property {ICAL.helpers} helpers\n */\nvar ICALmodule = {\n  /**\n   * The number of characters before iCalendar line folding should occur\n   * @type {Number}\n   * @default 75\n   */\n  foldLength: 75,\n\n  debug: false,\n\n  /**\n   * The character(s) to be used for a newline. The default value is provided by\n   * rfc5545.\n   * @type {String}\n   * @default \"\\r\\n\"\n   */\n  newLineChar: '\\r\\n',\n\n  Binary,\n  Component,\n  ComponentParser,\n  Duration,\n  Event,\n  Period,\n  Property,\n  Recur,\n  RecurExpansion,\n  RecurIterator,\n  Time,\n  Timezone,\n  TimezoneService,\n  UtcOffset,\n  VCardTime,\n\n  parse,\n  stringify,\n\n  design: design$1,\n  helpers\n};\n\nexport { ICALmodule as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}